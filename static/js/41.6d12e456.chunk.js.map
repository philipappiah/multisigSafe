{"version":3,"sources":["components/forms/Field/index.tsx","components/forms/TextField/index.tsx","components/forms/GnoForm/index.tsx","assets/icons/qrcode.svg","components/ScanQRModal/style.ts","components/ScanQRModal/index.tsx","components/ScanQRModal/ScanQRWrapper/index.tsx","components/forms/AddressInput/index.tsx","components/Table/TableHead.tsx","components/Table/sorting.ts","components/Table/index.tsx","routes/safe/components/AddressBook/style.ts","routes/safe/components/AddressBook/CreateEditEntryModal/style.ts","routes/safe/components/AddressBook/CreateEditEntryModal/index.tsx","routes/safe/components/AddressBook/HelpInfo/index.tsx","routes/safe/components/AddressBook/ExportEntriesModal/assets/success.svg","routes/safe/components/AddressBook/ExportEntriesModal/assets/error.svg","routes/safe/components/AddressBook/ExportEntriesModal/assets/wait.svg","routes/safe/components/AddressBook/ExportEntriesModal/index.tsx","routes/safe/components/AddressBook/DeleteEntryModal/index.tsx","routes/safe/components/AddressBook/columns.ts","routes/safe/components/AddressBook/ImportEntriesModal/index.tsx","routes/safe/components/AddressBook/index.tsx"],"names":["GnoField","props","overflowStyle","overflow","width","useStyles","makeStyles","createStyles","root","paddingTop","lg","paddingBottom","lineHeight","TextField","input","name","onChange","value","restInput","inputAdornment","meta","multiline","rows","testId","text","rest","classes","helperText","undefined","showError","touched","pristine","valid","hasError","error","modifiedSinceLastSubmit","submitError","errorMessage","isInactiveAndPristineOrUntouched","active","isInvalidAndUntouched","disableUnderline","inputRoot","statusClasses","inputProps","autoComplete","inputRootProps","className","InputProps","style","stylesBasedOn","padding","flexDirection","flex","GnoForm","children","decorators","formMutators","initialValues","onSubmit","subscription","validation","mutators","render","handleSubmit","data-testid","submitting","validating","form","validate","styles","heading","justifyContent","maxHeight","boxSizing","loaderContainer","height","close","color","secondaryText","detailsContainer","backgroundColor","background","buttonRow","button","marginLeft","sm","ScanQRModal","isOpen","onClose","onScan","useState","fileUploadModalOpen","setFileUploadModalOpen","setError","cameraBlocked","setCameraBlocked","scannerRef","React","openImageDialog","current","useEffect","onFileScannedResolve","successData","console","Modal","description","handleClose","open","title","Row","align","grow","Paragraph","noMargin","size","IconButton","disableRipple","onClick","Hairline","Col","layout","middle","Block","margin","legacyMode","onError","err","data","ref","facingMode","Button","minWidth","variant","qrCodeBtn","cursor","ScanQRWrapper","handleScan","qrModalOpen","setQrModalOpen","closeQrModal","alt","role","src","QRIcon","AddressInput","placeholder","fieldMutator","validators","defaultValue","disabled","component","type","composeValidators","required","mustBeEthereumAddress","a","address","trimSpaces","isValidEnsName","isValidCryptoDomainName","getAddressFromDomain","resolverAddr","formattedAddress","checksumAddress","logError","Errors","_101","message","cellWidth","maxWidth","GnoTableHead","changeSort","property","orderAttr","onSort","this","columns","order","orderBy","map","column","key","id","disablePadding","sortDirection","static","label","direction","desc","b","orderProp","format","borderTopRightRadius","borderTopLeftRadius","boxShadow","selectRoot","xxl","white","paginationRoot","marginBottom","xl","borderBottomRightRadius","borderBottomLeftRadius","loader","backProps","nextProps","GnoTable","newOrderBy","state","defaultOrder","newOrder","setState","fixed","getEmptyStyle","display","alignItems","handleChangePage","e","page","handleChangeRowsPerPage","rowsPerPage","Number","target","defaultOrderBy","find","defaultFixed","defaultRowsPerPage","disableLoadingOnEmptyTable","disablePagination","noBorder","orderByParam","orderParam","displayRows","fixedParam","paginationClasses","columnSort","sortedData","dataArray","cmp","fixedElems","filter","elem","List","stabilizedThis","el","index","sortedElems","sort","concat","stableSort","getSorting","formatTypeSort","slice","isEmpty","Table","aria-labelledby","TableHead","TableBody","TablePagination","backIconButtonProps","count","nextIconButtonProps","onChangePage","onChangeRowsPerPage","rowsPerPageOptions","defaultProps","withStyles","formContainer","minHeight","annotation","paddingLeft","hide","visibility","actions","noBorderBottom","borderBottom","controlsRow","borderRadius","editEntryButton","editEntryButtonNonOwner","removeEntryButton","marginRight","removeEntryButtonDisabled","removeEntryButtonNonOwner","md","leftIcon","iconSmall","fontSize","manage","container","CREATE_ENTRY_INPUT_NAME_ID","CREATE_ENTRY_INPUT_ADDRESS_ID","SAVE_NEW_ENTRY_BTN_ID","setOwnerAddress","args","utils","changeValue","CreateEditEntryModal","editEntryModalHandler","entryToEdit","newEntryModalHandler","entry","isNew","storedAddresses","useSelector","addressBookAddressesListSelector","isUniqueAddress","uniqueAddress","Header","Title","Body","withoutPadding","values","formState","scannedAddress","startsWith","replace","xs","Field","validAddressBookName","center","Footer","Buttons","cancelButtonProps","confirmButtonProps","StyledIcon","styled","Icon","HelpInfo","href","rel","as","ImageContainer","StyledButton","InfoContainer","BodyImage","div","StyledLoader","Loader","StyledCSVLink","CSVDownloader","ExportEntriesModal","dispatch","useDispatch","addressBook","addressBookSelector","loading","setLoading","csvData","setCsvData","doRetry","setDoRetry","date","Date","jsonToCSV","handleCsvData","withoutMargin","Img","ErrorSvg","LoadingSvg","SuccessSvg","strong","length","withoutBorder","setTimeout","notification","getNotificationsFromTxType","TX_NOTIFICATION_TYPES","ADDRESS_BOOK_EXPORT_ENTRIES","action","afterExecution","afterExecutionError","noMoreConfirmationsNeeded","enqueueSnackbar","enhanceSnackbarForAction","bom","filename","DeleteEntryModal","deleteEntryModalHandler","entryToDelete","AB_NAME_ID","AB_ADDRESS_ID","ImportContainer","theme","colors","IMPORT_SUPPORTED_FORMATS","ImportEntriesModal","importEntryModalHandler","csvLoaded","setCsvLoaded","importError","setImportError","entryList","setEntryList","validateFile","file","includes","validateCsvData","toLowerCase","isValidAddress","isNaN","onDrop","slicedData","fileError","dataError","formatedList","chainId","parseInt","addRemoveButton","onRemoveFile","dropArea","borderColor","dropAreaActive","dropFile","fileSizeInfo","position","left","top","fileNameInfo","progressBar","removeButton","UnStyledButton","icon","getNetworkId","initialEntryState","AddressBookTable","nameColumn","custom","addressColumn","actionsColumn","generateColumns","autoColumns","safesList","safesListSelector","entryAddressToEditOrCreateNew","addressBookQueryParamsSelector","granted","grantedSelector","selectedEntry","setSelectedEntry","editCreateEntryModalOpen","setEditCreateEntryModalOpen","importEntryModalOpen","setImportEntryModalOpen","deleteEntryModalOpen","setDeleteEntryModalOpen","exportEntriesModalOpen","setExportEntriesModalOpen","sendFundsModalOpen","setSendFundsModalOpen","trackEvent","useAnalytics","category","SAFE_NAVIGATION_EVENT","oldEntryIndex","findIndex","sameAddress","end","iconType","iconSize","textSize","TableContainer","row","userOwner","isUserAnOwnerOfAnySafe","hideBorderBottom","TableRow","cn","tabIndex","TableCell","justify","hash","showCopyBtn","showAvatar","explorerUrl","getExplorerInfo","isOwnerAddress","tooltip","addressBookAddOrUpdate","makeAddressBookEntry","addressBookRemove","addressList","addressBookImport","SendModal","activeScreenType","recipientAddress","recipientName"],"mappings":"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","file":"static/js/41.6d12e456.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Field } from 'react-final-form'\r\n\r\n// $FlowFixMe\r\nconst GnoField = ({ ...props }: any) => <Field {...props} />\r\n\r\nexport default GnoField\r\n","import MuiTextField from '@material-ui/core/TextField'\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles'\r\nimport React from 'react'\r\n\r\nimport { lg } from 'src/theme/variables'\r\n\r\n// Neded for solving a fix in Windows browsers\r\nconst overflowStyle = {\r\n  overflow: 'hidden',\r\n  width: '100%',\r\n}\r\n\r\nconst styles = () =>\r\n  createStyles({\r\n    root: {\r\n      paddingTop: lg,\r\n      paddingBottom: '12px',\r\n      lineHeight: 0,\r\n    },\r\n  })\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\ntype Props = {\r\n  input: {\r\n    name: string\r\n    onChange?: () => void\r\n    value: string\r\n    placeholder: string\r\n    type: string\r\n  }\r\n  meta: {\r\n    touched?: boolean\r\n    pristine?: boolean\r\n    valid?: boolean\r\n    error?: string\r\n    modifiedSinceLastSubmit?: boolean\r\n    submitError?: boolean\r\n    active?: boolean\r\n  }\r\n  inputAdornment?: { endAdornment: React.ReactElement } | undefined\r\n  multiline: boolean\r\n  rows?: string\r\n  testId: string\r\n  text: string\r\n  disabled?: boolean\r\n  rowsMax?: number\r\n  className?: string\r\n}\r\n\r\nconst TextField = (props: Props): React.ReactElement => {\r\n  const {\r\n    input: { name, onChange, value, ...restInput },\r\n    inputAdornment,\r\n    meta,\r\n    multiline,\r\n    rows,\r\n    testId,\r\n    text,\r\n    ...rest\r\n  } = props\r\n  const classes = useStyles()\r\n  const helperText = value ? text : undefined\r\n  const showError = (meta.touched || !meta.pristine) && !meta.valid\r\n  const hasError = !!meta.error || (!meta.modifiedSinceLastSubmit && !!meta.submitError)\r\n  const errorMessage = meta.error || meta.submitError\r\n  const isInactiveAndPristineOrUntouched = !meta.active && (meta.pristine || !meta.touched)\r\n  const isInvalidAndUntouched = typeof meta.error === 'undefined' ? true : !meta.touched\r\n\r\n  const disableUnderline = isInactiveAndPristineOrUntouched && isInvalidAndUntouched\r\n\r\n  const inputRoot = helperText ? classes.root : ''\r\n  const statusClasses = meta.valid ? 'isValid' : hasError && showError ? 'isInvalid' : ''\r\n  const inputProps = {\r\n    ...restInput,\r\n    autoComplete: 'off',\r\n    'data-testid': testId,\r\n  }\r\n  const inputRootProps = {\r\n    ...inputAdornment,\r\n    className: `${inputRoot} ${statusClasses}`,\r\n    disableUnderline: disableUnderline,\r\n  }\r\n\r\n  return (\r\n    <MuiTextField\r\n      error={hasError && showError}\r\n      helperText={hasError && showError ? errorMessage : helperText || ' '}\r\n      inputProps={inputProps} // blank in order to force to have helper text\r\n      InputProps={inputRootProps}\r\n      multiline={multiline}\r\n      name={name}\r\n      onChange={onChange}\r\n      rows={rows}\r\n      style={overflowStyle}\r\n      value={value}\r\n      {...rest}\r\n    />\r\n  )\r\n}\r\n\r\nexport default TextField\r\n","import * as React from 'react'\r\nimport { Form } from 'react-final-form'\r\n\r\nconst stylesBasedOn = (padding) => ({\r\n  padding: `0 ${padding}%`,\r\n  flexDirection: 'column',\r\n  flex: '1 0 auto',\r\n})\r\n\r\nconst GnoForm = ({\r\n  children,\r\n  decorators,\r\n  formMutators,\r\n  initialValues,\r\n  onSubmit,\r\n  padding = 0,\r\n  subscription,\r\n  testId = '',\r\n  validation,\r\n}: any) => (\r\n  <Form\r\n    decorators={decorators}\r\n    initialValues={initialValues}\r\n    mutators={formMutators}\r\n    onSubmit={onSubmit}\r\n    render={({ handleSubmit, ...rest }) => (\r\n      <form data-testid={testId} onSubmit={handleSubmit} style={stylesBasedOn(padding) as any}>\r\n        {children(rest.submitting, rest.validating, rest, rest.form.mutators)}\r\n      </form>\r\n    )}\r\n    subscription={subscription}\r\n    validate={validation}\r\n  />\r\n)\r\n\r\nexport default GnoForm\r\n","export default __webpack_public_path__ + \"static/media/qrcode.f0b048aa.svg\";","import { background, lg, secondaryText, sm } from 'src/theme/variables'\r\nimport { createStyles } from '@material-ui/core'\r\n\r\nexport const styles = createStyles({\r\n  heading: {\r\n    padding: lg,\r\n    justifyContent: 'space-between',\r\n    maxHeight: '75px',\r\n    boxSizing: 'border-box',\r\n  },\r\n  loaderContainer: {\r\n    width: '100%',\r\n    height: '100%',\r\n  },\r\n  close: {\r\n    height: '25px',\r\n    width: '25px',\r\n    color: secondaryText,\r\n  },\r\n  detailsContainer: {\r\n    backgroundColor: background,\r\n    maxHeight: '450px',\r\n  },\r\n  buttonRow: {\r\n    height: '84px',\r\n    justifyContent: 'center',\r\n  },\r\n  button: {\r\n    '&:last-child': {\r\n      marginLeft: sm,\r\n    },\r\n  },\r\n})\r\n","import IconButton from '@material-ui/core/IconButton'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Close from '@material-ui/icons/Close'\r\nimport * as React from 'react'\r\nimport QrReader from 'react-qr-reader'\r\n\r\nimport { styles } from './style'\r\n\r\nimport Modal from 'src/components/Modal'\r\nimport Block from 'src/components/layout/Block'\r\nimport Button from 'src/components/layout/Button'\r\nimport Col from 'src/components/layout/Col'\r\nimport Hairline from 'src/components/layout/Hairline'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Row from 'src/components/layout/Row'\r\nimport { useEffect, useState } from 'react'\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\ntype Props = {\r\n  isOpen: boolean\r\n  onClose: () => void\r\n  onScan: (value: string) => void\r\n}\r\n\r\nexport const ScanQRModal = ({ isOpen, onClose, onScan }: Props): React.ReactElement => {\r\n  const classes = useStyles()\r\n  const [fileUploadModalOpen, setFileUploadModalOpen] = useState<boolean>(false)\r\n  const [error, setError] = useState<string | null>(null)\r\n  const [cameraBlocked, setCameraBlocked] = useState<boolean>(false)\r\n  const scannerRef: any = React.createRef()\r\n  const openImageDialog = React.useCallback(() => {\r\n    scannerRef.current.openImageDialog()\r\n  }, [scannerRef])\r\n\r\n  useEffect(() => {\r\n    if (!fileUploadModalOpen && cameraBlocked && !error) {\r\n      setFileUploadModalOpen(true)\r\n      openImageDialog()\r\n    }\r\n  }, [cameraBlocked, openImageDialog, fileUploadModalOpen, setFileUploadModalOpen, error])\r\n\r\n  const onFileScannedResolve = (error: Error | null, successData: string | null) => {\r\n    if (error) {\r\n      console.error('QR code error', error)\r\n\r\n      if (error.name === 'NotAllowedError' || error.name === 'PermissionDismissedError') {\r\n        setCameraBlocked(true)\r\n        setFileUploadModalOpen(false)\r\n      } else {\r\n        setError('The QR could not be read')\r\n      }\r\n      return\r\n    }\r\n\r\n    if (successData) {\r\n      onScan(successData)\r\n    } else if (cameraBlocked) {\r\n      setError('The QR could not be read')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal description=\"Receive Tokens Form\" handleClose={onClose} open={isOpen} title=\"Receive Tokens\">\r\n      <Row align=\"center\" className={classes.heading} grow>\r\n        <Paragraph noMargin size=\"xl\">\r\n          Scan QR\r\n        </Paragraph>\r\n        <IconButton disableRipple onClick={onClose}>\r\n          <Close className={classes.close} />\r\n        </IconButton>\r\n      </Row>\r\n      <Hairline />\r\n      <Col className={classes.detailsContainer} layout=\"column\" middle=\"xs\">\r\n        {error && (\r\n          <Block padding=\"md\" margin=\"md\">\r\n            {error}\r\n          </Block>\r\n        )}\r\n        <QrReader\r\n          legacyMode={cameraBlocked}\r\n          onError={(err: Error) => onFileScannedResolve(err, null)}\r\n          onScan={(data: string) => onFileScannedResolve(null, data)}\r\n          ref={scannerRef}\r\n          style={{ width: '400px', height: '400px' }}\r\n          facingMode=\"user\"\r\n        />\r\n      </Col>\r\n      <Hairline />\r\n      <Row align=\"center\" className={classes.buttonRow}>\r\n        <Button className={classes.button} color=\"secondary\" minWidth={154} onClick={onClose}>\r\n          Close\r\n        </Button>\r\n        <Button\r\n          className={classes.button}\r\n          color=\"primary\"\r\n          minWidth={154}\r\n          onClick={() => {\r\n            setCameraBlocked(true)\r\n            setError(null)\r\n            setFileUploadModalOpen(false)\r\n          }}\r\n          variant=\"contained\"\r\n        >\r\n          Upload an image\r\n        </Button>\r\n      </Row>\r\n    </Modal>\r\n  )\r\n}\r\n","import { makeStyles } from '@material-ui/core/styles'\r\nimport React, { ReactElement, useState } from 'react'\r\n\r\nimport QRIcon from 'src/assets/icons/qrcode.svg'\r\nimport { ScanQRModal } from 'src/components/ScanQRModal'\r\nimport Img from 'src/components/layout/Img'\r\n\r\nconst useStyles = makeStyles({\r\n  qrCodeBtn: {\r\n    cursor: 'pointer',\r\n  },\r\n})\r\n\r\ntype Props = {\r\n  handleScan: (dataResult: string, closeQrModal: () => void) => void\r\n}\r\n\r\nexport const ScanQRWrapper = ({ handleScan }: Props): ReactElement => {\r\n  const classes = useStyles()\r\n  const [qrModalOpen, setQrModalOpen] = useState(false)\r\n\r\n  const openQrModal = () => {\r\n    setQrModalOpen(true)\r\n  }\r\n\r\n  const closeQrModal = () => {\r\n    setQrModalOpen(false)\r\n  }\r\n\r\n  const onScanFinished = (value: string) => {\r\n    handleScan(value, closeQrModal)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Img\r\n        alt=\"Scan QR\"\r\n        className={classes.qrCodeBtn}\r\n        height={20}\r\n        onClick={() => openQrModal()}\r\n        role=\"button\"\r\n        src={QRIcon}\r\n        testId=\"qr-icon\"\r\n      />\r\n      {qrModalOpen && <ScanQRModal isOpen={qrModalOpen} onClose={closeQrModal} onScan={onScanFinished} />}\r\n    </>\r\n  )\r\n}\r\n","import * as React from 'react'\r\nimport { Field } from 'react-final-form'\r\nimport { OnChange } from 'react-final-form-listeners'\r\n\r\nimport TextField from 'src/components/forms/TextField'\r\nimport { Validator, composeValidators, mustBeEthereumAddress, required } from 'src/components/forms/validator'\r\nimport { trimSpaces } from 'src/utils/strings'\r\nimport { getAddressFromDomain } from 'src/logic/wallets/getWeb3'\r\nimport { isValidEnsName, isValidCryptoDomainName } from 'src/logic/wallets/ethAddresses'\r\nimport { checksumAddress } from 'src/utils/checksumAddress'\r\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\r\n\r\n// an idea for second field was taken from here\r\n// https://github.com/final-form/react-final-form-listeners/blob/master/src/OnBlur.js\r\n\r\nexport interface AddressInputProps {\r\n  fieldMutator: (address: string) => void\r\n  name?: string\r\n  text?: string\r\n  placeholder?: string\r\n  inputAdornment?: { endAdornment: React.ReactElement } | undefined\r\n  testId: string\r\n  validators?: Validator[]\r\n  defaultValue?: string\r\n  disabled?: boolean\r\n  className?: string\r\n}\r\n\r\nconst AddressInput = ({\r\n  className = '',\r\n  name = 'recipientAddress',\r\n  text = 'Recipient*',\r\n  placeholder = 'Recipient*',\r\n  fieldMutator,\r\n  testId,\r\n  inputAdornment,\r\n  validators = [],\r\n  defaultValue,\r\n  disabled,\r\n}: AddressInputProps): React.ReactElement => (\r\n  <>\r\n    <Field\r\n      className={className}\r\n      component={TextField as any}\r\n      defaultValue={defaultValue}\r\n      disabled={disabled}\r\n      inputAdornment={inputAdornment}\r\n      name={name}\r\n      placeholder={placeholder}\r\n      testId={testId}\r\n      text={text}\r\n      type=\"text\"\r\n      validate={composeValidators(required, mustBeEthereumAddress, ...validators)}\r\n    />\r\n    <OnChange name={name}>\r\n      {async (value: string) => {\r\n        const address = trimSpaces(value)\r\n        if (isValidEnsName(address) || isValidCryptoDomainName(address)) {\r\n          try {\r\n            const resolverAddr = await getAddressFromDomain(address)\r\n            const formattedAddress = checksumAddress(resolverAddr)\r\n            fieldMutator(formattedAddress)\r\n          } catch (err) {\r\n            logError(Errors._101, err.message)\r\n          }\r\n        }\r\n      }}\r\n    </OnChange>\r\n  </>\r\n)\r\n\r\nexport default AddressInput\r\n","import TableCell from '@material-ui/core/TableCell'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport * as React from 'react'\r\n\r\ninterface CellWidth {\r\n  maxWidth: string\r\n}\r\n\r\nexport const cellWidth = (width?: string | number): CellWidth | undefined => {\r\n  if (!width) {\r\n    return undefined\r\n  }\r\n\r\n  return {\r\n    maxWidth: `${width}px`,\r\n  }\r\n}\r\n\r\nclass GnoTableHead extends React.PureComponent<any> {\r\n  changeSort = (property, orderAttr) => () => {\r\n    const { onSort } = this.props\r\n\r\n    onSort(property, orderAttr)\r\n  }\r\n\r\n  render() {\r\n    const { columns, order, orderBy } = this.props\r\n\r\n    return (\r\n      <TableHead>\r\n        <TableRow>\r\n          {columns.map((column) => (\r\n            <TableCell\r\n              align={column.align}\r\n              key={column.id}\r\n              padding={column.disablePadding ? 'none' : 'default'}\r\n              sortDirection={orderBy === column.id ? order : false}\r\n            >\r\n              {column.static ? (\r\n                <div style={column.style}>{column.label}</div>\r\n              ) : (\r\n                <TableSortLabel\r\n                  active={orderBy === column.id}\r\n                  direction={order}\r\n                  onClick={this.changeSort(column.id, column.order)}\r\n                  style={column.style}\r\n                >\r\n                  {column.label}\r\n                </TableSortLabel>\r\n              )}\r\n            </TableCell>\r\n          ))}\r\n        </TableRow>\r\n      </TableHead>\r\n    )\r\n  }\r\n}\r\n\r\nexport default GnoTableHead\r\n","import { List } from 'immutable'\r\n\r\nexport const FIXED = 'fixed'\r\n\r\nexport const buildOrderFieldFrom = (attr: string): string => `${attr}Order`\r\n\r\nconst desc = (\r\n  a: string,\r\n  b: string,\r\n  orderBy: string,\r\n  orderProp: boolean,\r\n  format: (value: string | number) => string | number,\r\n): number => {\r\n  const order = orderProp ? buildOrderFieldFrom(orderBy) : orderBy\r\n\r\n  if (format(b[order]) < format(a[order])) {\r\n    return -1\r\n  }\r\n  if (format(b[order]) > format(a[order])) {\r\n    return 1\r\n  }\r\n\r\n  return 0\r\n}\r\n\r\n// eslint-disable-next-line\r\nexport const stableSort = (dataArray, cmp, fixed) => {\r\n  const fixedElems = fixed ? dataArray.filter((elem) => elem.fixed) : List([])\r\n  const data = fixed ? dataArray.filter((elem) => !elem[FIXED]) : dataArray\r\n  let stabilizedThis = data.map((el, index) => [el, index])\r\n\r\n  stabilizedThis = stabilizedThis.sort((a, b) => {\r\n    const order = cmp(a[0], b[0])\r\n\r\n    if (order !== 0) {\r\n      return order\r\n    }\r\n\r\n    return a[1] - b[1]\r\n  })\r\n\r\n  const sortedElems = stabilizedThis.map((el) => el[0])\r\n\r\n  return fixedElems.concat(sortedElems)\r\n}\r\n\r\nexport const getSorting = (\r\n  order: 'desc' | 'asc',\r\n  orderBy: string,\r\n  orderProp: boolean,\r\n  format: (value: string | number) => string | number = (value) => value,\r\n): ((a: string, b: string) => number) =>\r\n  order === 'desc'\r\n    ? (a, b) => desc(a, b, orderBy, orderProp, format)\r\n    : (a, b) => -desc(a, b, orderBy, orderProp, format)\r\n","import { Loader } from '@gnosis.pm/safe-react-components'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport * as React from 'react'\r\n\r\nimport TableHead from 'src/components/Table/TableHead'\r\nimport { getSorting, stableSort } from 'src/components/Table/sorting'\r\nimport Row from 'src/components/layout/Row'\r\nimport { sm, xl, xxl } from 'src/theme/variables'\r\n\r\nconst styles = {\r\n  root: {\r\n    backgroundColor: 'white',\r\n    borderTopRightRadius: sm,\r\n    borderTopLeftRadius: sm,\r\n    boxShadow: '1px 2px 10px 0 rgba(212, 212, 211, 0.59)',\r\n  },\r\n  selectRoot: {\r\n    lineHeight: xxl,\r\n    backgroundColor: 'white',\r\n  },\r\n  white: {\r\n    backgroundColor: 'white',\r\n  },\r\n  paginationRoot: {\r\n    backgroundColor: 'white',\r\n    boxShadow: '1px 2px 10px 0 rgba(212, 212, 211, 0.59)',\r\n    marginBottom: xl,\r\n    borderBottomRightRadius: sm,\r\n    borderBottomLeftRadius: sm,\r\n  },\r\n  loader: {\r\n    boxShadow: '1px 2px 10px 0 rgba(212, 212, 211, 0.59)',\r\n  },\r\n}\r\n\r\nconst FIXED_EMPTY_HEIGHT = 255\r\n\r\nconst backProps = {\r\n  'aria-label': 'Previous Page',\r\n}\r\n\r\nconst nextProps = {\r\n  'aria-label': 'Next Page',\r\n}\r\n\r\nclass GnoTable extends React.Component<any, any> {\r\n  static defaultProps = {\r\n    defaultOrder: 'asc',\r\n    disablePagination: false,\r\n    defaultRowsPerPage: 5,\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      page: 0,\r\n      order: undefined,\r\n      orderBy: undefined,\r\n      fixed: undefined,\r\n      orderProp: false,\r\n      rowsPerPage: undefined,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { columns, defaultOrderBy } = this.props\r\n\r\n    if (defaultOrderBy && columns) {\r\n      const defaultOrderCol = columns.find(({ id }) => id === defaultOrderBy)\r\n\r\n      if (defaultOrderCol.order) {\r\n        this.setState({\r\n          orderProp: true,\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  onSort = (newOrderBy, orderProp) => {\r\n    const { order, orderBy } = this.state\r\n    const { defaultOrder } = this.props\r\n    let newOrder = 'desc'\r\n\r\n    // if table was previously sorted by the user\r\n    if (order && orderBy === newOrderBy && order === 'desc') {\r\n      newOrder = 'asc'\r\n    } else if (!order && defaultOrder === 'desc') {\r\n      // if it was not sorted and defaultOrder is used\r\n      newOrder = 'asc'\r\n    }\r\n\r\n    this.setState(() => ({\r\n      order: newOrder,\r\n      orderBy: newOrderBy,\r\n      orderProp,\r\n      fixed: false,\r\n    }))\r\n  }\r\n\r\n  getEmptyStyle = () => ({\r\n    height: `calc(100vh - ${FIXED_EMPTY_HEIGHT}px)`,\r\n    borderTopRightRadius: sm,\r\n    borderTopLeftRadius: sm,\r\n    backgroundColor: 'white',\r\n    width: '100%',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  })\r\n\r\n  handleChangePage = (e, page) => {\r\n    this.setState({ page })\r\n  }\r\n\r\n  handleChangeRowsPerPage = (e) => {\r\n    const rowsPerPage = Number(e.target.value)\r\n    this.setState({ rowsPerPage })\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      children,\r\n      classes,\r\n      columns,\r\n      data,\r\n      defaultFixed,\r\n      defaultOrder,\r\n      defaultOrderBy,\r\n      defaultRowsPerPage,\r\n      disableLoadingOnEmptyTable,\r\n      disablePagination,\r\n      label,\r\n      noBorder,\r\n      size,\r\n    }: any = this.props\r\n    const { fixed, order, orderBy, orderProp, page, rowsPerPage } = this.state\r\n    const orderByParam = orderBy || defaultOrderBy\r\n    const orderParam = order || defaultOrder\r\n    const displayRows = rowsPerPage || defaultRowsPerPage\r\n    const fixedParam = typeof fixed !== 'undefined' ? fixed : !!defaultFixed\r\n    const paginationClasses = {\r\n      selectRoot: classes.selectRoot,\r\n      root: !noBorder && classes.paginationRoot,\r\n      input: classes.white,\r\n    }\r\n    const columnSort = columns.find((column) => column.id === orderByParam)\r\n    let sortedData = stableSort(\r\n      data,\r\n      getSorting(orderParam, orderByParam, orderProp, columnSort?.formatTypeSort),\r\n      fixedParam,\r\n    )\r\n\r\n    if (!disablePagination) {\r\n      sortedData = sortedData.slice(page * displayRows, page * displayRows + displayRows)\r\n    }\r\n\r\n    const isEmpty = size === 0 && !disableLoadingOnEmptyTable\r\n\r\n    return (\r\n      <>\r\n        {!isEmpty && (\r\n          <Table aria-labelledby={label} className={noBorder ? '' : classes.root}>\r\n            <TableHead columns={columns} onSort={this.onSort} order={order} orderBy={orderByParam} />\r\n            <TableBody>{children(sortedData)}</TableBody>\r\n          </Table>\r\n        )}\r\n        {isEmpty && (\r\n          <Row className={classes.loader} style={this.getEmptyStyle()}>\r\n            <Loader size=\"sm\" />\r\n          </Row>\r\n        )}\r\n        {!disablePagination && (\r\n          <TablePagination\r\n            backIconButtonProps={backProps}\r\n            classes={paginationClasses}\r\n            component=\"div\"\r\n            count={size}\r\n            nextIconButtonProps={nextProps}\r\n            onChangePage={this.handleChangePage}\r\n            onChangeRowsPerPage={this.handleChangeRowsPerPage}\r\n            page={page}\r\n            rowsPerPage={displayRows}\r\n            rowsPerPageOptions={[5, 10, 25, 50, 100]}\r\n          />\r\n        )}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withStyles(styles as any)(GnoTable)\r\n","import { lg, md, sm } from 'src/theme/variables'\r\nimport { createStyles } from '@material-ui/core'\r\n\r\nexport const styles = createStyles({\r\n  formContainer: {\r\n    minHeight: '250px',\r\n  },\r\n  title: {\r\n    padding: lg,\r\n    paddingBottom: 0,\r\n  },\r\n  annotation: {\r\n    paddingLeft: lg,\r\n  },\r\n  hide: {\r\n    '&:hover': {\r\n      backgroundColor: '#f7f5f5',\r\n    },\r\n    '&:hover $actions': {\r\n      visibility: 'initial',\r\n    },\r\n  },\r\n  actions: {\r\n    justifyContent: 'flex-end',\r\n    visibility: 'hidden',\r\n    minWidth: '100px',\r\n  },\r\n  noBorderBottom: {\r\n    '& > td': {\r\n      borderBottom: 'none',\r\n    },\r\n  },\r\n  controlsRow: {\r\n    backgroundColor: 'white',\r\n    padding: lg,\r\n    borderRadius: sm,\r\n  },\r\n  editEntryButton: {\r\n    cursor: 'pointer',\r\n    marginBottom: '16px',\r\n  },\r\n  editEntryButtonNonOwner: {\r\n    cursor: 'pointer',\r\n  },\r\n  removeEntryButton: {\r\n    marginLeft: lg,\r\n    marginRight: lg,\r\n    marginBottom: '16px',\r\n    cursor: 'pointer',\r\n  },\r\n  removeEntryButtonDisabled: {\r\n    marginLeft: lg,\r\n    marginRight: lg,\r\n    marginBottom: '16px',\r\n    cursor: 'default',\r\n  },\r\n  removeEntryButtonNonOwner: {\r\n    marginLeft: lg,\r\n    marginRight: lg,\r\n    cursor: 'pointer',\r\n  },\r\n  message: {\r\n    padding: `${md} 0`,\r\n    maxHeight: '54px',\r\n    boxSizing: 'border-box',\r\n    justifyContent: 'flex-end',\r\n  },\r\n  leftIcon: {\r\n    marginRight: sm,\r\n  },\r\n  iconSmall: {\r\n    fontSize: 16,\r\n  },\r\n})\r\n","import { createStyles, makeStyles } from '@material-ui/core/styles'\r\n\r\nimport { lg, md } from 'src/theme/variables'\r\n\r\nexport const useStyles = makeStyles(\r\n  createStyles({\r\n    heading: {\r\n      padding: lg,\r\n      justifyContent: 'space-between',\r\n      boxSizing: 'border-box',\r\n      height: '74px',\r\n    },\r\n    manage: {\r\n      fontSize: lg,\r\n    },\r\n    container: {\r\n      padding: `${md} ${lg}`,\r\n    },\r\n    close: {\r\n      height: '35px',\r\n      width: '35px',\r\n    },\r\n  }),\r\n)\r\n","import React, { ReactElement } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { useStyles } from './style'\r\n\r\nimport { Modal } from 'src/components/Modal'\r\nimport { ScanQRWrapper } from 'src/components/ScanQRModal/ScanQRWrapper'\r\nimport AddressInput from 'src/components/forms/AddressInput'\r\nimport Field from 'src/components/forms/Field'\r\nimport GnoForm from 'src/components/forms/GnoForm'\r\nimport TextField from 'src/components/forms/TextField'\r\nimport { composeValidators, required, uniqueAddress, validAddressBookName } from 'src/components/forms/validator'\r\nimport Block from 'src/components/layout/Block'\r\nimport Col from 'src/components/layout/Col'\r\nimport Row from 'src/components/layout/Row'\r\nimport { addressBookAddressesListSelector } from 'src/logic/addressBook/store/selectors'\r\nimport { AddressBookEntry } from 'src/logic/addressBook/model/addressBook'\r\nimport { Entry } from 'src/routes/safe/components/AddressBook'\r\n\r\nexport const CREATE_ENTRY_INPUT_NAME_ID = 'create-entry-input-name'\r\nexport const CREATE_ENTRY_INPUT_ADDRESS_ID = 'create-entry-input-address'\r\nexport const SAVE_NEW_ENTRY_BTN_ID = 'save-new-entry-btn-id'\r\n\r\nconst formMutators = {\r\n  setOwnerAddress: (args, state, utils) => {\r\n    utils.changeValue(state, 'address', () => args[0])\r\n  },\r\n}\r\n\r\ntype CreateEditEntryModalProps = {\r\n  editEntryModalHandler: (entry: AddressBookEntry) => void\r\n  entryToEdit: Entry\r\n  isOpen: boolean\r\n  newEntryModalHandler: (entry: AddressBookEntry) => void\r\n  onClose: () => void\r\n}\r\n\r\nexport const CreateEditEntryModal = ({\r\n  editEntryModalHandler,\r\n  entryToEdit,\r\n  isOpen,\r\n  newEntryModalHandler,\r\n  onClose,\r\n}: CreateEditEntryModalProps): ReactElement => {\r\n  const classes = useStyles()\r\n\r\n  const { isNew, ...initialValues } = entryToEdit.entry\r\n\r\n  const onFormSubmitted = (values: AddressBookEntry) => {\r\n    if (isNew) {\r\n      newEntryModalHandler(values)\r\n    } else {\r\n      editEntryModalHandler(values)\r\n    }\r\n  }\r\n\r\n  const storedAddresses = useSelector(addressBookAddressesListSelector)\r\n  const isUniqueAddress = uniqueAddress(storedAddresses)\r\n\r\n  return (\r\n    <Modal\r\n      description={isNew ? 'Create new addressBook entry' : 'Edit addressBook entry'}\r\n      handleClose={onClose}\r\n      open={isOpen}\r\n      title={isNew ? 'Create new entry' : 'Edit entry'}\r\n    >\r\n      <Modal.Header onClose={onClose}>\r\n        <Modal.Header.Title>{isNew ? 'Create entry' : 'Edit entry'}</Modal.Header.Title>\r\n      </Modal.Header>\r\n      <Modal.Body withoutPadding>\r\n        <GnoForm formMutators={formMutators} onSubmit={onFormSubmitted} initialValues={initialValues}>\r\n          {(...args) => {\r\n            const formState = args[2]\r\n            const mutators = args[3]\r\n            const handleScan = (value, closeQrModal) => {\r\n              let scannedAddress = value\r\n\r\n              if (scannedAddress.startsWith('ethereum:')) {\r\n                scannedAddress = scannedAddress.replace('ethereum:', '')\r\n              }\r\n\r\n              mutators.setOwnerAddress(scannedAddress)\r\n              closeQrModal()\r\n            }\r\n            return (\r\n              <>\r\n                <Block className={classes.container}>\r\n                  <Row margin=\"md\">\r\n                    <Col xs={11}>\r\n                      <Field\r\n                        component={TextField}\r\n                        name=\"name\"\r\n                        placeholder=\"Name*\"\r\n                        testId={CREATE_ENTRY_INPUT_NAME_ID}\r\n                        text=\"Name*\"\r\n                        type=\"text\"\r\n                        validate={composeValidators(required, validAddressBookName)}\r\n                      />\r\n                    </Col>\r\n                  </Row>\r\n                  <Row margin=\"md\">\r\n                    <Col xs={11}>\r\n                      <AddressInput\r\n                        disabled={!isNew}\r\n                        fieldMutator={mutators.setOwnerAddress}\r\n                        name=\"address\"\r\n                        placeholder=\"Address*\"\r\n                        testId={CREATE_ENTRY_INPUT_ADDRESS_ID}\r\n                        text=\"Address*\"\r\n                        validators={[(value?: string) => (isNew ? isUniqueAddress(value) : undefined)]}\r\n                      />\r\n                    </Col>\r\n                    {isNew ? (\r\n                      <Col center=\"xs\" className={classes} middle=\"xs\" xs={1}>\r\n                        <ScanQRWrapper handleScan={handleScan} />\r\n                      </Col>\r\n                    ) : null}\r\n                  </Row>\r\n                </Block>\r\n                <Modal.Footer>\r\n                  <Modal.Footer.Buttons\r\n                    cancelButtonProps={{ onClick: onClose }}\r\n                    confirmButtonProps={{\r\n                      disabled: !formState.valid,\r\n                      testId: SAVE_NEW_ENTRY_BTN_ID,\r\n                      text: isNew ? 'Create' : 'Save',\r\n                    }}\r\n                  />\r\n                </Modal.Footer>\r\n              </>\r\n            )\r\n          }}\r\n        </GnoForm>\r\n      </Modal.Body>\r\n    </Modal>\r\n  )\r\n}\r\n","import React, { ReactElement } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Link, Icon } from '@gnosis.pm/safe-react-components'\r\n\r\nconst StyledIcon = styled(Icon)`\r\n  svg {\r\n    position: relative;\r\n    top: 4px;\r\n    left: 4px;\r\n  }\r\n`\r\n\r\nconst HelpInfo = (): ReactElement => (\r\n  <Link\r\n    href=\"https://help.gnosis-safe.io/en/articles/5299068-address-book-export-and-import\"\r\n    target=\"_blank\"\r\n    rel=\"noreferrer\"\r\n    title=\"Export & import info\"\r\n  >\r\n    <Text size=\"xl\" as=\"span\" color=\"primary\">\r\n      Learn about the address book import and export\r\n    </Text>\r\n    <StyledIcon size=\"sm\" type=\"externalLink\" color=\"primary\" />\r\n  </Link>\r\n)\r\n\r\nexport default HelpInfo\r\n","export default __webpack_public_path__ + \"static/media/success.a012dbb4.svg\";","export default __webpack_public_path__ + \"static/media/error.99240a20.svg\";","export default __webpack_public_path__ + \"static/media/wait.392cdfd2.svg\";","import React, { ReactElement, useEffect, useState } from 'react'\r\nimport { format } from 'date-fns'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { CSVDownloader, jsonToCSV } from 'react-papaparse'\r\nimport { Button, Loader, Text } from '@gnosis.pm/safe-react-components'\r\nimport styled from 'styled-components'\r\n\r\nimport { enhanceSnackbarForAction, getNotificationsFromTxType } from 'src/logic/notifications'\r\nimport enqueueSnackbar from 'src/logic/notifications/store/actions/enqueueSnackbar'\r\nimport { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions'\r\n\r\nimport { addressBookSelector } from 'src/logic/addressBook/store/selectors'\r\nimport { AddressBookState } from 'src/logic/addressBook/model/addressBook'\r\n\r\nimport { lg, md, background } from 'src/theme/variables'\r\n\r\nimport { Modal } from 'src/components/Modal'\r\nimport Img from 'src/components/layout/Img'\r\nimport Row from 'src/components/layout/Row'\r\nimport HelpInfo from 'src/routes/safe/components/AddressBook/HelpInfo'\r\n\r\nimport SuccessSvg from './assets/success.svg'\r\nimport ErrorSvg from './assets/error.svg'\r\nimport LoadingSvg from './assets/wait.svg'\r\n\r\ntype ExportEntriesModalProps = {\r\n  isOpen: boolean\r\n  onClose: () => void\r\n}\r\n\r\nconst ImageContainer = styled(Row)`\r\n  padding: ${md} ${lg};\r\n  justify-content: center;\r\n`\r\nconst StyledButton = styled(Button)`\r\n  &.MuiButtonBase-root.MuiButton-root {\r\n    padding: 0;\r\n    .MuiButton-label {\r\n      height: 100%;\r\n    }\r\n  }\r\n`\r\n\r\nconst InfoContainer = styled(Row)`\r\n  background-color: ${background};\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  padding: ${lg};\r\n  text-align: center;\r\n`\r\n\r\nconst BodyImage = styled.div`\r\n  grid-row: 1;\r\n`\r\nconst StyledLoader = styled(Loader)`\r\n  margin-right: 5px;\r\n`\r\nconst StyledCSVLink = styled(CSVDownloader)`\r\n  height: 100%;\r\n  display: flex;\r\n  flex: 1;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nexport const ExportEntriesModal = ({ isOpen, onClose }: ExportEntriesModalProps): ReactElement => {\r\n  const dispatch = useDispatch()\r\n  const addressBook: AddressBookState = useSelector(addressBookSelector)\r\n  const [loading, setLoading] = useState<boolean>(true)\r\n  const [error, setError] = useState<string | undefined>('')\r\n  const [csvData, setCsvData] = useState<string>('')\r\n  const [doRetry, setDoRetry] = useState<boolean>(false)\r\n\r\n  const date = format(new Date(), 'yyyy-MM-dd')\r\n\r\n  const handleClose = () => {\r\n    //This timeout prevents modal to be closed abruptly\r\n    setLoading(true)\r\n    setTimeout(() => {\r\n      if (!loading) {\r\n        const notification = getNotificationsFromTxType(TX_NOTIFICATION_TYPES.ADDRESS_BOOK_EXPORT_ENTRIES)\r\n        const action = error\r\n          ? notification.afterExecution.afterExecutionError\r\n          : notification.afterExecution.noMoreConfirmationsNeeded\r\n        dispatch(enqueueSnackbar(enhanceSnackbarForAction(action)))\r\n      }\r\n      onClose()\r\n    }, 600)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const handleCsvData = () => {\r\n      if (!isOpen && !doRetry) return\r\n      setLoading(true)\r\n      setError('')\r\n      try {\r\n        setCsvData(jsonToCSV(addressBook))\r\n      } catch (e) {\r\n        setLoading(false)\r\n        setError(e.message)\r\n        return\r\n      }\r\n      setLoading(false)\r\n      setDoRetry(false)\r\n    }\r\n\r\n    handleCsvData()\r\n  }, [addressBook, isOpen, doRetry, csvData])\r\n\r\n  return (\r\n    <Modal description=\"Export address book\" handleClose={onClose} open={isOpen} title=\"Export address book\">\r\n      <Modal.Header onClose={onClose}>\r\n        <Modal.Header.Title withoutMargin>Export address book</Modal.Header.Title>\r\n      </Modal.Header>\r\n      <Modal.Body withoutPadding>\r\n        <ImageContainer>\r\n          <BodyImage>\r\n            <Img alt=\"Export\" height={92} src={error ? ErrorSvg : loading ? LoadingSvg : SuccessSvg} />\r\n          </BodyImage>\r\n        </ImageContainer>\r\n        <InfoContainer>\r\n          <Text color=\"primary\" as=\"p\" size=\"xl\">\r\n            {!error ? (\r\n              <Text size=\"xl\" as=\"span\">\r\n                You&apos;re about to export a CSV file with{' '}\r\n                <Text size=\"xl\" strong as=\"span\">\r\n                  {addressBook.length} address book entries. <br />\r\n                  <HelpInfo />\r\n                </Text>\r\n                .\r\n              </Text>\r\n            ) : (\r\n              <Text size=\"xl\" as=\"span\">\r\n                An error occurred while generating the address book CSV.\r\n              </Text>\r\n            )}\r\n          </Text>\r\n        </InfoContainer>\r\n      </Modal.Body>\r\n      <Modal.Footer withoutBorder>\r\n        <Row>\r\n          <Button size=\"md\" variant=\"outlined\" onClick={onClose}>\r\n            Cancel\r\n          </Button>\r\n          <StyledButton\r\n            color=\"primary\"\r\n            size=\"md\"\r\n            disabled={loading}\r\n            onClick={error ? () => setDoRetry(true) : handleClose}\r\n          >\r\n            {!error ? (\r\n              <StyledCSVLink data={csvData} bom={true} filename={`gnosis-safe-address-book-${date}`} type=\"link\">\r\n                {loading && <StyledLoader color=\"secondaryLight\" size=\"xs\" />}\r\n                Download\r\n              </StyledCSVLink>\r\n            ) : (\r\n              'Retry'\r\n            )}\r\n          </StyledButton>\r\n        </Row>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  )\r\n}\r\n","import { Text } from '@gnosis.pm/safe-react-components'\r\nimport React, { ReactElement } from 'react'\r\n\r\nimport { Modal } from 'src/components/Modal'\r\nimport GnoForm from 'src/components/forms/GnoForm'\r\nimport { Entry } from 'src/routes/safe/components/AddressBook'\r\n\r\nexport const DELETE_ENTRY_BTN_ID = 'delete-entry-btn-id'\r\n\r\ninterface DeleteEntryModalProps {\r\n  deleteEntryModalHandler: () => void\r\n  entryToDelete: Entry\r\n  isOpen: boolean\r\n  onClose: () => void\r\n}\r\n\r\nexport const DeleteEntryModal = ({\r\n  deleteEntryModalHandler,\r\n  entryToDelete,\r\n  isOpen,\r\n  onClose,\r\n}: DeleteEntryModalProps): ReactElement => {\r\n  const handleDeleteEntrySubmit = () => {\r\n    deleteEntryModalHandler()\r\n  }\r\n\r\n  return (\r\n    <Modal description=\"Delete entry\" handleClose={onClose} open={isOpen} title=\"Delete entry\">\r\n      <Modal.Header onClose={onClose}>\r\n        <Modal.Header.Title>Delete entry</Modal.Header.Title>\r\n      </Modal.Header>\r\n      <GnoForm onSubmit={handleDeleteEntrySubmit}>\r\n        {() => (\r\n          <>\r\n            <Modal.Body>\r\n              <Text size=\"xl\">\r\n                This action will delete{' '}\r\n                <Text size=\"xl\" strong as=\"span\">\r\n                  {entryToDelete.entry.name}\r\n                </Text>{' '}\r\n                from the address book.\r\n              </Text>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Modal.Footer.Buttons\r\n                cancelButtonProps={{ onClick: onClose }}\r\n                confirmButtonProps={{ color: 'error', testId: DELETE_ENTRY_BTN_ID, text: 'Delete' }}\r\n              />\r\n            </Modal.Footer>\r\n          </>\r\n        )}\r\n      </GnoForm>\r\n    </Modal>\r\n  )\r\n}\r\n","import { List } from 'immutable'\r\nimport { TableCellProps } from '@material-ui/core/TableCell/TableCell'\r\n\r\nexport const ADDRESS_BOOK_ROW_ID = 'address-book-row'\r\nexport const TX_TABLE_ADDRESS_BOOK_ID = 'idAddressBook'\r\nexport const AB_NAME_ID = 'name'\r\nexport const AB_ADDRESS_ID = 'address'\r\nexport const AB_ADDRESS_ACTIONS_ID = 'actions'\r\nexport const EDIT_ENTRY_BUTTON = 'edit-entry-btn'\r\nexport const REMOVE_ENTRY_BUTTON = 'remove-entry-btn'\r\nexport const SEND_ENTRY_BUTTON = 'send-entry-btn'\r\n\r\ntype AddressBookColumn = {\r\n  id: string\r\n  order: boolean\r\n  disablePadding?: boolean\r\n  label: string\r\n  width?: number\r\n  custom?: boolean\r\n  align?: TableCellProps['align']\r\n}\r\n\r\nexport const generateColumns = (): List<AddressBookColumn> => {\r\n  const nameColumn = {\r\n    id: AB_NAME_ID,\r\n    order: false,\r\n    disablePadding: false,\r\n    label: 'Name',\r\n    width: 150,\r\n    custom: false,\r\n    align: 'left',\r\n  }\r\n\r\n  const addressColumn = {\r\n    id: AB_ADDRESS_ID,\r\n    order: false,\r\n    disablePadding: false,\r\n    label: 'Address',\r\n    custom: false,\r\n    align: 'left',\r\n  }\r\n\r\n  const actionsColumn = {\r\n    id: AB_ADDRESS_ACTIONS_ID,\r\n    order: false,\r\n    disablePadding: false,\r\n    label: '',\r\n    custom: true,\r\n  }\r\n\r\n  return List([nameColumn, addressColumn, actionsColumn])\r\n}\r\n","import React, { ReactElement, useState } from 'react'\r\n\r\nimport styled from 'styled-components'\r\nimport { Text } from '@gnosis.pm/safe-react-components'\r\nimport { Modal } from 'src/components/Modal'\r\nimport { CSVReader } from 'react-papaparse'\r\nimport { AddressBookEntry } from 'src/logic/addressBook/model/addressBook'\r\nimport { isValidAddress } from 'src/utils/isValidAddress'\r\nimport { checksumAddress } from 'src/utils/checksumAddress'\r\nimport HelpInfo from 'src/routes/safe/components/AddressBook/HelpInfo'\r\n\r\nconst ImportContainer = styled.div`\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  margin: 24px;\r\n  align-items: center;\r\n  /* width: 200px;*/\r\n  min-height: 100px;\r\n  display: flex;\r\n`\r\n\r\nconst InfoContainer = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.background};\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  padding: 24px;\r\n  text-align: center;\r\n  margin-top: 16px;\r\n`\r\n\r\nconst WRONG_FILE_EXTENSION_ERROR = 'Only CSV files are allowed'\r\nconst FILE_SIZE_TOO_BIG = 'The size of the file is over 1 MB'\r\nconst FILE_BYTES_LIMIT = 1000000\r\nconst IMPORT_SUPPORTED_FORMATS = [\r\n  'application/vnd.ms-excel',\r\n  'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n  'text/csv',\r\n]\r\n\r\ntype ImportEntriesModalProps = {\r\n  importEntryModalHandler: (addressList: AddressBookEntry[]) => void\r\n  isOpen: boolean\r\n  onClose: () => void\r\n}\r\n\r\nconst ImportEntriesModal = ({ importEntryModalHandler, isOpen, onClose }: ImportEntriesModalProps): ReactElement => {\r\n  const [csvLoaded, setCsvLoaded] = useState(false)\r\n  const [importError, setImportError] = useState('')\r\n  const [entryList, setEntryList] = useState<AddressBookEntry[]>([])\r\n\r\n  const handleImportEntrySubmit = () => {\r\n    setCsvLoaded(false)\r\n    importEntryModalHandler(entryList)\r\n  }\r\n\r\n  const handleOnDrop = (data, file) => {\r\n    const slicedData = data.slice(1)\r\n\r\n    const fileError = validateFile(file)\r\n    if (fileError) {\r\n      setImportError(fileError)\r\n      return\r\n    }\r\n\r\n    const dataError = validateCsvData(slicedData)\r\n    if (dataError) {\r\n      setImportError(dataError)\r\n      return\r\n    }\r\n\r\n    const formatedList = slicedData.map((entry) => {\r\n      return { address: checksumAddress(entry.data[0]), name: entry.data[1], chainId: parseInt(entry.data[2]) }\r\n    })\r\n    setEntryList(formatedList)\r\n    setImportError('')\r\n    setCsvLoaded(true)\r\n  }\r\n\r\n  const validateFile = (file) => {\r\n    if (!IMPORT_SUPPORTED_FORMATS.includes(file.type)) {\r\n      return WRONG_FILE_EXTENSION_ERROR\r\n    }\r\n\r\n    if (file.size >= FILE_BYTES_LIMIT) {\r\n      return FILE_SIZE_TOO_BIG\r\n    }\r\n\r\n    return\r\n  }\r\n\r\n  const validateCsvData = (data) => {\r\n    for (let index = 0; index < data.length; index++) {\r\n      const entry = data[index]\r\n      if (!entry.data[0] || !entry.data[1] || !entry.data[2]) {\r\n        return `Invalid amount of columns on row ${index + 1}`\r\n      }\r\n      // Verify address properties\r\n      const address = entry.data[0].toLowerCase()\r\n      if (!isValidAddress(address)) {\r\n        return `Invalid address on row ${index + 1}`\r\n      }\r\n      if (isNaN(entry.data[2])) {\r\n        return `Invalid chain id on row ${index + 1}`\r\n      }\r\n    }\r\n    return\r\n  }\r\n\r\n  const handleOnError = (error) => {\r\n    setImportError(error.message)\r\n  }\r\n\r\n  const handleOnRemoveFile = () => {\r\n    setCsvLoaded(false)\r\n    setImportError('')\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setCsvLoaded(false)\r\n    setEntryList([])\r\n    setImportError('')\r\n    onClose()\r\n  }\r\n\r\n  return (\r\n    <Modal description=\"Import address book\" handleClose={handleClose} open={isOpen} title=\"Import address book\">\r\n      <Modal.Header onClose={handleClose}>\r\n        <Modal.Header.Title>Import address book</Modal.Header.Title>\r\n      </Modal.Header>\r\n      <Modal.Body withoutPadding>\r\n        <ImportContainer>\r\n          <CSVReader\r\n            onDrop={handleOnDrop}\r\n            onError={handleOnError}\r\n            addRemoveButton\r\n            onRemoveFile={handleOnRemoveFile}\r\n            style={{\r\n              dropArea: {\r\n                borderColor: '#B2B5B2',\r\n                borderRadius: 8,\r\n              },\r\n              dropAreaActive: {\r\n                borderColor: '#008C73',\r\n                /* borderColor: '${({ theme }) => theme.colors.primary}', */\r\n              },\r\n              dropFile: {\r\n                width: 200,\r\n                height: 100,\r\n                background: '#fff',\r\n                boxShadow: 'rgb(40 54 61 / 18%) 1px 2px 10px 0px',\r\n                borderRadius: 8,\r\n              },\r\n              fileSizeInfo: {\r\n                color: '#001428',\r\n                lineHeight: 1,\r\n                position: 'absolute',\r\n                left: '10px',\r\n                top: '12px',\r\n              },\r\n              fileNameInfo: {\r\n                color: importError === '' ? '#008C73' : '#DB3A3D',\r\n                backgroundColor: '#fff',\r\n                fontSize: 14,\r\n                lineHeight: 1.4,\r\n                padding: '0 0.4em',\r\n                margin: '1.2em 0 0.5em 0',\r\n                maxHeight: '59px',\r\n                overflow: 'hidden',\r\n              },\r\n              progressBar: {\r\n                backgroundColor: '#008C73',\r\n              },\r\n              removeButton: {\r\n                color: '#DB3A3D',\r\n              },\r\n            }}\r\n          >\r\n            <Text size=\"xl\">\r\n              Drop your CSV file here <br />\r\n              or click to upload.\r\n            </Text>\r\n          </CSVReader>\r\n        </ImportContainer>\r\n        <InfoContainer>\r\n          {importError !== '' && (\r\n            <Text size=\"xl\" color=\"error\">\r\n              {importError}\r\n            </Text>\r\n          )}\r\n          {!csvLoaded && importError === '' && (\r\n            <Text color=\"text\" as=\"p\" size=\"xl\">\r\n              Only CSV files exported from Gnosis Safe are allowed. <br />\r\n              <HelpInfo />\r\n            </Text>\r\n          )}\r\n          {csvLoaded && importError === '' && (\r\n            <>\r\n              <Text size=\"xl\" as=\"span\">{`You're about to import`}</Text>\r\n              <Text size=\"xl\" strong as=\"span\">{` ${entryList.length} entries to your address book`}</Text>\r\n            </>\r\n          )}\r\n        </InfoContainer>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Modal.Footer.Buttons\r\n          cancelButtonProps={{ onClick: () => handleClose() }}\r\n          confirmButtonProps={{\r\n            color: 'primary',\r\n            disabled: !csvLoaded || importError !== '',\r\n            onClick: handleImportEntrySubmit,\r\n            text: 'Import',\r\n          }}\r\n        />\r\n      </Modal.Footer>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ImportEntriesModal\r\n","import { Button, EthHashInfo, FixedIcon, Text, ButtonLink, Icon } from '@gnosis.pm/safe-react-components'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport cn from 'classnames'\r\nimport styled from 'styled-components'\r\nimport React, { ReactElement, useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { styles } from './style'\r\n\r\nimport { getExplorerInfo, getNetworkId } from 'src/config'\r\nimport Table from 'src/components/Table'\r\nimport { cellWidth } from 'src/components/Table/TableHead'\r\nimport Block from 'src/components/layout/Block'\r\nimport Col from 'src/components/layout/Col'\r\nimport Row from 'src/components/layout/Row'\r\nimport { AddressBookEntry, makeAddressBookEntry } from 'src/logic/addressBook/model/addressBook'\r\nimport { addressBookAddOrUpdate, addressBookImport, addressBookRemove } from 'src/logic/addressBook/store/actions'\r\nimport { addressBookSelector } from 'src/logic/addressBook/store/selectors'\r\nimport { isUserAnOwnerOfAnySafe, sameAddress } from 'src/logic/wallets/ethAddresses'\r\nimport { CreateEditEntryModal } from 'src/routes/safe/components/AddressBook/CreateEditEntryModal'\r\nimport { ExportEntriesModal } from 'src/routes/safe/components/AddressBook/ExportEntriesModal'\r\nimport { DeleteEntryModal } from 'src/routes/safe/components/AddressBook/DeleteEntryModal'\r\nimport {\r\n  AB_NAME_ID,\r\n  AB_ADDRESS_ID,\r\n  ADDRESS_BOOK_ROW_ID,\r\n  SEND_ENTRY_BUTTON,\r\n  generateColumns,\r\n} from 'src/routes/safe/components/AddressBook/columns'\r\nimport SendModal from 'src/routes/safe/components/Balances/SendModal'\r\nimport { addressBookQueryParamsSelector, safesListSelector } from 'src/logic/safe/store/selectors'\r\nimport { checksumAddress } from 'src/utils/checksumAddress'\r\nimport { grantedSelector } from 'src/routes/safe/container/selector'\r\nimport { useAnalytics, SAFE_NAVIGATION_EVENT } from 'src/utils/googleAnalytics'\r\nimport ImportEntriesModal from './ImportEntriesModal'\r\n\r\nconst StyledButton = styled(Button)`\r\n  &&.MuiButton-root {\r\n    margin: 4px 12px 4px 0px;\r\n    padding: 0 12px;\r\n    min-width: auto;\r\n  }\r\n\r\n  svg {\r\n    margin: 0 6px 0 0;\r\n  }\r\n`\r\nconst UnStyledButton = styled.button`\r\n  background: none;\r\n  color: inherit;\r\n  border: none;\r\n  padding: 0;\r\n  font: inherit;\r\n  cursor: pointer;\r\n  outline-color: ${({ theme }) => theme.colors.icon};\r\n  display: flex;\r\n  align-items: center;\r\n`\r\nconst useStyles = makeStyles(styles)\r\n\r\ninterface AddressBookSelectedEntry extends AddressBookEntry {\r\n  isNew?: boolean\r\n}\r\n\r\nexport type Entry = {\r\n  entry: AddressBookSelectedEntry\r\n  index?: number\r\n  isOwnerAddress?: boolean\r\n}\r\n\r\nconst chainId = getNetworkId()\r\nconst initialEntryState: Entry = { entry: { address: '', name: '', chainId, isNew: true } }\r\n\r\nconst AddressBookTable = (): ReactElement => {\r\n  const classes = useStyles()\r\n  const columns = generateColumns()\r\n  const autoColumns = columns.filter(({ custom }) => !custom)\r\n  const dispatch = useDispatch()\r\n  const safesList = useSelector(safesListSelector)\r\n  const entryAddressToEditOrCreateNew = useSelector(addressBookQueryParamsSelector)\r\n  const addressBook = useSelector(addressBookSelector)\r\n  const granted = useSelector(grantedSelector)\r\n  const [selectedEntry, setSelectedEntry] = useState<Entry>(initialEntryState)\r\n  const [editCreateEntryModalOpen, setEditCreateEntryModalOpen] = useState(false)\r\n  const [importEntryModalOpen, setImportEntryModalOpen] = useState(false)\r\n  const [deleteEntryModalOpen, setDeleteEntryModalOpen] = useState(false)\r\n  const [exportEntriesModalOpen, setExportEntriesModalOpen] = useState(false)\r\n  const [sendFundsModalOpen, setSendFundsModalOpen] = useState(false)\r\n  const { trackEvent } = useAnalytics()\r\n\r\n  useEffect(() => {\r\n    trackEvent({ category: SAFE_NAVIGATION_EVENT, action: 'AddressBook' })\r\n  }, [trackEvent])\r\n\r\n  useEffect(() => {\r\n    if (entryAddressToEditOrCreateNew) {\r\n      setEditCreateEntryModalOpen(true)\r\n    }\r\n  }, [entryAddressToEditOrCreateNew])\r\n\r\n  useEffect(() => {\r\n    if (entryAddressToEditOrCreateNew) {\r\n      const address = checksumAddress(entryAddressToEditOrCreateNew)\r\n      const oldEntryIndex = addressBook.findIndex((entry) => sameAddress(entry.address, address))\r\n\r\n      if (oldEntryIndex >= 0) {\r\n        // Edit old entry\r\n        setSelectedEntry({ entry: addressBook[oldEntryIndex], index: oldEntryIndex })\r\n      } else {\r\n        // Create new entry\r\n        setSelectedEntry({\r\n          entry: {\r\n            name: '',\r\n            address,\r\n            chainId,\r\n            isNew: true,\r\n          },\r\n        })\r\n      }\r\n    }\r\n  }, [addressBook, entryAddressToEditOrCreateNew])\r\n\r\n  const newEntryModalHandler = (entry: AddressBookEntry) => {\r\n    // close the modal\r\n    setEditCreateEntryModalOpen(false)\r\n    // update the store\r\n    dispatch(addressBookAddOrUpdate(makeAddressBookEntry({ ...entry, address: checksumAddress(entry.address) })))\r\n  }\r\n\r\n  const editEntryModalHandler = (entry: AddressBookEntry) => {\r\n    // reset the form\r\n    setSelectedEntry(initialEntryState)\r\n    // close the modal\r\n    setEditCreateEntryModalOpen(false)\r\n    // update the store\r\n    dispatch(addressBookAddOrUpdate(makeAddressBookEntry({ ...entry, address: checksumAddress(entry.address) })))\r\n  }\r\n\r\n  const deleteEntryModalHandler = () => {\r\n    // reset the form\r\n    setSelectedEntry(initialEntryState)\r\n    // close the modal\r\n    setDeleteEntryModalOpen(false)\r\n    // update the store\r\n    selectedEntry?.entry && dispatch(addressBookRemove(selectedEntry.entry))\r\n  }\r\n\r\n  const importEntryModalHandler = (addressList: AddressBookEntry[]) => {\r\n    dispatch(addressBookImport(addressList))\r\n    setImportEntryModalOpen(false)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Row align=\"center\" className={classes.message}>\r\n        <Col end=\"sm\" xs={12}>\r\n          <ButtonLink\r\n            onClick={() => {\r\n              setSelectedEntry(initialEntryState)\r\n              setExportEntriesModalOpen(true)\r\n            }}\r\n            color=\"primary\"\r\n            iconType=\"exportImg\"\r\n            iconSize=\"sm\"\r\n            textSize=\"xl\"\r\n          >\r\n            Export\r\n          </ButtonLink>\r\n          <ButtonLink\r\n            onClick={() => {\r\n              setImportEntryModalOpen(true)\r\n            }}\r\n            color=\"primary\"\r\n            iconType=\"importImg\"\r\n            iconSize=\"sm\"\r\n            textSize=\"xl\"\r\n          >\r\n            Import\r\n          </ButtonLink>\r\n          <ButtonLink\r\n            onClick={() => {\r\n              setSelectedEntry(initialEntryState)\r\n              setEditCreateEntryModalOpen(true)\r\n            }}\r\n            color=\"primary\"\r\n            iconType=\"add\"\r\n            iconSize=\"sm\"\r\n            textSize=\"xl\"\r\n          >\r\n            Create entry\r\n          </ButtonLink>\r\n        </Col>\r\n      </Row>\r\n      <Block className={classes.formContainer}>\r\n        <TableContainer>\r\n          <Table\r\n            columns={columns}\r\n            data={addressBook}\r\n            defaultFixed\r\n            defaultOrderBy={AB_NAME_ID}\r\n            defaultRowsPerPage={25}\r\n            disableLoadingOnEmptyTable\r\n            label=\"Owners\"\r\n            size={addressBook?.length || 0}\r\n          >\r\n            {(sortedData) =>\r\n              sortedData.map((row, index) => {\r\n                const userOwner = isUserAnOwnerOfAnySafe(safesList, row.address)\r\n                const hideBorderBottom = index >= 3 && index === sortedData.size - 1 && classes.noBorderBottom\r\n                return (\r\n                  <TableRow\r\n                    className={cn(classes.hide, hideBorderBottom)}\r\n                    data-testid={ADDRESS_BOOK_ROW_ID}\r\n                    key={index}\r\n                    tabIndex={-1}\r\n                  >\r\n                    {autoColumns.map((column) => {\r\n                      return (\r\n                        <TableCell align={column.align} component=\"td\" key={column.id} style={cellWidth(column.width)}>\r\n                          {column.id === AB_ADDRESS_ID ? (\r\n                            <Block justify=\"left\">\r\n                              <EthHashInfo\r\n                                hash={row[column.id]}\r\n                                showCopyBtn\r\n                                showAvatar\r\n                                explorerUrl={getExplorerInfo(row[column.id])}\r\n                              />\r\n                            </Block>\r\n                          ) : (\r\n                            row[column.id]\r\n                          )}\r\n                        </TableCell>\r\n                      )\r\n                    })}\r\n                    <TableCell component=\"td\">\r\n                      <Row align=\"end\" className={classes.actions}>\r\n                        <UnStyledButton\r\n                          onClick={() => {\r\n                            setSelectedEntry({\r\n                              entry: row,\r\n                              isOwnerAddress: userOwner,\r\n                            })\r\n                            setEditCreateEntryModalOpen(true)\r\n                          }}\r\n                        >\r\n                          <Icon\r\n                            size=\"sm\"\r\n                            type=\"edit\"\r\n                            tooltip=\"Edit entry\"\r\n                            className={granted ? classes.editEntryButton : classes.editEntryButtonNonOwner}\r\n                          />\r\n                        </UnStyledButton>\r\n                        <UnStyledButton\r\n                          onClick={() => {\r\n                            setSelectedEntry({ entry: row })\r\n                            setDeleteEntryModalOpen(true)\r\n                          }}\r\n                        >\r\n                          <Icon\r\n                            size=\"sm\"\r\n                            type=\"delete\"\r\n                            color=\"error\"\r\n                            tooltip=\"Delete entry\"\r\n                            className={granted ? classes.removeEntryButton : classes.removeEntryButtonNonOwner}\r\n                          />\r\n                        </UnStyledButton>\r\n                        {granted ? (\r\n                          <StyledButton\r\n                            color=\"primary\"\r\n                            onClick={() => {\r\n                              setSelectedEntry({ entry: row })\r\n                              setSendFundsModalOpen(true)\r\n                            }}\r\n                            size=\"md\"\r\n                            variant=\"contained\"\r\n                            data-testid={SEND_ENTRY_BUTTON}\r\n                          >\r\n                            <FixedIcon type=\"arrowSentWhite\" />\r\n                            <Text size=\"xl\" color=\"white\">\r\n                              Send\r\n                            </Text>\r\n                          </StyledButton>\r\n                        ) : null}\r\n                      </Row>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                )\r\n              })\r\n            }\r\n          </Table>\r\n        </TableContainer>\r\n      </Block>\r\n      <CreateEditEntryModal\r\n        editEntryModalHandler={editEntryModalHandler}\r\n        entryToEdit={selectedEntry}\r\n        isOpen={editCreateEntryModalOpen}\r\n        newEntryModalHandler={newEntryModalHandler}\r\n        onClose={() => setEditCreateEntryModalOpen(false)}\r\n      />\r\n      <DeleteEntryModal\r\n        deleteEntryModalHandler={deleteEntryModalHandler}\r\n        entryToDelete={selectedEntry}\r\n        isOpen={deleteEntryModalOpen}\r\n        onClose={() => setDeleteEntryModalOpen(false)}\r\n      />\r\n      <ExportEntriesModal isOpen={exportEntriesModalOpen} onClose={() => setExportEntriesModalOpen(false)} />\r\n      <ImportEntriesModal\r\n        importEntryModalHandler={importEntryModalHandler}\r\n        isOpen={importEntryModalOpen}\r\n        onClose={() => setImportEntryModalOpen(false)}\r\n      />\r\n      <SendModal\r\n        activeScreenType=\"chooseTxType\"\r\n        isOpen={sendFundsModalOpen}\r\n        onClose={() => setSendFundsModalOpen(false)}\r\n        recipientAddress={selectedEntry?.entry?.address}\r\n        recipientName={selectedEntry?.entry?.name}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AddressBookTable\r\n"],"sourceRoot":""}