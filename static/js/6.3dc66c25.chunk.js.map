{"version":3,"sources":["components/forms/Field/index.tsx","components/forms/TextField/index.tsx","components/forms/GnoForm/index.tsx","logic/hooks/useEstimateTransactionGas.tsx","routes/safe/components/Transactions/helpers/TxParametersDetail/index.tsx","routes/safe/components/Transactions/helpers/EditTxParametersForm/style.ts","routes/safe/components/Transactions/helpers/EditTxParametersForm/index.tsx","routes/safe/components/Transactions/helpers/EditableTxParameters.tsx","components/TransactionFailText/index.tsx","components/TransactionsFees/index.tsx","logic/hooks/useEstimationStatus.tsx","assets/icons/info_red.svg","routes/safe/components/Transactions/helpers/utils.ts","routes/safe/container/hooks/useTransactionParameters.ts"],"names":["GnoField","props","overflowStyle","overflow","width","useStyles","makeStyles","createStyles","root","paddingTop","lg","paddingBottom","lineHeight","TextField","input","name","onChange","value","restInput","inputAdornment","meta","multiline","rows","testId","text","rest","classes","helperText","undefined","showError","touched","pristine","valid","hasError","error","modifiedSinceLastSubmit","submitError","errorMessage","isInactiveAndPristineOrUntouched","active","isInvalidAndUntouched","disableUnderline","inputRoot","statusClasses","inputProps","autoComplete","inputRootProps","className","InputProps","style","stylesBasedOn","padding","flexDirection","flex","GnoForm","children","decorators","formMutators","initialValues","onSubmit","subscription","validation","mutators","render","handleSubmit","data-testid","submitting","validating","form","validate","EstimationStatus","checkIfTxIsExecution","threshold","preApprovingOwner","txConfirmations","txType","sameString","checkIfTxIsApproveAndExecution","checkIfTxIsCreation","useEstimateTransactionGas","txRecipient","txData","txAmount","operation","safeTxGas","manualGasPrice","manualGasLimit","useState","txEstimationExecutionStatus","LOADING","gasEstimation","gasCost","gasCostFormatted","gasPrice","gasPriceFormatted","gasLimit","isExecution","isCreation","isOffChainSignature","setGasEstimation","nativeCoin","getNetworkInfo","safeAddress","useSelector","safeParamAddressFromStateSelector","safeThresholdSelector","safeVersion","safeCurrentVersionSelector","providerSelector","from","account","smartContractWallet","providerName","useEffect","a","length","size","Number","approvalAndExecution","checkIfOffChainSignatureIsPossible","safeTxGasEstimation","ethGasLimitEstimation","transactionCallSuccess","estimateSafeTxGas","CALL","estimateTransactionGasLimit","web3","utils","toWei","calculateGasPrice","fromWei","estimatedGasCosts","parseInt","fromTokenUnit","decimals","formatAmount","toString","checkTransactionExecution","gasToken","ZERO_ADDRESS","refundReceiver","SUCCESS","FAILURE","console","warn","message","estimateGas","TxParameterWrapper","styled","div","AccordionDetailsWrapper","StyledText","Text","StyledButtonLink","ButtonLink","TxParametersDetail","onEdit","txParameters","compact","parametersStatus","isTransactionCreation","isTransactionExecution","defaultParameterStatus","color","areSafeParamsEnabled","safeNonce","areEthereumParamsVisible","ethereumTxParametersTitle","ethNonce","ethGasLimit","ethGasPrice","textSize","onClick","styles","heading","md","justifyContent","boxSizing","height","annotation","letterSpacing","secondaryText","marginRight","marginLeft","headingText","fontSize","closeIcon","container","amount","sm","address","buttonRow","alignItems","gap","StyledDivider","Divider","StyledDividerFooter","SafeOptions","EthereumOptions","StyledLink","Link","StyledTextMt","formValidation","values","minValue","EditTxParametersForm","onClose","onCloseFormHandler","Row","align","grow","withoutMargin","IconButton","disableRipple","Block","strong","Field","defaultValue","placeholder","type","min","component","disabled","href","target","Modal","Footer","Buttons","cancelButtonProps","confirmButtonProps","EditableTxParameters","closeEditModalCallback","isEditMode","toggleEditMode","useManualValues","setUseManualValues","useTransactionParameters","parameterStatus","initialEthGasLimit","initialEthGasPrice","initialSafeNonce","initialSafeTxGas","setEthGasPrice","setEthGasLimit","setSafeNonce","setSafeTxGas","setEthNonce","toggleStatus","prev","executionWarningRow","display","warningIcon","TransactionFailText","Paragraph","Img","alt","src","InfoIcon","TransactionFees","transactionAction","as","useEstimationStatus","txEstimationStatus","ButtonStatus","DISABLED","buttonStatus","setButtonStatus","mounted","READY","isCancelTransaction","connectedWalletAddress","userAccountSelector","safeSelector","ethGasPriceInGWei","setEthGasPriceInGWei","getUserNonce","res","getNonce","safeInstance","getGnosisSafeInstanceAt","getLastTx","lastTx","getNewTxNonce","nonce","getSafeNonce"],"mappings":"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","file":"static/js/6.3dc66c25.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Field } from 'react-final-form'\r\n\r\n// $FlowFixMe\r\nconst GnoField = ({ ...props }: any) => <Field {...props} />\r\n\r\nexport default GnoField\r\n","import MuiTextField from '@material-ui/core/TextField'\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles'\r\nimport React from 'react'\r\n\r\nimport { lg } from 'src/theme/variables'\r\n\r\n// Neded for solving a fix in Windows browsers\r\nconst overflowStyle = {\r\n  overflow: 'hidden',\r\n  width: '100%',\r\n}\r\n\r\nconst styles = () =>\r\n  createStyles({\r\n    root: {\r\n      paddingTop: lg,\r\n      paddingBottom: '12px',\r\n      lineHeight: 0,\r\n    },\r\n  })\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\ntype Props = {\r\n  input: {\r\n    name: string\r\n    onChange?: () => void\r\n    value: string\r\n    placeholder: string\r\n    type: string\r\n  }\r\n  meta: {\r\n    touched?: boolean\r\n    pristine?: boolean\r\n    valid?: boolean\r\n    error?: string\r\n    modifiedSinceLastSubmit?: boolean\r\n    submitError?: boolean\r\n    active?: boolean\r\n  }\r\n  inputAdornment?: { endAdornment: React.ReactElement } | undefined\r\n  multiline: boolean\r\n  rows?: string\r\n  testId: string\r\n  text: string\r\n  disabled?: boolean\r\n  rowsMax?: number\r\n  className?: string\r\n}\r\n\r\nconst TextField = (props: Props): React.ReactElement => {\r\n  const {\r\n    input: { name, onChange, value, ...restInput },\r\n    inputAdornment,\r\n    meta,\r\n    multiline,\r\n    rows,\r\n    testId,\r\n    text,\r\n    ...rest\r\n  } = props\r\n  const classes = useStyles()\r\n  const helperText = value ? text : undefined\r\n  const showError = (meta.touched || !meta.pristine) && !meta.valid\r\n  const hasError = !!meta.error || (!meta.modifiedSinceLastSubmit && !!meta.submitError)\r\n  const errorMessage = meta.error || meta.submitError\r\n  const isInactiveAndPristineOrUntouched = !meta.active && (meta.pristine || !meta.touched)\r\n  const isInvalidAndUntouched = typeof meta.error === 'undefined' ? true : !meta.touched\r\n\r\n  const disableUnderline = isInactiveAndPristineOrUntouched && isInvalidAndUntouched\r\n\r\n  const inputRoot = helperText ? classes.root : ''\r\n  const statusClasses = meta.valid ? 'isValid' : hasError && showError ? 'isInvalid' : ''\r\n  const inputProps = {\r\n    ...restInput,\r\n    autoComplete: 'off',\r\n    'data-testid': testId,\r\n  }\r\n  const inputRootProps = {\r\n    ...inputAdornment,\r\n    className: `${inputRoot} ${statusClasses}`,\r\n    disableUnderline: disableUnderline,\r\n  }\r\n\r\n  return (\r\n    <MuiTextField\r\n      error={hasError && showError}\r\n      helperText={hasError && showError ? errorMessage : helperText || ' '}\r\n      inputProps={inputProps} // blank in order to force to have helper text\r\n      InputProps={inputRootProps}\r\n      multiline={multiline}\r\n      name={name}\r\n      onChange={onChange}\r\n      rows={rows}\r\n      style={overflowStyle}\r\n      value={value}\r\n      {...rest}\r\n    />\r\n  )\r\n}\r\n\r\nexport default TextField\r\n","import * as React from 'react'\r\nimport { Form } from 'react-final-form'\r\n\r\nconst stylesBasedOn = (padding) => ({\r\n  padding: `0 ${padding}%`,\r\n  flexDirection: 'column',\r\n  flex: '1 0 auto',\r\n})\r\n\r\nconst GnoForm = ({\r\n  children,\r\n  decorators,\r\n  formMutators,\r\n  initialValues,\r\n  onSubmit,\r\n  padding = 0,\r\n  subscription,\r\n  testId = '',\r\n  validation,\r\n}: any) => (\r\n  <Form\r\n    decorators={decorators}\r\n    initialValues={initialValues}\r\n    mutators={formMutators}\r\n    onSubmit={onSubmit}\r\n    render={({ handleSubmit, ...rest }) => (\r\n      <form data-testid={testId} onSubmit={handleSubmit} style={stylesBasedOn(padding) as any}>\r\n        {children(rest.submitting, rest.validating, rest, rest.form.mutators)}\r\n      </form>\r\n    )}\r\n    subscription={subscription}\r\n    validate={validation}\r\n  />\r\n)\r\n\r\nexport default GnoForm\r\n","import { List } from 'immutable'\r\nimport { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { getNetworkInfo } from 'src/config'\r\nimport {\r\n  checkTransactionExecution,\r\n  estimateSafeTxGas,\r\n  estimateTransactionGasLimit,\r\n} from 'src/logic/safe/transactions/gas'\r\nimport { fromTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\r\nimport { formatAmount } from 'src/logic/tokens/utils/formatAmount'\r\nimport { calculateGasPrice } from 'src/logic/wallets/ethTransactions'\r\nimport {\r\n  safeCurrentVersionSelector,\r\n  safeParamAddressFromStateSelector,\r\n  safeThresholdSelector,\r\n} from 'src/logic/safe/store/selectors'\r\nimport { CALL } from 'src/logic/safe/transactions'\r\nimport { web3ReadOnly as web3 } from 'src/logic/wallets/getWeb3'\r\nimport { providerSelector } from 'src/logic/wallets/store/selectors'\r\n\r\nimport { Confirmation } from 'src/logic/safe/store/models/types/confirmation'\r\nimport { checkIfOffChainSignatureIsPossible } from 'src/logic/safe/safeTxSigner'\r\nimport { ZERO_ADDRESS } from 'src/logic/wallets/ethAddresses'\r\nimport { sameString } from 'src/utils/strings'\r\n\r\nexport enum EstimationStatus {\r\n  LOADING = 'LOADING',\r\n  FAILURE = 'FAILURE',\r\n  SUCCESS = 'SUCCESS',\r\n}\r\n\r\nexport const checkIfTxIsExecution = (\r\n  threshold: number,\r\n  preApprovingOwner?: string,\r\n  txConfirmations?: number,\r\n  txType?: string,\r\n): boolean => {\r\n  if (\r\n    threshold === 1 ||\r\n    sameString(txType, 'spendingLimit') ||\r\n    (txConfirmations !== undefined && txConfirmations >= threshold)\r\n  ) {\r\n    return true\r\n  }\r\n\r\n  if (preApprovingOwner && txConfirmations) {\r\n    return txConfirmations + 1 === threshold\r\n  }\r\n\r\n  return false\r\n}\r\n\r\nexport const checkIfTxIsApproveAndExecution = (\r\n  threshold: number,\r\n  txConfirmations: number,\r\n  txType?: string,\r\n  preApprovingOwner?: string,\r\n): boolean => {\r\n  if (preApprovingOwner) {\r\n    return txConfirmations + 1 === threshold || sameString(txType, 'spendingLimit')\r\n  }\r\n\r\n  if (threshold === 1) {\r\n    return true\r\n  }\r\n\r\n  return false\r\n}\r\n\r\nexport const checkIfTxIsCreation = (txConfirmations: number, txType?: string): boolean =>\r\n  txConfirmations === 0 && !sameString(txType, 'spendingLimit')\r\n\r\ntype UseEstimateTransactionGasProps = {\r\n  txData: string\r\n  txRecipient: string\r\n  txConfirmations?: List<Confirmation>\r\n  txAmount?: string\r\n  preApprovingOwner?: string\r\n  operation?: number\r\n  safeTxGas?: number\r\n  txType?: string\r\n  manualGasPrice?: string\r\n  manualGasLimit?: string\r\n}\r\n\r\nexport type TransactionGasEstimationResult = {\r\n  txEstimationExecutionStatus: EstimationStatus\r\n  gasEstimation: number // Amount of gas needed for execute or approve the transaction\r\n  gasCost: string // Cost of gas in raw format (estimatedGas * gasPrice)\r\n  gasCostFormatted: string // Cost of gas in format '< | > 100'\r\n  gasPrice: string // Current price of gas unit\r\n  gasPriceFormatted: string // Current gas price formatted\r\n  gasLimit: string // Minimum gas requited to execute the Tx\r\n  isExecution: boolean // Returns true if the user will execute the tx or false if it just signs it\r\n  isCreation: boolean // Returns true if the transaction is a creation transaction\r\n  isOffChainSignature: boolean // Returns true if offChainSignature is available\r\n}\r\n\r\nexport const useEstimateTransactionGas = ({\r\n  txRecipient,\r\n  txData,\r\n  txConfirmations,\r\n  txAmount,\r\n  preApprovingOwner,\r\n  operation,\r\n  safeTxGas,\r\n  txType,\r\n  manualGasPrice,\r\n  manualGasLimit,\r\n}: UseEstimateTransactionGasProps): TransactionGasEstimationResult => {\r\n  const [gasEstimation, setGasEstimation] = useState<TransactionGasEstimationResult>({\r\n    txEstimationExecutionStatus: EstimationStatus.LOADING,\r\n    gasEstimation: 0,\r\n    gasCost: '0',\r\n    gasCostFormatted: '< 0.001',\r\n    gasPrice: '0',\r\n    gasPriceFormatted: '0',\r\n    gasLimit: '0',\r\n    isExecution: false,\r\n    isCreation: false,\r\n    isOffChainSignature: false,\r\n  })\r\n  const { nativeCoin } = getNetworkInfo()\r\n  const safeAddress = useSelector(safeParamAddressFromStateSelector)\r\n  const threshold = useSelector(safeThresholdSelector)\r\n  const safeVersion = useSelector(safeCurrentVersionSelector)\r\n  const { account: from, smartContractWallet, name: providerName } = useSelector(providerSelector)\r\n\r\n  useEffect(() => {\r\n    const estimateGas = async () => {\r\n      if (!txData.length) {\r\n        return\r\n      }\r\n\r\n      const isCreation = checkIfTxIsCreation(txConfirmations?.size || 0, txType)\r\n      const isExecution = checkIfTxIsExecution(Number(threshold), preApprovingOwner, txConfirmations?.size, txType)\r\n      const approvalAndExecution = checkIfTxIsApproveAndExecution(\r\n        Number(threshold),\r\n        txConfirmations?.size || 0,\r\n        txType,\r\n        preApprovingOwner,\r\n      )\r\n      const isOffChainSignature = checkIfOffChainSignatureIsPossible(isExecution, smartContractWallet, safeVersion)\r\n\r\n      try {\r\n        let safeTxGasEstimation = safeTxGas || 0\r\n        let ethGasLimitEstimation = 0\r\n        let transactionCallSuccess = true\r\n        let txEstimationExecutionStatus = EstimationStatus.LOADING\r\n\r\n        if (isCreation) {\r\n          safeTxGasEstimation = await estimateSafeTxGas({\r\n            safeAddress,\r\n            txData,\r\n            txRecipient,\r\n            txAmount: txAmount || '0',\r\n            operation: operation || CALL,\r\n          })\r\n        }\r\n        if (isExecution || approvalAndExecution) {\r\n          ethGasLimitEstimation = await estimateTransactionGasLimit({\r\n            safeAddress,\r\n            txRecipient,\r\n            txData,\r\n            txAmount: txAmount || '0',\r\n            txConfirmations,\r\n            isExecution,\r\n            isOffChainSignature,\r\n            operation: operation || CALL,\r\n            from,\r\n            safeTxGas: safeTxGasEstimation,\r\n            approvalAndExecution,\r\n          })\r\n        }\r\n\r\n        const gasPrice = manualGasPrice ? web3.utils.toWei(manualGasPrice, 'gwei') : await calculateGasPrice()\r\n        const gasPriceFormatted = web3.utils.fromWei(gasPrice, 'gwei')\r\n        const estimatedGasCosts = ethGasLimitEstimation * parseInt(gasPrice, 10)\r\n        const gasCost = fromTokenUnit(estimatedGasCosts, nativeCoin.decimals)\r\n        const gasCostFormatted = formatAmount(gasCost)\r\n        const gasLimit = manualGasLimit || ethGasLimitEstimation.toString()\r\n\r\n        if (isExecution) {\r\n          transactionCallSuccess = await checkTransactionExecution({\r\n            safeAddress,\r\n            txRecipient,\r\n            txData,\r\n            txAmount: txAmount || '0',\r\n            txConfirmations,\r\n            operation: operation || CALL,\r\n            from,\r\n            gasPrice: '0',\r\n            gasToken: ZERO_ADDRESS,\r\n            gasLimit,\r\n            refundReceiver: ZERO_ADDRESS,\r\n            safeTxGas: safeTxGasEstimation,\r\n            approvalAndExecution,\r\n          })\r\n        }\r\n\r\n        txEstimationExecutionStatus = transactionCallSuccess ? EstimationStatus.SUCCESS : EstimationStatus.FAILURE\r\n\r\n        setGasEstimation({\r\n          txEstimationExecutionStatus,\r\n          gasEstimation: safeTxGasEstimation,\r\n          gasCost,\r\n          gasCostFormatted,\r\n          gasPrice,\r\n          gasPriceFormatted,\r\n          gasLimit,\r\n          isExecution,\r\n          isCreation,\r\n          isOffChainSignature,\r\n        })\r\n      } catch (error) {\r\n        console.warn(error.message)\r\n        // If safeTxGas estimation fail we set this value to 0 (so up to all gasLimit can be used)\r\n        setGasEstimation({\r\n          txEstimationExecutionStatus: EstimationStatus.FAILURE,\r\n          gasEstimation: 0,\r\n          gasCost: '0',\r\n          gasCostFormatted: '< 0.001',\r\n          gasPrice: '1',\r\n          gasPriceFormatted: '1',\r\n          gasLimit: '0',\r\n          isExecution,\r\n          isCreation,\r\n          isOffChainSignature,\r\n        })\r\n      }\r\n    }\r\n\r\n    estimateGas()\r\n  }, [\r\n    txData,\r\n    safeAddress,\r\n    txRecipient,\r\n    txConfirmations,\r\n    txAmount,\r\n    preApprovingOwner,\r\n    nativeCoin.decimals,\r\n    threshold,\r\n    from,\r\n    operation,\r\n    safeVersion,\r\n    smartContractWallet,\r\n    safeTxGas,\r\n    txType,\r\n    providerName,\r\n    manualGasPrice,\r\n    manualGasLimit,\r\n  ])\r\n\r\n  return gasEstimation\r\n}\r\n","import React, { ReactElement } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, ButtonLink, Accordion, AccordionSummary, AccordionDetails } from '@gnosis.pm/safe-react-components'\r\n\r\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\r\nimport { ParametersStatus, areEthereumParamsVisible, areSafeParamsEnabled, ethereumTxParametersTitle } from '../utils'\r\nimport { useSelector } from 'react-redux'\r\nimport { safeThresholdSelector } from 'src/logic/safe/store/selectors'\r\n\r\nconst TxParameterWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n`\r\n\r\nconst AccordionDetailsWrapper = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n`\r\nconst StyledText = styled(Text)`\r\n  margin: 8px 0 0 0;\r\n`\r\n\r\nconst StyledButtonLink = styled(ButtonLink)`\r\n  padding-left: 0;\r\n  margin: 8px 0 0 0;\r\n\r\n  > p {\r\n    margin-left: 0;\r\n  }\r\n`\r\n\r\ntype Props = {\r\n  txParameters: TxParameters\r\n  onEdit: () => void\r\n  compact?: boolean\r\n  parametersStatus?: ParametersStatus\r\n  isTransactionCreation: boolean\r\n  isTransactionExecution: boolean\r\n  isOffChainSignature: boolean\r\n}\r\n\r\nexport const TxParametersDetail = ({\r\n  onEdit,\r\n  txParameters,\r\n  compact = true,\r\n  parametersStatus,\r\n  isTransactionCreation,\r\n  isTransactionExecution,\r\n  isOffChainSignature,\r\n}: Props): ReactElement | null => {\r\n  const threshold = useSelector(safeThresholdSelector) || 1\r\n  const defaultParameterStatus = isOffChainSignature && threshold > 1 ? 'ETH_HIDDEN' : 'ENABLED'\r\n\r\n  if (!isTransactionExecution && !isTransactionCreation && isOffChainSignature) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Accordion compact={compact}>\r\n      <AccordionSummary>\r\n        <Text size=\"lg\">Advanced options</Text>\r\n      </AccordionSummary>\r\n      <AccordionDetails>\r\n        <AccordionDetailsWrapper>\r\n          <StyledText size=\"md\" color=\"placeHolder\">\r\n            Safe transaction\r\n          </StyledText>\r\n\r\n          <TxParameterWrapper>\r\n            <Text\r\n              size=\"lg\"\r\n              color={areSafeParamsEnabled(parametersStatus || defaultParameterStatus) ? 'text' : 'secondaryLight'}\r\n            >\r\n              Safe nonce\r\n            </Text>\r\n            <Text\r\n              size=\"lg\"\r\n              color={areSafeParamsEnabled(parametersStatus || defaultParameterStatus) ? 'text' : 'secondaryLight'}\r\n            >\r\n              {txParameters.safeNonce}\r\n            </Text>\r\n          </TxParameterWrapper>\r\n\r\n          <TxParameterWrapper>\r\n            <Text\r\n              size=\"lg\"\r\n              color={areSafeParamsEnabled(parametersStatus || defaultParameterStatus) ? 'text' : 'secondaryLight'}\r\n            >\r\n              SafeTxGas\r\n            </Text>\r\n            <Text\r\n              size=\"lg\"\r\n              color={areSafeParamsEnabled(parametersStatus || defaultParameterStatus) ? 'text' : 'secondaryLight'}\r\n            >\r\n              {txParameters.safeTxGas}\r\n            </Text>\r\n          </TxParameterWrapper>\r\n\r\n          {areEthereumParamsVisible(parametersStatus || defaultParameterStatus) && (\r\n            <>\r\n              <TxParameterWrapper>\r\n                <StyledText size=\"md\" color=\"placeHolder\">\r\n                  {ethereumTxParametersTitle(isTransactionExecution)}\r\n                </StyledText>\r\n              </TxParameterWrapper>\r\n\r\n              <TxParameterWrapper>\r\n                <Text size=\"lg\">Nonce</Text>\r\n                <Text size=\"lg\">{txParameters.ethNonce}</Text>\r\n              </TxParameterWrapper>\r\n\r\n              <TxParameterWrapper>\r\n                <Text size=\"lg\">Gas limit</Text>\r\n                <Text size=\"lg\">{txParameters.ethGasLimit}</Text>\r\n              </TxParameterWrapper>\r\n\r\n              <TxParameterWrapper>\r\n                <Text size=\"lg\">Gas price</Text>\r\n                <Text size=\"lg\">{txParameters.ethGasPrice}</Text>\r\n              </TxParameterWrapper>\r\n            </>\r\n          )}\r\n          <StyledButtonLink color=\"primary\" textSize=\"xl\" onClick={onEdit}>\r\n            Edit\r\n          </StyledButtonLink>\r\n        </AccordionDetailsWrapper>\r\n      </AccordionDetails>\r\n    </Accordion>\r\n  )\r\n}\r\n","import { lg, md, secondaryText, sm } from 'src/theme/variables'\r\nimport { createStyles } from '@material-ui/core'\r\n\r\nexport const styles = createStyles({\r\n  heading: {\r\n    padding: `${md} ${lg}`,\r\n    justifyContent: 'space-between',\r\n    boxSizing: 'border-box',\r\n    height: '74px',\r\n  },\r\n  annotation: {\r\n    letterSpacing: '-1px',\r\n    color: secondaryText,\r\n    marginRight: 'auto',\r\n    marginLeft: '20px',\r\n  },\r\n  headingText: {\r\n    fontSize: lg,\r\n  },\r\n  closeIcon: {\r\n    height: '35px',\r\n    width: '35px',\r\n  },\r\n  container: {\r\n    padding: `${md} ${lg}`,\r\n  },\r\n  amount: {\r\n    marginLeft: sm,\r\n  },\r\n  address: {\r\n    marginRight: sm,\r\n  },\r\n  buttonRow: {\r\n    height: '52px',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    gap: '16px',\r\n  },\r\n})\r\n","import React, { ReactElement } from 'react'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Close from '@material-ui/icons/Close'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { Title, Text, Divider, Link, Icon } from '@gnosis.pm/safe-react-components'\r\nimport styled from 'styled-components'\r\n\r\nimport Field from 'src/components/forms/Field'\r\nimport TextField from 'src/components/forms/TextField'\r\nimport Block from 'src/components/layout/Block'\r\nimport Row from 'src/components/layout/Row'\r\nimport { styles } from './style'\r\nimport GnoForm from 'src/components/forms/GnoForm'\r\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\r\nimport { minValue } from 'src/components/forms/validator'\r\nimport { Modal } from 'src/components/Modal'\r\n\r\nimport { ParametersStatus, areSafeParamsEnabled, areEthereumParamsVisible, ethereumTxParametersTitle } from '../utils'\r\n\r\nconst StyledDivider = styled(Divider)`\r\n  margin: 0px;\r\n`\r\nconst StyledDividerFooter = styled(Divider)`\r\n  margin: 16px -24px;\r\n`\r\n\r\nconst SafeOptions = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  gap: 20px;\r\n`\r\n\r\nconst EthereumOptions = styled.div`\r\n  display: flex;\r\n  /* justify-content: space-between; */\r\n  flex-wrap: wrap;\r\n  gap: 10px 20px;\r\n\r\n  div {\r\n    width: 216px !important;\r\n  }\r\n`\r\nconst StyledLink = styled(Link)`\r\n  margin: 16px 0 0 0;\r\n  display: inline-flex;\r\n  align-items: center;\r\n\r\n  > :first-of-type {\r\n    margin-right: 5px;\r\n  }\r\n`\r\nconst StyledText = styled(Text)`\r\n  margin: 0 0 4px 0;\r\n`\r\nconst StyledTextMt = styled(Text)`\r\n  margin: 16px 0 4px 0;\r\n`\r\nconst useStyles = makeStyles(styles)\r\n\r\ninterface Props {\r\n  txParameters: TxParameters\r\n  onClose: (txParameters?: TxParameters) => void\r\n  parametersStatus: ParametersStatus\r\n  isExecution: boolean\r\n}\r\n\r\nconst formValidation = (values) => {\r\n  const { ethGasLimit, ethGasPrice, ethNonce, safeNonce, safeTxGas } = values ?? {}\r\n\r\n  const ethGasLimitValidation = minValue(0, true)(ethGasLimit)\r\n\r\n  const ethGasPriceValidation = minValue(0, true)(ethGasPrice)\r\n\r\n  const ethNonceValidation = minValue(0, true)(ethNonce)\r\n\r\n  const safeNonceValidation = minValue(0, true)(safeNonce)\r\n\r\n  const safeTxGasValidation = minValue(0, true)(safeTxGas)\r\n\r\n  return {\r\n    ethGasLimit: ethGasLimitValidation,\r\n    ethGasPrice: ethGasPriceValidation,\r\n    ethNonce: ethNonceValidation,\r\n    safeNonce: safeNonceValidation,\r\n    safeTxGas: safeTxGasValidation,\r\n  }\r\n}\r\n\r\nexport const EditTxParametersForm = ({\r\n  onClose,\r\n  txParameters,\r\n  parametersStatus = 'ENABLED',\r\n  isExecution,\r\n}: Props): ReactElement => {\r\n  const classes = useStyles()\r\n  const { safeNonce, safeTxGas, ethNonce, ethGasLimit, ethGasPrice } = txParameters\r\n\r\n  const onSubmit = (values: TxParameters) => {\r\n    onClose(values)\r\n  }\r\n\r\n  const onCloseFormHandler = () => {\r\n    onClose()\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* Header */}\r\n      <Row align=\"center\" className={classes.heading} grow data-testid=\"send-funds-review-step\">\r\n        <Title size=\"sm\" withoutMargin>\r\n          Advanced options\r\n        </Title>\r\n        <IconButton disableRipple onClick={onCloseFormHandler}>\r\n          <Close className={classes.closeIcon} />\r\n        </IconButton>\r\n      </Row>\r\n\r\n      <StyledDivider />\r\n\r\n      <Block className={classes.container}>\r\n        <GnoForm\r\n          initialValues={{\r\n            safeNonce: safeNonce || 0,\r\n            safeTxGas: safeTxGas || '',\r\n            ethNonce: ethNonce || '',\r\n            ethGasLimit: ethGasLimit || '',\r\n            ethGasPrice: ethGasPrice || '',\r\n          }}\r\n          onSubmit={onSubmit}\r\n          validation={formValidation}\r\n        >\r\n          {() => (\r\n            <>\r\n              <StyledText size=\"xl\" strong>\r\n                Safe transaction\r\n              </StyledText>\r\n\r\n              <SafeOptions>\r\n                <Field\r\n                  name=\"safeNonce\"\r\n                  defaultValue={safeNonce}\r\n                  placeholder=\"Safe nonce\"\r\n                  text=\"Safe nonce\"\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  component={TextField}\r\n                  disabled={!areSafeParamsEnabled(parametersStatus)}\r\n                />\r\n                <Field\r\n                  name=\"safeTxGas\"\r\n                  defaultValue={safeTxGas}\r\n                  placeholder=\"SafeTxGas\"\r\n                  text=\"SafeTxGas\"\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  component={TextField}\r\n                  disabled={!areSafeParamsEnabled(parametersStatus)}\r\n                />\r\n              </SafeOptions>\r\n\r\n              {areEthereumParamsVisible(parametersStatus) && (\r\n                <>\r\n                  <StyledTextMt size=\"xl\" strong>\r\n                    {ethereumTxParametersTitle(isExecution)}\r\n                  </StyledTextMt>\r\n\r\n                  <EthereumOptions>\r\n                    <Field\r\n                      name=\"ethNonce\"\r\n                      defaultValue={ethNonce}\r\n                      placeholder=\"Nonce\"\r\n                      text=\"Nonce\"\r\n                      type=\"number\"\r\n                      component={TextField}\r\n                      disabled={!areEthereumParamsVisible(parametersStatus)}\r\n                    />\r\n                    <Field\r\n                      name=\"ethGasLimit\"\r\n                      defaultValue={ethGasLimit}\r\n                      placeholder=\"Gas limit\"\r\n                      text=\"Gas limit\"\r\n                      type=\"number\"\r\n                      component={TextField}\r\n                      disabled={parametersStatus === 'CANCEL_TRANSACTION'}\r\n                    />\r\n                    <Field\r\n                      name=\"ethGasPrice\"\r\n                      defaultValue={ethGasPrice}\r\n                      type=\"number\"\r\n                      placeholder=\"Gas price (GWEI)\"\r\n                      text=\"Gas price (GWEI)\"\r\n                      component={TextField}\r\n                      disabled={!areEthereumParamsVisible(parametersStatus)}\r\n                    />\r\n                  </EthereumOptions>\r\n\r\n                  <StyledLink\r\n                    href=\"https://help.gnosis-safe.io/en/articles/4738445-configure-advanced-transaction-parameters-manually\"\r\n                    target=\"_blank\"\r\n                  >\r\n                    <Text size=\"xl\" color=\"primary\">\r\n                      How can I configure these parameters manually?\r\n                    </Text>\r\n                    <Icon size=\"sm\" type=\"externalLink\" color=\"primary\" />\r\n                  </StyledLink>\r\n                </>\r\n              )}\r\n\r\n              <StyledDividerFooter />\r\n\r\n              {/* Footer */}\r\n              <Row align=\"center\" className={classes.buttonRow}>\r\n                <Modal.Footer.Buttons\r\n                  cancelButtonProps={{ onClick: onCloseFormHandler, text: 'Back' }}\r\n                  confirmButtonProps={{\r\n                    type: 'submit',\r\n                    text: 'Confirm',\r\n                    testId: 'submit-tx-btn',\r\n                  }}\r\n                />\r\n              </Row>\r\n            </>\r\n          )}\r\n        </GnoForm>\r\n      </Block>\r\n    </>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { TxParameters, useTransactionParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\r\nimport { EditTxParametersForm } from 'src/routes/safe/components/Transactions/helpers/EditTxParametersForm'\r\nimport { ParametersStatus } from './utils'\r\nimport { useSelector } from 'react-redux'\r\nimport { safeThresholdSelector } from 'src/logic/safe/store/selectors'\r\n\r\ntype Props = {\r\n  children: (txParameters: TxParameters, toggleStatus: (txParameters?: TxParameters) => void) => any\r\n  isOffChainSignature: boolean\r\n  isExecution: boolean\r\n  parametersStatus?: ParametersStatus\r\n  ethGasLimit?: TxParameters['ethGasLimit']\r\n  ethGasPrice?: TxParameters['ethGasPrice']\r\n  safeNonce?: TxParameters['safeNonce']\r\n  safeTxGas?: TxParameters['safeTxGas']\r\n  closeEditModalCallback?: (txParameters: TxParameters) => void\r\n}\r\n\r\nexport const EditableTxParameters = ({\r\n  children,\r\n  isOffChainSignature,\r\n  isExecution,\r\n  parametersStatus,\r\n  ethGasLimit,\r\n  ethGasPrice,\r\n  safeNonce,\r\n  safeTxGas,\r\n  closeEditModalCallback,\r\n}: Props): React.ReactElement => {\r\n  const [isEditMode, toggleEditMode] = useState(false)\r\n  const [useManualValues, setUseManualValues] = useState(false)\r\n  const threshold = useSelector(safeThresholdSelector) || 1\r\n  const defaultParameterStatus = isOffChainSignature && threshold > 1 ? 'ETH_HIDDEN' : 'ENABLED'\r\n  const txParameters = useTransactionParameters({\r\n    parameterStatus: parametersStatus || defaultParameterStatus,\r\n    initialEthGasLimit: ethGasLimit,\r\n    initialEthGasPrice: ethGasPrice,\r\n    initialSafeNonce: safeNonce,\r\n    initialSafeTxGas: safeTxGas,\r\n  })\r\n  const { setEthGasPrice, setEthGasLimit, setSafeNonce, setSafeTxGas, setEthNonce } = txParameters\r\n\r\n  // Update TxParameters\r\n  useEffect(() => {\r\n    if (!useManualValues) {\r\n      setEthGasLimit(ethGasLimit)\r\n      setEthGasPrice(ethGasPrice)\r\n      setSafeTxGas(safeTxGas)\r\n    }\r\n  }, [ethGasLimit, setEthGasLimit, ethGasPrice, setEthGasPrice, useManualValues, safeTxGas, setSafeTxGas])\r\n\r\n  const toggleStatus = () => {\r\n    toggleEditMode((prev) => !prev)\r\n  }\r\n\r\n  const closeEditFormHandler = (txParameters?: TxParameters) => {\r\n    if (txParameters) {\r\n      setUseManualValues(true)\r\n      setSafeNonce(txParameters.safeNonce)\r\n      setSafeTxGas(txParameters.safeTxGas)\r\n      setEthGasLimit(txParameters.ethGasLimit)\r\n      setEthGasPrice(txParameters.ethGasPrice)\r\n      setEthNonce(txParameters.ethNonce)\r\n      closeEditModalCallback && closeEditModalCallback(txParameters)\r\n    }\r\n    toggleStatus()\r\n  }\r\n\r\n  return isEditMode ? (\r\n    <EditTxParametersForm\r\n      isExecution={isExecution}\r\n      txParameters={txParameters}\r\n      onClose={closeEditFormHandler}\r\n      parametersStatus={parametersStatus ? parametersStatus : defaultParameterStatus}\r\n    />\r\n  ) : (\r\n    children(txParameters, toggleStatus)\r\n  )\r\n}\r\n","import { createStyles, makeStyles } from '@material-ui/core'\r\nimport { sm } from 'src/theme/variables'\r\nimport { EstimationStatus } from 'src/logic/hooks/useEstimateTransactionGas'\r\nimport Row from 'src/components/layout/Row'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Img from 'src/components/layout/Img'\r\nimport InfoIcon from 'src/assets/icons/info_red.svg'\r\nimport React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { safeThresholdSelector } from 'src/logic/safe/store/selectors'\r\n\r\nconst styles = createStyles({\r\n  executionWarningRow: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  },\r\n  warningIcon: {\r\n    marginRight: sm,\r\n  },\r\n})\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\ntype TransactionFailTextProps = {\r\n  txEstimationExecutionStatus: EstimationStatus\r\n  isExecution: boolean\r\n}\r\n\r\nexport const TransactionFailText = ({\r\n  txEstimationExecutionStatus,\r\n  isExecution,\r\n}: TransactionFailTextProps): React.ReactElement | null => {\r\n  const classes = useStyles()\r\n  const threshold = useSelector(safeThresholdSelector)\r\n\r\n  if (txEstimationExecutionStatus !== EstimationStatus.FAILURE) {\r\n    return null\r\n  }\r\n\r\n  let errorMessage = 'To save gas costs, avoid creating the transaction.'\r\n  if (isExecution) {\r\n    errorMessage =\r\n      threshold && threshold > 1\r\n        ? `To save gas costs, reject this transaction`\r\n        : `To save gas costs, avoid executing the transaction.`\r\n  }\r\n\r\n  return (\r\n    <Row align=\"center\">\r\n      <Paragraph color=\"error\" className={classes.executionWarningRow}>\r\n        <Img alt=\"Info Tooltip\" height={16} src={InfoIcon} className={classes.warningIcon} />\r\n        This transaction will most likely fail. {errorMessage}\r\n      </Paragraph>\r\n    </Row>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { EstimationStatus } from 'src/logic/hooks/useEstimateTransactionGas'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport { getNetworkInfo } from 'src/config'\r\nimport { TransactionFailText } from 'src/components/TransactionFailText'\r\nimport { Text } from '@gnosis.pm/safe-react-components'\r\n\r\ntype TransactionFailTextProps = {\r\n  txEstimationExecutionStatus: EstimationStatus\r\n  gasCostFormatted: string\r\n  isExecution: boolean\r\n  isCreation: boolean\r\n  isOffChainSignature: boolean\r\n}\r\nconst { nativeCoin } = getNetworkInfo()\r\n\r\nexport const TransactionFees = ({\r\n  gasCostFormatted,\r\n  isExecution,\r\n  isCreation,\r\n  isOffChainSignature,\r\n  txEstimationExecutionStatus,\r\n}: TransactionFailTextProps): React.ReactElement | null => {\r\n  let transactionAction\r\n  if (txEstimationExecutionStatus === EstimationStatus.LOADING) {\r\n    return null\r\n  }\r\n  if (isCreation) {\r\n    transactionAction = 'create'\r\n  } else if (isExecution) {\r\n    transactionAction = 'execute'\r\n  } else {\r\n    transactionAction = 'approve'\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Paragraph size=\"lg\" align=\"center\">\r\n        You&apos;re about to {transactionAction} a transaction and will have to confirm it with your currently connected\r\n        wallet.{' '}\r\n        {!isOffChainSignature && (\r\n          <>\r\n            Make sure you have{' '}\r\n            <Text size=\"lg\" as=\"span\" color=\"text\" strong>\r\n              {gasCostFormatted}\r\n            </Text>{' '}\r\n            (fee price) {nativeCoin.name} in this wallet to fund this confirmation.\r\n          </>\r\n        )}\r\n      </Paragraph>\r\n      <TransactionFailText txEstimationExecutionStatus={txEstimationExecutionStatus} isExecution={isExecution} />\r\n    </>\r\n  )\r\n}\r\n","import { Dispatch, SetStateAction, useEffect, useState } from 'react'\r\n\r\nimport { EstimationStatus } from './useEstimateTransactionGas'\r\nimport { ButtonStatus } from 'src/components/Modal'\r\n\r\nexport const useEstimationStatus = (\r\n  txEstimationStatus?: EstimationStatus,\r\n): [buttonStatus: ButtonStatus, setButtonStatus: Dispatch<SetStateAction<ButtonStatus>>] => {\r\n  const [buttonStatus, setButtonStatus] = useState<ButtonStatus>(ButtonStatus.DISABLED)\r\n\r\n  useEffect(() => {\r\n    let mounted = true\r\n\r\n    if (mounted) {\r\n      switch (txEstimationStatus) {\r\n        case EstimationStatus.LOADING:\r\n          setButtonStatus(ButtonStatus.LOADING)\r\n          break\r\n        default:\r\n          setButtonStatus(ButtonStatus.READY)\r\n          break\r\n      }\r\n    }\r\n\r\n    return () => {\r\n      mounted = false\r\n    }\r\n  }, [txEstimationStatus])\r\n\r\n  return [buttonStatus, setButtonStatus]\r\n}\r\n","export default __webpack_public_path__ + \"static/media/info_red.2d444d88.svg\";","export type ParametersStatus = 'ENABLED' | 'DISABLED' | 'SAFE_DISABLED' | 'ETH_HIDDEN' | 'CANCEL_TRANSACTION'\r\n\r\nexport const areEthereumParamsVisible = (parametersStatus: ParametersStatus): boolean => {\r\n  return (\r\n    parametersStatus === 'ENABLED' || (parametersStatus !== 'ETH_HIDDEN' && parametersStatus !== 'CANCEL_TRANSACTION')\r\n  )\r\n}\r\n\r\nexport const areSafeParamsEnabled = (parametersStatus: ParametersStatus): boolean => {\r\n  return (\r\n    parametersStatus === 'ENABLED' ||\r\n    (parametersStatus !== 'SAFE_DISABLED' && parametersStatus !== 'CANCEL_TRANSACTION')\r\n  )\r\n}\r\n\r\nexport const ethereumTxParametersTitle = (isExecution: boolean): string => {\r\n  return `Owner transaction ${isExecution ? '(Execution)' : '(On-chain approval)'}`\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { getUserNonce } from 'src/logic/wallets/ethTransactions'\r\nimport { userAccountSelector } from 'src/logic/wallets/store/selectors'\r\nimport { getLastTx, getNewTxNonce } from 'src/logic/safe/store/actions/utils'\r\nimport { getGnosisSafeInstanceAt } from 'src/logic/contracts/safeContracts'\r\nimport { safeSelector } from 'src/logic/safe/store/selectors'\r\nimport { web3ReadOnly as web3 } from 'src/logic/wallets/getWeb3'\r\nimport { ParametersStatus } from 'src/routes/safe/components/Transactions/helpers/utils'\r\nimport { sameString } from 'src/utils/strings'\r\n\r\nexport type TxParameters = {\r\n  safeNonce: string | undefined\r\n  setSafeNonce: (safeNonce: string | undefined) => void\r\n  safeTxGas: string | undefined\r\n  setSafeTxGas: (gas: string | undefined) => void\r\n  ethNonce: string | undefined\r\n  setEthNonce: (ethNonce: string | undefined) => void\r\n  ethGasLimit: string | undefined\r\n  setEthGasLimit: (ethGasLimit: string | undefined) => void\r\n  ethGasPrice: string | undefined\r\n  setEthGasPrice: (ethGasPrice: string | undefined) => void\r\n  ethGasPriceInGWei: string | undefined\r\n}\r\n\r\ntype Props = {\r\n  parameterStatus?: ParametersStatus\r\n  initialSafeNonce?: string\r\n  initialSafeTxGas?: string\r\n  initialEthGasLimit?: string\r\n  initialEthGasPrice?: string\r\n}\r\n\r\n/**\r\n * This hooks is used to store tx parameter\r\n * It needs to be initialized calling setGasEstimation.\r\n */\r\nexport const useTransactionParameters = (props?: Props): TxParameters => {\r\n  const isCancelTransaction = sameString(props?.parameterStatus || 'ENABLED', 'CANCEL_TRANSACTION')\r\n  const connectedWalletAddress = useSelector(userAccountSelector)\r\n  const { address: safeAddress } = useSelector(safeSelector) || {}\r\n\r\n  // Safe Params\r\n  const [safeNonce, setSafeNonce] = useState<string | undefined>(props?.initialSafeNonce)\r\n  // SafeTxGas: for a new Tx call requiredTxGas, for an existing tx get it from the backend.\r\n  const [safeTxGas, setSafeTxGas] = useState<string | undefined>(isCancelTransaction ? '0' : props?.initialSafeTxGas)\r\n\r\n  // ETH Params\r\n  const [ethNonce, setEthNonce] = useState<string | undefined>() // we delegate it to the wallet\r\n  const [ethGasLimit, setEthGasLimit] = useState<string | undefined>(props?.initialEthGasLimit) // call execTx until it returns a number > 0\r\n  const [ethGasPrice, setEthGasPrice] = useState<string | undefined>(props?.initialEthGasPrice) // get fast gas price\r\n  const [ethGasPriceInGWei, setEthGasPriceInGWei] = useState<string | undefined>() // get fast gas price\r\n\r\n  // Get nonce for connected wallet\r\n  useEffect(() => {\r\n    const getNonce = async () => {\r\n      const res = await getUserNonce(connectedWalletAddress)\r\n      setEthNonce(res.toString())\r\n    }\r\n\r\n    if (connectedWalletAddress) {\r\n      getNonce()\r\n    }\r\n  }, [connectedWalletAddress])\r\n\r\n  // Get ETH gas price\r\n  useEffect(() => {\r\n    if (!ethGasPrice) {\r\n      setEthGasPriceInGWei(undefined)\r\n      return\r\n    }\r\n    if (isCancelTransaction) {\r\n      setEthGasPrice('0')\r\n      return\r\n    }\r\n    setEthGasPriceInGWei(web3.utils.toWei(ethGasPrice, 'Gwei'))\r\n  }, [ethGasPrice, isCancelTransaction])\r\n\r\n  // Calc safe nonce\r\n  useEffect(() => {\r\n    const getSafeNonce = async () => {\r\n      if (safeAddress) {\r\n        const safeInstance = getGnosisSafeInstanceAt(safeAddress)\r\n        const lastTx = await getLastTx(safeAddress)\r\n        const nonce = await getNewTxNonce(lastTx, safeInstance)\r\n        setSafeNonce(nonce)\r\n      }\r\n    }\r\n\r\n    if (safeNonce === undefined) {\r\n      getSafeNonce()\r\n    }\r\n  }, [safeAddress, safeNonce])\r\n\r\n  return {\r\n    safeNonce,\r\n    setSafeNonce,\r\n    safeTxGas,\r\n    setSafeTxGas,\r\n    ethNonce,\r\n    setEthNonce,\r\n    ethGasLimit,\r\n    setEthGasLimit,\r\n    ethGasPrice,\r\n    setEthGasPrice,\r\n    ethGasPriceInGWei,\r\n  }\r\n}\r\n"],"sourceRoot":""}