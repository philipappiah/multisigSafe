{"version":3,"sources":["routes/safe/components/Balances/SendModal/screens/ContractInteraction/Review/index.tsx","routes/safe/components/Balances/utils/setTokenImgToPlaceholder.ts","routes/safe/components/Balances/assets/token_placeholder.svg","routes/safe/components/Balances/SendModal/screens/ContractInteraction/utils/index.ts","routes/safe/components/Balances/SendModal/screens/ContractInteraction/style.ts","../node_modules/final-form-calculate/dist/final-form-calculate.es.js","routes/safe/components/Balances/SendModal/screens/ContractInteraction/Header/index.tsx"],"names":["useStyles","makeStyles","styles","nativeCoin","getNetworkInfo","ContractInteractionReview","onClose","onPrev","tx","explorerUrl","getExplorerInfo","contractAddress","classes","dispatch","useDispatch","safeAddress","useSelector","safeParamAddressFromStateSelector","useState","manualSafeTxGas","setManualSafeTxGas","manualGasPrice","setManualGasPrice","manualGasLimit","setManualGasLimit","addressName","state","getNameFromAddressBookSelector","address","txData","txAmount","txRecipient","txInfo","setTxInfo","useEstimateTransactionGas","safeTxGas","gasLimit","gasEstimation","gasPriceFormatted","gasCostFormatted","txEstimationExecutionStatus","isExecution","isOffChainSignature","isCreation","useEstimationStatus","buttonStatus","useEffect","value","toTokenUnit","decimals","data","trim","ethGasLimit","ethGasPrice","toString","closeEditModalCallback","txParameters","oldGasPrice","Number","newGasPrice","oldSafeTxGas","newSafeTxGas","toggleEditMode","subTitle","title","className","formContainer","margin","color","noMargin","size","style","letterSpacing","align","hash","name","showAvatar","showCopyBtn","xs","alt","height","onError","setImageToPlaceholder","src","getEthAsToken","logoUri","layout","justify","selectedMethod","inputs","map","index","type","key","generateFormFieldKey","signatureHash","getValueFromTxInputs","Fragment","outerData","onEdit","isTransactionCreation","isTransactionExecution","gasCostsContainer","Footer","withoutBorder","ButtonStatus","LOADING","Buttons","cancelButtonProps","onClick","text","confirmButtonProps","createTransaction","to","valueInWei","txNonce","safeNonce","undefined","ethParameters","notifiedTransaction","TX_NOTIFICATION_TYPES","STANDARD_TX","console","error","submitTx","status","EstimationStatus","testId","currentTarget","onerror","TokenPlaceholder","NO_CONTRACT","ensResolver","createDecorator","field","updates","a","isValidEnsName","isValidCryptoDomainName","getAddressFromDomain","resolvedAddress","message","formMutators","setMax","args","utils","changeValue","setContractAddress","setSelectedMethod","lastFormState","values","setCallResults","setAbiValue","isAddress","indexOf","isBoolean","isUint","isInt","isByte","isArrayParameter","parameter","test","handleSubmitError","hasOwnProperty","reason","FORM_ERROR","keyType","extractMethodArgs","JSON","parse","isInteger","BigNumber","err","getParsedJSONOrArrayFromString","createTxObject","method","contract","getWeb3","eth","Contract","methods","isReadMethod","action","replace","String","createStyles","heading","padding","md","lg","justifyContent","boxSizing","maxHeight","annotation","secondaryText","marginRight","marginLeft","headingText","fontSize","closeIcon","width","qrCodeBtn","cursor","wordBreak","sm","borderRadius","border","minHeight","overflow","fontFamily","fontStretch","lineHeight","buttonRow","gap","dataInput","selectAddress","fullWidth","backgroundColor","background","isPromise","obj","then","tripleEquals","b","_len","arguments","length","calculations","Array","_key","form","previousValues","subscribe","_ref","batch","runUpdates","isEqual","next","getIn","previous","results","resolved","Object","keys","forEach","destField","change","result","update","fields","getRegisteredFields","_ref2","matches","isArray","findIndex","f","RegExp","fieldName","Header","grow","weight","disableRipple"],"mappings":"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","file":"static/js/42.a05192ab.chunk.js","sourcesContent":["import { EthHashInfo } from '@gnosis.pm/safe-react-components'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { getNetworkInfo, getExplorerInfo } from 'src/config'\r\nimport { toTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\r\nimport Block from 'src/components/layout/Block'\r\nimport Col from 'src/components/layout/Col'\r\nimport Hairline from 'src/components/layout/Hairline'\r\nimport Img from 'src/components/layout/Img'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Row from 'src/components/layout/Row'\r\nimport { AbiItemExtended } from 'src/logic/contractInteraction/sources/ABIService'\r\nimport { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions'\r\nimport { getEthAsToken } from 'src/logic/tokens/utils/tokenHelpers'\r\nimport { styles } from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/style'\r\nimport { Header } from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/Header'\r\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\r\nimport { createTransaction } from 'src/logic/safe/store/actions/createTransaction'\r\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\r\nimport { TxParametersDetail } from 'src/routes/safe/components/Transactions/helpers/TxParametersDetail'\r\n\r\nimport { safeParamAddressFromStateSelector } from 'src/logic/safe/store/selectors'\r\nimport {\r\n  generateFormFieldKey,\r\n  getValueFromTxInputs,\r\n} from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/utils'\r\nimport { useEstimateTransactionGas, EstimationStatus } from 'src/logic/hooks/useEstimateTransactionGas'\r\nimport { getNameFromAddressBookSelector } from 'src/logic/addressBook/store/selectors'\r\nimport { useEstimationStatus } from 'src/logic/hooks/useEstimationStatus'\r\nimport { ButtonStatus, Modal } from 'src/components/Modal'\r\nimport { TransactionFees } from 'src/components/TransactionsFees'\r\nimport { EditableTxParameters } from 'src/routes/safe/components/Transactions/helpers/EditableTxParameters'\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\nexport type TransactionReviewType = {\r\n  abi?: string\r\n  contractAddress?: string\r\n  data?: string\r\n  value?: string\r\n  selectedMethod?: AbiItemExtended\r\n}\r\n\r\ntype Props = {\r\n  onClose: () => void\r\n  onPrev: () => void\r\n  onEditTxParameters: () => void\r\n  tx: TransactionReviewType\r\n  txParameters: TxParameters\r\n}\r\n\r\nconst { nativeCoin } = getNetworkInfo()\r\n\r\nconst ContractInteractionReview = ({ onClose, onPrev, tx }: Props): React.ReactElement => {\r\n  const explorerUrl = getExplorerInfo(tx.contractAddress as string)\r\n  const classes = useStyles()\r\n  const dispatch = useDispatch()\r\n  const safeAddress = useSelector(safeParamAddressFromStateSelector)\r\n  const [manualSafeTxGas, setManualSafeTxGas] = useState(0)\r\n  const [manualGasPrice, setManualGasPrice] = useState<string | undefined>()\r\n  const [manualGasLimit, setManualGasLimit] = useState<string | undefined>()\r\n  const addressName = useSelector((state) =>\r\n    getNameFromAddressBookSelector(state, { address: tx.contractAddress as string }),\r\n  )\r\n\r\n  const [txInfo, setTxInfo] = useState<{\r\n    txRecipient: string\r\n    txData: string\r\n    txAmount: string\r\n  }>({ txData: '', txAmount: '', txRecipient: '' })\r\n\r\n  const {\r\n    gasLimit,\r\n    gasEstimation,\r\n    gasPriceFormatted,\r\n    gasCostFormatted,\r\n    txEstimationExecutionStatus,\r\n    isExecution,\r\n    isOffChainSignature,\r\n    isCreation,\r\n  } = useEstimateTransactionGas({\r\n    txRecipient: txInfo?.txRecipient,\r\n    txAmount: txInfo?.txAmount,\r\n    txData: txInfo?.txData,\r\n    safeTxGas: manualSafeTxGas,\r\n    manualGasPrice,\r\n    manualGasLimit,\r\n  })\r\n\r\n  const [buttonStatus] = useEstimationStatus(txEstimationExecutionStatus)\r\n\r\n  useEffect(() => {\r\n    setTxInfo({\r\n      txRecipient: tx.contractAddress as string,\r\n      txAmount: tx.value ? toTokenUnit(tx.value, nativeCoin.decimals) : '0',\r\n      txData: tx.data ? tx.data.trim() : '',\r\n    })\r\n  }, [tx.contractAddress, tx.value, tx.data, safeAddress])\r\n\r\n  const submitTx = (txParameters: TxParameters) => {\r\n    if (safeAddress && txInfo) {\r\n      dispatch(\r\n        createTransaction({\r\n          safeAddress,\r\n          to: txInfo?.txRecipient,\r\n          valueInWei: txInfo?.txAmount,\r\n          txData: txInfo?.txData,\r\n          txNonce: txParameters.safeNonce,\r\n          safeTxGas: txParameters.safeTxGas ? Number(txParameters.safeTxGas) : undefined,\r\n          ethParameters: txParameters,\r\n          notifiedTransaction: TX_NOTIFICATION_TYPES.STANDARD_TX,\r\n        }),\r\n      )\r\n    } else {\r\n      console.error('There was an error trying to submit the transaction, the safeAddress was not found')\r\n    }\r\n    onClose()\r\n  }\r\n\r\n  const closeEditModalCallback = (txParameters: TxParameters) => {\r\n    const oldGasPrice = Number(gasPriceFormatted)\r\n    const newGasPrice = Number(txParameters.ethGasPrice)\r\n    const oldSafeTxGas = Number(gasEstimation)\r\n    const newSafeTxGas = Number(txParameters.safeTxGas)\r\n\r\n    if (newGasPrice && oldGasPrice !== newGasPrice) {\r\n      setManualGasPrice(txParameters.ethGasPrice)\r\n    }\r\n\r\n    if (txParameters.ethGasLimit && gasLimit !== txParameters.ethGasLimit) {\r\n      setManualGasLimit(txParameters.ethGasLimit)\r\n    }\r\n\r\n    if (newSafeTxGas && oldSafeTxGas !== newSafeTxGas) {\r\n      setManualSafeTxGas(newSafeTxGas)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <EditableTxParameters\r\n      isOffChainSignature={isOffChainSignature}\r\n      isExecution={isExecution}\r\n      ethGasLimit={gasLimit}\r\n      ethGasPrice={gasPriceFormatted}\r\n      safeTxGas={gasEstimation.toString()}\r\n      closeEditModalCallback={closeEditModalCallback}\r\n    >\r\n      {(txParameters, toggleEditMode) => (\r\n        <>\r\n          <Header onClose={onClose} subTitle=\"2 of 2\" title=\"Contract interaction\" />\r\n          <Hairline />\r\n          <Block className={classes.formContainer}>\r\n            <Row margin=\"xs\">\r\n              <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                Contract Address\r\n              </Paragraph>\r\n            </Row>\r\n            <Row align=\"center\" margin=\"md\">\r\n              <EthHashInfo\r\n                hash={tx.contractAddress as string}\r\n                name={addressName}\r\n                showAvatar\r\n                showCopyBtn\r\n                explorerUrl={explorerUrl}\r\n              />\r\n            </Row>\r\n            <Row margin=\"xs\">\r\n              <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                Value\r\n              </Paragraph>\r\n            </Row>\r\n            <Row align=\"center\" margin=\"md\">\r\n              <Col xs={1}>\r\n                <Img alt=\"Ether\" height={28} onError={setImageToPlaceholder} src={getEthAsToken('0').logoUri} />\r\n              </Col>\r\n              <Col layout=\"column\" xs={11}>\r\n                <Block justify=\"left\">\r\n                  <Paragraph className={classes.value} noMargin size=\"md\" style={{ margin: 0 }}>\r\n                    {tx.value || 0}\r\n                    {' ' + nativeCoin.name}\r\n                  </Paragraph>\r\n                </Block>\r\n              </Col>\r\n            </Row>\r\n            <Row margin=\"xs\">\r\n              <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                Method\r\n              </Paragraph>\r\n            </Row>\r\n            <Row align=\"center\" margin=\"md\">\r\n              <Paragraph className={classes.value} size=\"md\" style={{ margin: 0 }}>\r\n                {tx.selectedMethod?.name}\r\n              </Paragraph>\r\n            </Row>\r\n            {tx.selectedMethod?.inputs?.map(({ name, type }, index) => {\r\n              const key = generateFormFieldKey(type, tx.selectedMethod?.signatureHash || '', index)\r\n              const value: string = getValueFromTxInputs(key, type, tx)\r\n\r\n              return (\r\n                <React.Fragment key={key}>\r\n                  <Row margin=\"xs\">\r\n                    <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                      {name} ({type})\r\n                    </Paragraph>\r\n                  </Row>\r\n                  <Row align=\"center\" margin=\"md\">\r\n                    <Paragraph className={classes.value} noMargin size=\"md\" style={{ margin: 0 }}>\r\n                      {value}\r\n                    </Paragraph>\r\n                  </Row>\r\n                </React.Fragment>\r\n              )\r\n            })}\r\n            <Row margin=\"xs\">\r\n              <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                Data (hex encoded)\r\n              </Paragraph>\r\n            </Row>\r\n            <Row align=\"center\" margin=\"md\">\r\n              <Col className={classes.outerData}>\r\n                <Row className={classes.data} size=\"md\">\r\n                  {tx.data}\r\n                </Row>\r\n              </Col>\r\n            </Row>\r\n\r\n            {/* Tx Parameters */}\r\n            <TxParametersDetail\r\n              txParameters={txParameters}\r\n              onEdit={toggleEditMode}\r\n              isTransactionCreation={isCreation}\r\n              isTransactionExecution={isExecution}\r\n              isOffChainSignature={isOffChainSignature}\r\n            />\r\n          </Block>\r\n          <div className={classes.gasCostsContainer}>\r\n            <TransactionFees\r\n              gasCostFormatted={gasCostFormatted}\r\n              isExecution={isExecution}\r\n              isCreation={isCreation}\r\n              isOffChainSignature={isOffChainSignature}\r\n              txEstimationExecutionStatus={txEstimationExecutionStatus}\r\n            />\r\n          </div>\r\n\r\n          <Modal.Footer withoutBorder={buttonStatus !== ButtonStatus.LOADING}>\r\n            <Modal.Footer.Buttons\r\n              cancelButtonProps={{ onClick: onPrev, text: 'Back' }}\r\n              confirmButtonProps={{\r\n                onClick: () => submitTx(txParameters),\r\n                status: buttonStatus,\r\n                text: txEstimationExecutionStatus === EstimationStatus.LOADING ? 'Estimating' : undefined,\r\n                testId: 'submit-tx-btn',\r\n              }}\r\n            />\r\n          </Modal.Footer>\r\n        </>\r\n      )}\r\n    </EditableTxParameters>\r\n  )\r\n}\r\n\r\nexport default ContractInteractionReview\r\n","import { SyntheticEvent } from 'react'\r\n\r\nimport TokenPlaceholder from 'src/routes/safe/components/Balances/assets/token_placeholder.svg'\r\n\r\nexport const setImageToPlaceholder = (error: SyntheticEvent<HTMLImageElement, Event>): void => {\r\n  error.currentTarget.onerror = null\r\n  error.currentTarget.src = TokenPlaceholder\r\n}\r\n","export default __webpack_public_path__ + \"static/media/token_placeholder.c1abe466.svg\";","import { FORM_ERROR, Mutator, SubmissionErrors } from 'final-form'\r\nimport createDecorator from 'final-form-calculate'\r\nimport { ContractSendMethod } from 'web3-eth-contract'\r\n\r\nimport { AbiItemExtended } from 'src/logic/contractInteraction/sources/ABIService'\r\nimport { getAddressFromDomain, getWeb3 } from 'src/logic/wallets/getWeb3'\r\nimport { TransactionReviewType } from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/Review'\r\nimport { isValidCryptoDomainName, isValidEnsName } from 'src/logic/wallets/ethAddresses'\r\nimport { BigNumber } from 'bignumber.js'\r\n\r\nexport const NO_CONTRACT = 'no contract'\r\n\r\nexport const ensResolver = createDecorator({\r\n  field: 'contractAddress',\r\n  updates: {\r\n    contractAddress: async (contractAddress) => {\r\n      try {\r\n        const resolvedAddress =\r\n          (isValidEnsName(contractAddress) || isValidCryptoDomainName(contractAddress)) &&\r\n          (await getAddressFromDomain(contractAddress))\r\n\r\n        if (resolvedAddress) {\r\n          return resolvedAddress\r\n        }\r\n\r\n        return contractAddress\r\n      } catch (e) {\r\n        console.error(e.message)\r\n        return contractAddress\r\n      }\r\n    },\r\n  },\r\n})\r\n\r\nexport const formMutators: Record<string, Mutator<{ selectedMethod: { name: string } }>> = {\r\n  setMax: (args, state, utils) => {\r\n    utils.changeValue(state, 'value', () => args[0])\r\n  },\r\n  setContractAddress: (args, state, utils) => {\r\n    utils.changeValue(state, 'contractAddress', () => args[0])\r\n  },\r\n  setSelectedMethod: (args, state, utils) => {\r\n    const modified =\r\n      state.lastFormState?.values.selectedMethod && state.lastFormState.values.selectedMethod.name !== args[0].name\r\n\r\n    if (modified) {\r\n      utils.changeValue(state, 'callResults', () => '')\r\n      utils.changeValue(state, 'value', () => '')\r\n    }\r\n\r\n    utils.changeValue(state, 'selectedMethod', () => args[0])\r\n  },\r\n  setCallResults: (args, state, utils) => {\r\n    utils.changeValue(state, 'callResults', () => args[0])\r\n  },\r\n  setAbiValue: (args, state, utils) => {\r\n    utils.changeValue(state, 'abi', () => args[0])\r\n  },\r\n}\r\n\r\nexport const isAddress = (type: string): boolean => type.indexOf('address') === 0\r\nexport const isBoolean = (type: string): boolean => type.indexOf('bool') === 0\r\nexport const isString = (type: string): boolean => type.indexOf('string') === 0\r\nexport const isUint = (type: string): boolean => type.indexOf('uint') === 0\r\nexport const isInt = (type: string): boolean => type.indexOf('int') === 0\r\nexport const isByte = (type: string): boolean => type.indexOf('byte') === 0\r\n\r\nexport const isArrayParameter = (parameter: string): boolean => /(\\[\\d*])+$/.test(parameter)\r\nexport const getParsedJSONOrArrayFromString = (parameter: string): (string | number)[] | null => {\r\n  try {\r\n    const arrayResult = JSON.parse(parameter)\r\n    return arrayResult.map((value) => {\r\n      if (Number.isInteger(value)) {\r\n        return new BigNumber(value).toString()\r\n      }\r\n      return value\r\n    })\r\n  } catch (err) {\r\n    return null\r\n  }\r\n}\r\n\r\nexport const handleSubmitError = (error: SubmissionErrors, values: Record<string, string>): Record<string, string> => {\r\n  for (const key in values) {\r\n    if (values.hasOwnProperty(key) && error !== undefined && values[key] === error.value) {\r\n      return { [key]: error.reason }\r\n    }\r\n  }\r\n\r\n  // .call() failed and we're logging a generic error\r\n  return { [FORM_ERROR]: error ? error.message : undefined }\r\n}\r\n\r\nexport const generateFormFieldKey = (type: string, signatureHash: string, index: number): string => {\r\n  const keyType = isArrayParameter(type) ? 'arrayParam' : type\r\n  return `methodInput-${signatureHash}_${index}_${keyType}`\r\n}\r\n\r\nconst extractMethodArgs = (signatureHash: string, values: Record<string, string>) => ({ type }, index) => {\r\n  const key = generateFormFieldKey(type, signatureHash, index)\r\n\r\n  return getParsedJSONOrArrayFromString(values[key]) || values[key]\r\n}\r\n\r\nexport const createTxObject = (\r\n  method: AbiItemExtended,\r\n  contractAddress: string,\r\n  values: Record<string, string>,\r\n): ContractSendMethod => {\r\n  const web3 = getWeb3()\r\n  const contract = new web3.eth.Contract([method], contractAddress)\r\n  const { inputs, name = '', signatureHash } = method\r\n  const args = inputs?.map(extractMethodArgs(signatureHash, values)) || []\r\n\r\n  return contract.methods[name](...args)\r\n}\r\n\r\nexport const isReadMethod = (method: AbiItemExtended): boolean => method && method.action === 'read'\r\n\r\nexport const getValueFromTxInputs = (key: string, type: string, tx: TransactionReviewType): string => {\r\n  if (isArrayParameter(type)) {\r\n    key = key.replace('[]', '')\r\n  }\r\n\r\n  let value = tx[key]\r\n\r\n  if (type === 'bool') {\r\n    value = String(value)\r\n  }\r\n\r\n  return value\r\n}\r\n","import { lg, md, secondaryText, sm, border, background } from 'src/theme/variables'\r\nimport { createStyles } from '@material-ui/core'\r\n\r\nexport const styles = createStyles({\r\n  heading: {\r\n    padding: `${md} ${lg}`,\r\n    justifyContent: 'flex-start',\r\n    boxSizing: 'border-box',\r\n    maxHeight: '74px',\r\n  },\r\n  annotation: {\r\n    letterSpacing: '-1px',\r\n    color: secondaryText,\r\n    marginRight: 'auto',\r\n    marginLeft: '20px',\r\n  },\r\n  headingText: {\r\n    fontSize: lg,\r\n  },\r\n  closeIcon: {\r\n    height: '35px',\r\n    width: '35px',\r\n  },\r\n  qrCodeBtn: {\r\n    cursor: 'pointer',\r\n  },\r\n  formContainer: {\r\n    padding: `${md} ${lg}`,\r\n    wordBreak: 'break-word',\r\n  },\r\n  value: {\r\n    marginLeft: sm,\r\n  },\r\n  outerData: {\r\n    borderRadius: '5px',\r\n    border: `1px solid ${border}`,\r\n    padding: '11px',\r\n    minHeight: '21px',\r\n  },\r\n  data: {\r\n    wordBreak: 'break-all',\r\n    overflow: 'auto',\r\n    fontSize: '14px',\r\n    fontFamily: 'Averta',\r\n    maxHeight: '100px',\r\n    letterSpacing: 'normal',\r\n    fontStretch: 'normal',\r\n    lineHeight: '1.43',\r\n  },\r\n  buttonRow: {\r\n    height: '84px',\r\n    justifyContent: 'center',\r\n    gap: '16px',\r\n  },\r\n  dataInput: {\r\n    '& TextField-root-294': {\r\n      lineHeight: 'auto',\r\n      border: 'green',\r\n    },\r\n  },\r\n  selectAddress: {\r\n    cursor: 'pointer',\r\n  },\r\n  fullWidth: {\r\n    justifyContent: 'space-between',\r\n  },\r\n  gasCostsContainer: {\r\n    backgroundColor: background,\r\n    padding: `0 ${lg}`,\r\n  },\r\n})\r\n","import { getIn } from 'final-form';\n\nvar isPromise = (function (obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n});\n\n//      \n\nvar tripleEquals = function tripleEquals(a, b) {\n  return a === b;\n};\n\nvar createDecorator = function createDecorator() {\n  for (var _len = arguments.length, calculations = new Array(_len), _key = 0; _key < _len; _key++) {\n    calculations[_key] = arguments[_key];\n  }\n\n  return function (form) {\n    var previousValues = {};\n    var unsubscribe = form.subscribe(function (_ref) {\n      var values = _ref.values;\n      form.batch(function () {\n        var runUpdates = function runUpdates(field, isEqual, updates) {\n          var next = values && getIn(values, field);\n          var previous = previousValues && getIn(previousValues, field);\n\n          if (!isEqual(next, previous)) {\n            if (typeof updates === 'function') {\n              var results = updates(next, field, values, previousValues);\n\n              if (isPromise(results)) {\n                results.then(function (resolved) {\n                  Object.keys(resolved).forEach(function (destField) {\n                    form.change(destField, resolved[destField]);\n                  });\n                });\n              } else {\n                Object.keys(results).forEach(function (destField) {\n                  form.change(destField, results[destField]);\n                });\n              }\n            } else {\n              Object.keys(updates).forEach(function (destField) {\n                var update = updates[destField];\n                var result = update(next, values, previousValues);\n\n                if (isPromise(result)) {\n                  result.then(function (resolved) {\n                    form.change(destField, resolved);\n                  });\n                } else {\n                  form.change(destField, result);\n                }\n              });\n            }\n          }\n        };\n\n        var fields = form.getRegisteredFields();\n        calculations.forEach(function (_ref2) {\n          var field = _ref2.field,\n              isEqual = _ref2.isEqual,\n              updates = _ref2.updates;\n\n          if (typeof field === 'string') {\n            runUpdates(field, isEqual || tripleEquals, updates);\n          } else {\n            // field is a either array or regex\n            var matches = Array.isArray(field) ? function (name) {\n              return ~field.indexOf(name) || field.findIndex(function (f) {\n                return f instanceof RegExp && f.test(name);\n              }) !== -1;\n            } : function (name) {\n              return field.test(name);\n            };\n            fields.forEach(function (fieldName) {\n              if (matches(fieldName)) {\n                runUpdates(fieldName, isEqual || tripleEquals, updates);\n              }\n            });\n          }\n        });\n        previousValues = values;\n      });\n    }, {\n      values: true\n    });\n    return unsubscribe;\n  };\n};\n\n//\n\nexport default createDecorator;\n","import IconButton from '@material-ui/core/IconButton'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Close from '@material-ui/icons/Close'\r\nimport React, { ReactElement } from 'react'\r\n\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Row from 'src/components/layout/Row'\r\nimport { styles } from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/style'\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\ninterface HeaderProps {\r\n  onClose: () => void\r\n  subTitle: string\r\n  title: string\r\n}\r\n\r\nexport const Header = ({ onClose, subTitle, title }: HeaderProps): ReactElement => {\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <Row align=\"center\" className={classes.heading} grow>\r\n      <Paragraph className={classes.headingText} noMargin weight=\"bolder\">\r\n        {title}\r\n      </Paragraph>\r\n      <Paragraph className={classes.annotation}>{subTitle}</Paragraph>\r\n      <IconButton disableRipple onClick={onClose}>\r\n        <Close className={classes.closeIcon} />\r\n      </IconButton>\r\n    </Row>\r\n  )\r\n}\r\n"],"sourceRoot":""}