{"version":3,"sources":["routes/safe/components/Balances/SendModal/screens/ContractInteraction/SendCustomTx/style.ts","routes/safe/components/Balances/SendModal/screens/ContractInteraction/SendCustomTx/index.tsx","components/forms/Field/index.tsx","components/forms/TextField/index.tsx","components/forms/GnoForm/index.tsx","components/layout/Bold/index.tsx","assets/icons/qrcode.svg","components/Divider/index.tsx","components/ScanQRModal/style.ts","components/ScanQRModal/index.tsx","routes/safe/components/Balances/SendModal/SafeInfo/index.tsx","routes/safe/components/Balances/SendModal/screens/AddressBookInput/style.ts","routes/safe/components/Balances/SendModal/screens/AddressBookInput/index.tsx","components/forms/TextAreaField/index.tsx"],"names":["styles","createStyles","heading","padding","md","lg","justifyContent","boxSizing","maxHeight","annotation","letterSpacing","color","marginRight","marginLeft","manage","fontSize","closeIcon","height","width","qrCodeBtn","cursor","formContainer","buttonRow","gap","dataInput","lineHeight","border","selectAddress","useStyles","makeStyles","nativeCoin","getNetworkInfo","SendCustomTx","initialValues","onClose","onNext","contractAddress","switchMethod","isABI","classes","ethBalance","useSelector","safeSelector","useState","qrModalOpen","setQrModalOpen","address","name","selectedEntry","setSelectedEntry","isValidAddress","setIsValidAddress","saveForm","values","a","handleSubmit","submit","data","value","openQrModal","closeQrModal","formMutators","setMax","args","state","utils","changeValue","setRecipient","Row","align","className","grow","Paragraph","noMargin","weight","IconButton","disableRipple","onClick","Hairline","GnoForm","subscription","submitting","pristine","onSubmit","mutators","shouldDisableSubmitButton","handleScan","scannedAddress","startsWith","replace","Block","SafeInfo","Divider","withArrow","onKeyDown","e","sameString","key","role","tabIndex","margin","size","style","Col","xs","hash","showAvatar","showCopyBtn","explorerUrl","getExplorerInfo","fieldMutator","label","center","middle","Img","alt","src","QRIcon","between","ButtonLink","Field","component","TextField","inputAdornment","endAdornment","InputAdornment","position","placeholder","text","type","validate","composeValidators","mustBeFloat","maxValue","minValue","TextAreaField","mustBeHexData","Switch","onChange","checked","Modal","Footer","Buttons","cancelButtonProps","confirmButtonProps","disabled","testId","ScanQRModal","isOpen","onScan","GnoField","props","overflowStyle","overflow","root","paddingTop","paddingBottom","input","restInput","meta","multiline","rows","rest","helperText","undefined","showError","touched","valid","hasError","error","modifiedSinceLastSubmit","submitError","errorMessage","isInactiveAndPristineOrUntouched","active","isInvalidAndUntouched","disableUnderline","inputRoot","statusClasses","inputProps","autoComplete","inputRootProps","InputProps","stylesBasedOn","flexDirection","flex","children","decorators","validation","render","data-testid","validating","form","Bold","this","React","Wrapper","styled","div","StyledDivider","DividerSRC","loaderContainer","close","secondaryText","detailsContainer","backgroundColor","background","button","sm","fileUploadModalOpen","setFileUploadModalOpen","setError","cameraBlocked","setCameraBlocked","scannerRef","openImageDialog","current","useEffect","onFileScannedResolve","successData","console","description","handleClose","open","title","layout","legacyMode","onError","err","ref","facingMode","Button","minWidth","variant","StyledBlock","safeAddress","safeName","safeNameSelector","symbol","useTextFieldLabelStyle","borderRadius","useTextFieldInputStyle","chainId","getNetworkId","BaseAddressBookInput","addressBookEntries","setValidationText","validationText","updateAddressInfo","addressEntry","validateAddress","addressErrorMessage","mustBeEthereumAddress","filteredEntries","filterAddressEntries","inputValue","length","onInputChange","_","reason","normalizedValue","trimSpaces","isFeatureEnabled","FEATURES","DOMAIN_LOOKUP","isValidEnsName","isValidCryptoDomainName","getAddressFromDomain","logError","Errors","_101","message","validatedAddress","labelStyles","inputStyles","Autocomplete","openOnFocus","filterOptions","freeSolo","options","id","renderInput","params","autoFocus","fullWidth","InputLabelProps","shrink","required","getOptionLabel","renderOption","display","flexGrow","AddressBookInput","addressBookSelector","errorMsg","ContractsAddressBookInput","setFilteredEntries","filterContractAddressBookEntries","filteredADBK","filterContractAddresses","onSetSelectedEntry","mustBeEthereumContractAddress","contractAddressErrorMessage","textarea","alignItems"],"mappings":"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","file":"static/js/40.9ba7f86e.chunk.js","sourcesContent":["import { lg, md } from 'src/theme/variables'\r\nimport { createStyles } from '@material-ui/core'\r\n\r\nexport const styles = createStyles({\r\n  heading: {\r\n    padding: `${md} ${lg}`,\r\n    justifyContent: 'flex-start',\r\n    boxSizing: 'border-box',\r\n    maxHeight: '74px',\r\n  },\r\n  annotation: {\r\n    letterSpacing: '-1px',\r\n    color: '#a2a8ba',\r\n    marginRight: 'auto',\r\n    marginLeft: '20px',\r\n  },\r\n  manage: {\r\n    fontSize: lg,\r\n  },\r\n  closeIcon: {\r\n    height: '35px',\r\n    width: '35px',\r\n  },\r\n  qrCodeBtn: {\r\n    cursor: 'pointer',\r\n  },\r\n  formContainer: {\r\n    padding: `${md} ${lg}`,\r\n  },\r\n  buttonRow: {\r\n    height: '84px',\r\n    justifyContent: 'center',\r\n    gap: '16px',\r\n  },\r\n  dataInput: {\r\n    '& TextField-root-294': {\r\n      lineHeight: 'auto',\r\n      border: 'green',\r\n    },\r\n  },\r\n  selectAddress: {\r\n    cursor: 'pointer',\r\n  },\r\n})\r\n","import React, { useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport InputAdornment from '@material-ui/core/InputAdornment'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport Close from '@material-ui/icons/Close'\r\n\r\nimport Divider from 'src/components/Divider'\r\nimport QRIcon from 'src/assets/icons/qrcode.svg'\r\nimport Field from 'src/components/forms/Field'\r\nimport GnoForm from 'src/components/forms/GnoForm'\r\nimport { TextAreaField } from 'src/components/forms/TextAreaField'\r\nimport TextField from 'src/components/forms/TextField'\r\nimport { composeValidators, maxValue, minValue, mustBeFloat, mustBeHexData } from 'src/components/forms/validator'\r\nimport Block from 'src/components/layout/Block'\r\nimport ButtonLink from 'src/components/layout/ButtonLink'\r\nimport Col from 'src/components/layout/Col'\r\nimport Hairline from 'src/components/layout/Hairline'\r\nimport Img from 'src/components/layout/Img'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Row from 'src/components/layout/Row'\r\nimport { Modal } from 'src/components/Modal'\r\nimport { ScanQRModal } from 'src/components/ScanQRModal'\r\nimport { safeSelector } from 'src/logic/safe/store/selectors'\r\nimport SafeInfo from 'src/routes/safe/components/Balances/SendModal/SafeInfo'\r\nimport { ContractsAddressBookInput } from 'src/routes/safe/components/Balances/SendModal/screens/AddressBookInput'\r\nimport { sameString } from 'src/utils/strings'\r\n\r\nimport { styles } from './style'\r\nimport { getExplorerInfo, getNetworkInfo } from 'src/config'\r\nimport { EthHashInfo } from '@gnosis.pm/safe-react-components'\r\n\r\nexport interface CreatedTx {\r\n  contractAddress: string\r\n  data: string\r\n  value: string | number\r\n}\r\n\r\nexport type CustomTxProps = {\r\n  contractAddress?: string\r\n}\r\n\r\ntype Props = {\r\n  initialValues: CustomTxProps\r\n  onClose: () => void\r\n  onNext: (tx: CreatedTx, submit: boolean) => void\r\n  isABI: boolean\r\n  switchMethod: () => void\r\n  contractAddress?: string\r\n}\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\nconst { nativeCoin } = getNetworkInfo()\r\n\r\nconst SendCustomTx: React.FC<Props> = ({ initialValues, onClose, onNext, contractAddress, switchMethod, isABI }) => {\r\n  const classes = useStyles()\r\n  const { ethBalance } = useSelector(safeSelector) || {}\r\n  const [qrModalOpen, setQrModalOpen] = useState<boolean>(false)\r\n  const [selectedEntry, setSelectedEntry] = useState<{ address?: string; name: string } | null>({\r\n    address: contractAddress || initialValues.contractAddress,\r\n    name: '',\r\n  })\r\n  const [isValidAddress, setIsValidAddress] = useState<boolean>(true)\r\n\r\n  const saveForm = async (values) => {\r\n    await handleSubmit(values, false)\r\n    switchMethod()\r\n  }\r\n\r\n  const handleSubmit = (values: any, submit = true) => {\r\n    if (values.data || values.value) {\r\n      onNext(values, submit)\r\n    }\r\n  }\r\n\r\n  const openQrModal = () => {\r\n    setQrModalOpen(true)\r\n  }\r\n\r\n  const closeQrModal = () => {\r\n    setQrModalOpen(false)\r\n  }\r\n\r\n  const formMutators = {\r\n    setMax: (args, state, utils) => {\r\n      utils.changeValue(state, 'value', () => ethBalance)\r\n    },\r\n    setRecipient: (args, state, utils) => {\r\n      utils.changeValue(state, 'contractAddress', () => args[0])\r\n    },\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Row align=\"center\" className={classes.heading} grow>\r\n        <Paragraph className={classes.manage} noMargin weight=\"bolder\">\r\n          Contract interaction\r\n        </Paragraph>\r\n        <Paragraph className={classes.annotation}>1 of 2</Paragraph>\r\n        <IconButton disableRipple onClick={onClose}>\r\n          <Close className={classes.closeIcon} />\r\n        </IconButton>\r\n      </Row>\r\n      <Hairline />\r\n      <GnoForm\r\n        formMutators={formMutators}\r\n        initialValues={initialValues}\r\n        subscription={{ submitting: true, pristine: true, values: true }}\r\n        onSubmit={handleSubmit}\r\n      >\r\n        {(...args) => {\r\n          const mutators = args[3]\r\n          const pristine = args[2].pristine\r\n          let shouldDisableSubmitButton = !isValidAddress\r\n          if (selectedEntry) {\r\n            shouldDisableSubmitButton = !selectedEntry.address\r\n          }\r\n\r\n          const handleScan = (value) => {\r\n            let scannedAddress = value\r\n\r\n            if (scannedAddress.startsWith('ethereum:')) {\r\n              scannedAddress = scannedAddress.replace('ethereum:', '')\r\n            }\r\n\r\n            mutators.setRecipient(scannedAddress)\r\n            closeQrModal()\r\n          }\r\n\r\n          return (\r\n            <>\r\n              <Block className={classes.formContainer}>\r\n                <SafeInfo />\r\n                <Divider withArrow />\r\n                {selectedEntry && selectedEntry.address ? (\r\n                  <div\r\n                    onKeyDown={(e) => {\r\n                      if (sameString(e.key, 'Tab')) {\r\n                        return\r\n                      }\r\n                      setSelectedEntry(null)\r\n                    }}\r\n                    onClick={() => {\r\n                      setSelectedEntry(null)\r\n                    }}\r\n                    role=\"listbox\"\r\n                    tabIndex={0}\r\n                  >\r\n                    <Row margin=\"xs\">\r\n                      <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                        Contract address\r\n                      </Paragraph>\r\n                    </Row>\r\n                    <Row align=\"center\" margin=\"md\">\r\n                      <Col xs={12}>\r\n                        <EthHashInfo\r\n                          hash={selectedEntry.address}\r\n                          name={selectedEntry.name}\r\n                          showAvatar\r\n                          showCopyBtn\r\n                          explorerUrl={getExplorerInfo(selectedEntry.address)}\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                  </div>\r\n                ) : (\r\n                  <>\r\n                    <Row margin=\"md\">\r\n                      <Col xs={11}>\r\n                        <ContractsAddressBookInput\r\n                          fieldMutator={mutators.setRecipient}\r\n                          pristine={pristine}\r\n                          setIsValidAddress={setIsValidAddress}\r\n                          setSelectedEntry={setSelectedEntry}\r\n                          label=\"Contract address\"\r\n                        />\r\n                      </Col>\r\n                      <Col center=\"xs\" className={classes} middle=\"xs\" xs={1}>\r\n                        <Img\r\n                          alt=\"Scan QR\"\r\n                          className={classes.qrCodeBtn}\r\n                          height={20}\r\n                          onClick={() => {\r\n                            openQrModal()\r\n                          }}\r\n                          role=\"button\"\r\n                          src={QRIcon}\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                  </>\r\n                )}\r\n                <Row margin=\"xs\">\r\n                  <Col between=\"lg\">\r\n                    <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                      Value\r\n                    </Paragraph>\r\n                    <ButtonLink onClick={mutators.setMax} weight=\"bold\">\r\n                      Send max\r\n                    </ButtonLink>\r\n                  </Col>\r\n                </Row>\r\n                <Row margin=\"md\">\r\n                  <Col>\r\n                    <Field\r\n                      component={TextField}\r\n                      inputAdornment={{\r\n                        endAdornment: <InputAdornment position=\"end\">{nativeCoin.name}</InputAdornment>,\r\n                      }}\r\n                      name=\"value\"\r\n                      placeholder=\"Value*\"\r\n                      text=\"Value*\"\r\n                      type=\"text\"\r\n                      validate={composeValidators(mustBeFloat, maxValue(ethBalance || '0'), minValue(0))}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row margin=\"sm\">\r\n                  <Col>\r\n                    <TextAreaField\r\n                      name=\"data\"\r\n                      placeholder=\"Data (hex encoded)*\"\r\n                      text=\"Data (hex encoded)*\"\r\n                      type=\"text\"\r\n                      validate={mustBeHexData}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Paragraph color=\"disabled\" noMargin size=\"lg\" style={{ letterSpacing: '-0.5px' }}>\r\n                  <Switch onChange={() => saveForm(args[2].values)} checked={!isABI} />\r\n                  Use custom data (hex encoded)\r\n                </Paragraph>\r\n              </Block>\r\n              <Modal.Footer>\r\n                <Modal.Footer.Buttons\r\n                  cancelButtonProps={{ onClick: onClose }}\r\n                  confirmButtonProps={{ disabled: shouldDisableSubmitButton, testId: 'review-tx-btn', text: 'Review' }}\r\n                />\r\n              </Modal.Footer>\r\n              {qrModalOpen && <ScanQRModal isOpen={qrModalOpen} onClose={closeQrModal} onScan={handleScan} />}\r\n            </>\r\n          )\r\n        }}\r\n      </GnoForm>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SendCustomTx\r\n","import React from 'react'\r\nimport { Field } from 'react-final-form'\r\n\r\n// $FlowFixMe\r\nconst GnoField = ({ ...props }: any) => <Field {...props} />\r\n\r\nexport default GnoField\r\n","import MuiTextField from '@material-ui/core/TextField'\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles'\r\nimport React from 'react'\r\n\r\nimport { lg } from 'src/theme/variables'\r\n\r\n// Neded for solving a fix in Windows browsers\r\nconst overflowStyle = {\r\n  overflow: 'hidden',\r\n  width: '100%',\r\n}\r\n\r\nconst styles = () =>\r\n  createStyles({\r\n    root: {\r\n      paddingTop: lg,\r\n      paddingBottom: '12px',\r\n      lineHeight: 0,\r\n    },\r\n  })\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\ntype Props = {\r\n  input: {\r\n    name: string\r\n    onChange?: () => void\r\n    value: string\r\n    placeholder: string\r\n    type: string\r\n  }\r\n  meta: {\r\n    touched?: boolean\r\n    pristine?: boolean\r\n    valid?: boolean\r\n    error?: string\r\n    modifiedSinceLastSubmit?: boolean\r\n    submitError?: boolean\r\n    active?: boolean\r\n  }\r\n  inputAdornment?: { endAdornment: React.ReactElement } | undefined\r\n  multiline: boolean\r\n  rows?: string\r\n  testId: string\r\n  text: string\r\n  disabled?: boolean\r\n  rowsMax?: number\r\n  className?: string\r\n}\r\n\r\nconst TextField = (props: Props): React.ReactElement => {\r\n  const {\r\n    input: { name, onChange, value, ...restInput },\r\n    inputAdornment,\r\n    meta,\r\n    multiline,\r\n    rows,\r\n    testId,\r\n    text,\r\n    ...rest\r\n  } = props\r\n  const classes = useStyles()\r\n  const helperText = value ? text : undefined\r\n  const showError = (meta.touched || !meta.pristine) && !meta.valid\r\n  const hasError = !!meta.error || (!meta.modifiedSinceLastSubmit && !!meta.submitError)\r\n  const errorMessage = meta.error || meta.submitError\r\n  const isInactiveAndPristineOrUntouched = !meta.active && (meta.pristine || !meta.touched)\r\n  const isInvalidAndUntouched = typeof meta.error === 'undefined' ? true : !meta.touched\r\n\r\n  const disableUnderline = isInactiveAndPristineOrUntouched && isInvalidAndUntouched\r\n\r\n  const inputRoot = helperText ? classes.root : ''\r\n  const statusClasses = meta.valid ? 'isValid' : hasError && showError ? 'isInvalid' : ''\r\n  const inputProps = {\r\n    ...restInput,\r\n    autoComplete: 'off',\r\n    'data-testid': testId,\r\n  }\r\n  const inputRootProps = {\r\n    ...inputAdornment,\r\n    className: `${inputRoot} ${statusClasses}`,\r\n    disableUnderline: disableUnderline,\r\n  }\r\n\r\n  return (\r\n    <MuiTextField\r\n      error={hasError && showError}\r\n      helperText={hasError && showError ? errorMessage : helperText || ' '}\r\n      inputProps={inputProps} // blank in order to force to have helper text\r\n      InputProps={inputRootProps}\r\n      multiline={multiline}\r\n      name={name}\r\n      onChange={onChange}\r\n      rows={rows}\r\n      style={overflowStyle}\r\n      value={value}\r\n      {...rest}\r\n    />\r\n  )\r\n}\r\n\r\nexport default TextField\r\n","import * as React from 'react'\r\nimport { Form } from 'react-final-form'\r\n\r\nconst stylesBasedOn = (padding) => ({\r\n  padding: `0 ${padding}%`,\r\n  flexDirection: 'column',\r\n  flex: '1 0 auto',\r\n})\r\n\r\nconst GnoForm = ({\r\n  children,\r\n  decorators,\r\n  formMutators,\r\n  initialValues,\r\n  onSubmit,\r\n  padding = 0,\r\n  subscription,\r\n  testId = '',\r\n  validation,\r\n}: any) => (\r\n  <Form\r\n    decorators={decorators}\r\n    initialValues={initialValues}\r\n    mutators={formMutators}\r\n    onSubmit={onSubmit}\r\n    render={({ handleSubmit, ...rest }) => (\r\n      <form data-testid={testId} onSubmit={handleSubmit} style={stylesBasedOn(padding) as any}>\r\n        {children(rest.submitting, rest.validating, rest, rest.form.mutators)}\r\n      </form>\r\n    )}\r\n    subscription={subscription}\r\n    validate={validation}\r\n  />\r\n)\r\n\r\nexport default GnoForm\r\n","import * as React from 'react'\r\n\r\nclass Bold extends React.PureComponent<any> {\r\n  render() {\r\n    const { children, ...props } = this.props\r\n\r\n    return <b {...props}>{children}</b>\r\n  }\r\n}\r\n\r\nexport default Bold\r\n","export default __webpack_public_path__ + \"static/media/qrcode.f0b048aa.svg\";","import React, { ReactElement } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Icon, Divider as DividerSRC } from '@gnosis.pm/safe-react-components'\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 8px 0;\r\n\r\n  svg {\r\n    margin: 0 12px 0 4px;\r\n  }\r\n`\r\nconst StyledDivider = styled(DividerSRC)`\r\n  width: 100%;\r\n`\r\n\r\ntype Props = {\r\n  withArrow?: boolean\r\n}\r\n\r\nconst Divider = ({ withArrow }: Props): ReactElement => (\r\n  <Wrapper>\r\n    {withArrow && <Icon type=\"arrowDown\" size=\"md\" />}\r\n    <StyledDivider />\r\n  </Wrapper>\r\n)\r\n\r\nexport default Divider\r\n","import { background, lg, secondaryText, sm } from 'src/theme/variables'\r\nimport { createStyles } from '@material-ui/core'\r\n\r\nexport const styles = createStyles({\r\n  heading: {\r\n    padding: lg,\r\n    justifyContent: 'space-between',\r\n    maxHeight: '75px',\r\n    boxSizing: 'border-box',\r\n  },\r\n  loaderContainer: {\r\n    width: '100%',\r\n    height: '100%',\r\n  },\r\n  close: {\r\n    height: '25px',\r\n    width: '25px',\r\n    color: secondaryText,\r\n  },\r\n  detailsContainer: {\r\n    backgroundColor: background,\r\n    maxHeight: '450px',\r\n  },\r\n  buttonRow: {\r\n    height: '84px',\r\n    justifyContent: 'center',\r\n  },\r\n  button: {\r\n    '&:last-child': {\r\n      marginLeft: sm,\r\n    },\r\n  },\r\n})\r\n","import IconButton from '@material-ui/core/IconButton'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Close from '@material-ui/icons/Close'\r\nimport * as React from 'react'\r\nimport QrReader from 'react-qr-reader'\r\n\r\nimport { styles } from './style'\r\n\r\nimport Modal from 'src/components/Modal'\r\nimport Block from 'src/components/layout/Block'\r\nimport Button from 'src/components/layout/Button'\r\nimport Col from 'src/components/layout/Col'\r\nimport Hairline from 'src/components/layout/Hairline'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Row from 'src/components/layout/Row'\r\nimport { useEffect, useState } from 'react'\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\ntype Props = {\r\n  isOpen: boolean\r\n  onClose: () => void\r\n  onScan: (value: string) => void\r\n}\r\n\r\nexport const ScanQRModal = ({ isOpen, onClose, onScan }: Props): React.ReactElement => {\r\n  const classes = useStyles()\r\n  const [fileUploadModalOpen, setFileUploadModalOpen] = useState<boolean>(false)\r\n  const [error, setError] = useState<string | null>(null)\r\n  const [cameraBlocked, setCameraBlocked] = useState<boolean>(false)\r\n  const scannerRef: any = React.createRef()\r\n  const openImageDialog = React.useCallback(() => {\r\n    scannerRef.current.openImageDialog()\r\n  }, [scannerRef])\r\n\r\n  useEffect(() => {\r\n    if (!fileUploadModalOpen && cameraBlocked && !error) {\r\n      setFileUploadModalOpen(true)\r\n      openImageDialog()\r\n    }\r\n  }, [cameraBlocked, openImageDialog, fileUploadModalOpen, setFileUploadModalOpen, error])\r\n\r\n  const onFileScannedResolve = (error: Error | null, successData: string | null) => {\r\n    if (error) {\r\n      console.error('QR code error', error)\r\n\r\n      if (error.name === 'NotAllowedError' || error.name === 'PermissionDismissedError') {\r\n        setCameraBlocked(true)\r\n        setFileUploadModalOpen(false)\r\n      } else {\r\n        setError('The QR could not be read')\r\n      }\r\n      return\r\n    }\r\n\r\n    if (successData) {\r\n      onScan(successData)\r\n    } else if (cameraBlocked) {\r\n      setError('The QR could not be read')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal description=\"Receive Tokens Form\" handleClose={onClose} open={isOpen} title=\"Receive Tokens\">\r\n      <Row align=\"center\" className={classes.heading} grow>\r\n        <Paragraph noMargin size=\"xl\">\r\n          Scan QR\r\n        </Paragraph>\r\n        <IconButton disableRipple onClick={onClose}>\r\n          <Close className={classes.close} />\r\n        </IconButton>\r\n      </Row>\r\n      <Hairline />\r\n      <Col className={classes.detailsContainer} layout=\"column\" middle=\"xs\">\r\n        {error && (\r\n          <Block padding=\"md\" margin=\"md\">\r\n            {error}\r\n          </Block>\r\n        )}\r\n        <QrReader\r\n          legacyMode={cameraBlocked}\r\n          onError={(err: Error) => onFileScannedResolve(err, null)}\r\n          onScan={(data: string) => onFileScannedResolve(null, data)}\r\n          ref={scannerRef}\r\n          style={{ width: '400px', height: '400px' }}\r\n          facingMode=\"user\"\r\n        />\r\n      </Col>\r\n      <Hairline />\r\n      <Row align=\"center\" className={classes.buttonRow}>\r\n        <Button className={classes.button} color=\"secondary\" minWidth={154} onClick={onClose}>\r\n          Close\r\n        </Button>\r\n        <Button\r\n          className={classes.button}\r\n          color=\"primary\"\r\n          minWidth={154}\r\n          onClick={() => {\r\n            setCameraBlocked(true)\r\n            setError(null)\r\n            setFileUploadModalOpen(false)\r\n          }}\r\n          variant=\"contained\"\r\n        >\r\n          Upload an image\r\n        </Button>\r\n      </Row>\r\n    </Modal>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { EthHashInfo } from '@gnosis.pm/safe-react-components'\r\nimport styled from 'styled-components'\r\n\r\nimport { getExplorerInfo, getNetworkInfo } from 'src/config'\r\nimport { safeNameSelector, safeSelector } from 'src/logic/safe/store/selectors'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Bold from 'src/components/layout/Bold'\r\nimport { border, xs } from 'src/theme/variables'\r\nimport Block from 'src/components/layout/Block'\r\n\r\nconst { nativeCoin } = getNetworkInfo()\r\n\r\nconst StyledBlock = styled(Block)`\r\n  font-size: 12px;\r\n  line-height: 1.08;\r\n  letter-spacing: -0.5px;\r\n  background-color: ${border};\r\n  width: fit-content;\r\n  padding: 5px 10px;\r\n  margin-top: ${xs};\r\n  margin-left: 40px;\r\n  border-radius: 3px;\r\n`\r\n\r\nconst SafeInfo = (): React.ReactElement => {\r\n  const { address: safeAddress = '', ethBalance } = useSelector(safeSelector) || {}\r\n  const safeName = useSelector((state) => safeNameSelector(state, safeAddress))\r\n\r\n  return (\r\n    <>\r\n      <EthHashInfo\r\n        hash={safeAddress}\r\n        name={safeName}\r\n        explorerUrl={getExplorerInfo(safeAddress)}\r\n        showAvatar\r\n        showCopyBtn\r\n      />\r\n      {ethBalance && (\r\n        <StyledBlock>\r\n          <Paragraph noMargin>\r\n            Balance: <Bold data-testid=\"current-eth-balance\">{`${ethBalance} ${nativeCoin.symbol}`}</Bold>\r\n          </Paragraph>\r\n        </StyledBlock>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SafeInfo\r\n","import { createStyles, makeStyles } from '@material-ui/core'\r\n\r\nexport const useTextFieldLabelStyle = makeStyles(\r\n  createStyles({\r\n    root: {\r\n      overflow: 'hidden',\r\n      borderRadius: 4,\r\n      fontSize: '15px',\r\n      width: '500px',\r\n    },\r\n  }),\r\n)\r\n\r\nexport const useTextFieldInputStyle = makeStyles(\r\n  createStyles({\r\n    root: {\r\n      fontSize: '14px',\r\n      width: '420px',\r\n    },\r\n  }),\r\n)\r\n","import { EthHashInfo } from '@gnosis.pm/safe-react-components'\r\nimport MuiTextField from '@material-ui/core/TextField'\r\nimport Autocomplete, { AutocompleteProps } from '@material-ui/lab/Autocomplete'\r\nimport React, { Dispatch, ReactElement, SetStateAction, useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { mustBeEthereumAddress, mustBeEthereumContractAddress } from 'src/components/forms/validator'\r\nimport { getNetworkId, isFeatureEnabled } from 'src/config'\r\nimport { FEATURES } from 'src/config/networks/network.d'\r\nimport { AddressBookEntry } from 'src/logic/addressBook/model/addressBook'\r\nimport { addressBookSelector } from 'src/logic/addressBook/store/selectors'\r\nimport { filterContractAddressBookEntries, filterAddressEntries } from 'src/logic/addressBook/utils'\r\nimport { isValidEnsName, isValidCryptoDomainName } from 'src/logic/wallets/ethAddresses'\r\nimport { getAddressFromDomain } from 'src/logic/wallets/getWeb3'\r\nimport {\r\n  useTextFieldInputStyle,\r\n  useTextFieldLabelStyle,\r\n} from 'src/routes/safe/components/Balances/SendModal/screens/AddressBookInput/style'\r\nimport { trimSpaces } from 'src/utils/strings'\r\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\r\n\r\nconst chainId = getNetworkId()\r\n\r\nexport interface AddressBookProps {\r\n  fieldMutator: (address: string) => void\r\n  label?: string\r\n  pristine?: boolean\r\n  recipientAddress?: string\r\n  errorMsg?: string\r\n  setIsValidAddress: (valid: boolean) => void\r\n  setSelectedEntry: Dispatch<SetStateAction<{ address: string; name: string }> | null>\r\n}\r\n\r\nexport interface BaseAddressBookInputProps extends AddressBookProps {\r\n  addressBookEntries: AddressBookEntry[]\r\n  setSelectedEntry: (args: { address: string; name: string } | null) => void\r\n  setValidationText: Dispatch<SetStateAction<string | undefined>>\r\n  validationText: string | undefined\r\n}\r\n\r\nconst BaseAddressBookInput = ({\r\n  addressBookEntries,\r\n  fieldMutator,\r\n  label = 'Recipient',\r\n  setIsValidAddress,\r\n  setSelectedEntry,\r\n  setValidationText,\r\n  validationText,\r\n}: BaseAddressBookInputProps): ReactElement => {\r\n  const updateAddressInfo = (addressEntry: AddressBookEntry): void => {\r\n    setSelectedEntry(addressEntry)\r\n    fieldMutator(addressEntry.address)\r\n  }\r\n\r\n  const validateAddress = (address: string): AddressBookEntry | string | undefined => {\r\n    const addressErrorMessage = mustBeEthereumAddress(address)\r\n    setIsValidAddress(!addressErrorMessage)\r\n\r\n    if (addressErrorMessage) {\r\n      setValidationText(addressErrorMessage)\r\n      return\r\n    }\r\n\r\n    const filteredEntries = filterAddressEntries(addressBookEntries, { inputValue: address })\r\n    return filteredEntries.length === 1 ? filteredEntries[0] : address\r\n  }\r\n\r\n  const onChange: AutocompleteProps<AddressBookEntry, false, false, true>['onChange'] = (_, value, reason) => {\r\n    switch (reason) {\r\n      case 'select-option': {\r\n        const { address, name, chainId } = value as AddressBookEntry\r\n        updateAddressInfo({ address, name, chainId })\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  const onInputChange: AutocompleteProps<AddressBookEntry, false, false, true>['onInputChange'] = async (\r\n    _,\r\n    value,\r\n    reason,\r\n  ) => {\r\n    switch (reason) {\r\n      case 'input': {\r\n        const normalizedValue = trimSpaces(value)\r\n\r\n        if (!normalizedValue) {\r\n          break\r\n        }\r\n\r\n        // ENS-enabled resolve/validation\r\n        if (\r\n          isFeatureEnabled(FEATURES.DOMAIN_LOOKUP) &&\r\n          (isValidEnsName(normalizedValue) || isValidCryptoDomainName(normalizedValue))\r\n        ) {\r\n          let address = ''\r\n          try {\r\n            address = await getAddressFromDomain(normalizedValue)\r\n          } catch (err) {\r\n            logError(Errors._101, err.message)\r\n          }\r\n\r\n          const validatedAddress = validateAddress(address)\r\n\r\n          if (!validatedAddress) {\r\n            fieldMutator('')\r\n            break\r\n          }\r\n\r\n          const newEntry =\r\n            typeof validatedAddress === 'string'\r\n              ? {\r\n                  address,\r\n                  name: normalizedValue,\r\n                  chainId,\r\n                }\r\n              : validatedAddress\r\n\r\n          updateAddressInfo(newEntry)\r\n          break\r\n        }\r\n\r\n        // ETH address validation\r\n        const validatedAddress = validateAddress(normalizedValue)\r\n\r\n        if (!validatedAddress) {\r\n          fieldMutator('')\r\n          break\r\n        }\r\n\r\n        const newEntry =\r\n          typeof validatedAddress === 'string'\r\n            ? {\r\n                address: validatedAddress,\r\n                name: '',\r\n                chainId,\r\n              }\r\n            : validatedAddress\r\n\r\n        updateAddressInfo(newEntry)\r\n\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  const labelStyles = useTextFieldLabelStyle()\r\n  const inputStyles = useTextFieldInputStyle()\r\n\r\n  return (\r\n    <Autocomplete<AddressBookEntry, false, false, true>\r\n      closeIcon={null}\r\n      openOnFocus={false}\r\n      filterOptions={filterAddressEntries}\r\n      freeSolo\r\n      onChange={onChange}\r\n      onInputChange={onInputChange}\r\n      options={addressBookEntries}\r\n      id=\"address-book-input\"\r\n      renderInput={(params) => (\r\n        <MuiTextField\r\n          {...params}\r\n          autoFocus={true}\r\n          error={!!validationText}\r\n          fullWidth\r\n          variant=\"filled\"\r\n          label={validationText ? validationText : label}\r\n          InputLabelProps={{ shrink: true, required: true, classes: labelStyles }}\r\n          InputProps={{ ...params.InputProps, classes: inputStyles }}\r\n        />\r\n      )}\r\n      getOptionLabel={({ address }) => address}\r\n      renderOption={({ address, name }) => <EthHashInfo hash={address} name={name} showAvatar />}\r\n      role=\"listbox\"\r\n      style={{ display: 'flex', flexGrow: 1 }}\r\n    />\r\n  )\r\n}\r\n\r\nexport const AddressBookInput = (props: AddressBookProps): ReactElement => {\r\n  const addressBookEntries = useSelector(addressBookSelector)\r\n  const [validationText, setValidationText] = useState<string>('')\r\n\r\n  useEffect(() => {\r\n    if (props.errorMsg) {\r\n      setValidationText(props.errorMsg)\r\n    }\r\n  }, [props.errorMsg])\r\n\r\n  return (\r\n    <BaseAddressBookInput\r\n      addressBookEntries={addressBookEntries}\r\n      setValidationText={setValidationText}\r\n      validationText={validationText}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport const ContractsAddressBookInput = ({\r\n  setIsValidAddress,\r\n  setSelectedEntry,\r\n  ...props\r\n}: AddressBookProps): ReactElement => {\r\n  const addressBookEntries = useSelector(addressBookSelector)\r\n  const [filteredEntries, setFilteredEntries] = useState<AddressBookEntry[]>([])\r\n  const [validationText, setValidationText] = useState<string>('')\r\n\r\n  useEffect(() => {\r\n    const filterContractAddresses = async (): Promise<void> => {\r\n      const filteredADBK = await filterContractAddressBookEntries(addressBookEntries)\r\n      setFilteredEntries(filteredADBK)\r\n    }\r\n    filterContractAddresses()\r\n  }, [addressBookEntries])\r\n\r\n  const onSetSelectedEntry = async (selectedEntry) => {\r\n    if (selectedEntry?.address) {\r\n      // verify if `address` is a contract\r\n      const contractAddressErrorMessage = await mustBeEthereumContractAddress(selectedEntry.address)\r\n      setIsValidAddress(!contractAddressErrorMessage)\r\n      setValidationText(contractAddressErrorMessage ?? '')\r\n      setSelectedEntry(selectedEntry)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <BaseAddressBookInput\r\n      addressBookEntries={filteredEntries}\r\n      setIsValidAddress={setIsValidAddress}\r\n      setSelectedEntry={onSetSelectedEntry}\r\n      setValidationText={setValidationText}\r\n      validationText={validationText}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n","import { createStyles, makeStyles } from '@material-ui/core/styles'\r\nimport React, { ReactElement } from 'react'\r\n\r\nimport Field from 'src/components/forms/Field'\r\nimport TextField from 'src/components/forms/TextField'\r\n\r\nconst styles = createStyles({\r\n  textarea: {\r\n    '& > div': {\r\n      height: '140px',\r\n      paddingTop: '0',\r\n      paddingBottom: '0',\r\n      alignItems: 'auto',\r\n      '& > textarea': {\r\n        fontSize: '15px',\r\n        letterSpacing: '-0.5px',\r\n        lineHeight: '20px',\r\n        height: '102px',\r\n      },\r\n    },\r\n  },\r\n})\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\nexport const TextAreaField = ({ ...props }): ReactElement => {\r\n  const classes = useStyles()\r\n  return <Field {...props} className={classes.textarea} component={TextField} multiline rows=\"5\" />\r\n}\r\n"],"sourceRoot":""}