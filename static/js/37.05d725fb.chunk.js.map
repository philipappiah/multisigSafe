{"version":3,"sources":["routes/safe/components/Balances/utils/setTokenImgToPlaceholder.ts","components/layout/Bold/index.tsx","routes/safe/components/Balances/assets/token_placeholder.svg","routes/safe/components/Balances/SendModal/screens/ContractInteraction/utils/index.ts","../node_modules/final-form-calculate/dist/final-form-calculate.es.js","routes/safe/components/Settings/SpendingLimit/style.ts","routes/safe/components/Settings/SpendingLimit/FormFields/ResetTime.tsx","routes/safe/components/Settings/SpendingLimit/FormFields/Amount.tsx","routes/safe/components/Settings/SpendingLimit/InfoDisplay/DataDisplay.tsx","routes/safe/components/Settings/SpendingLimit/InfoDisplay/AddressInfo.tsx","routes/safe/components/Settings/SpendingLimit/InfoDisplay/ResetTimeInfo.tsx","routes/safe/components/Settings/SpendingLimit/InfoDisplay/TokenInfo.tsx","logic/safe/hooks/useTokenInfo.tsx","routes/safe/components/Transactions/TxList/assets/custom.svg","../node_modules/@material-ui/icons/MoreHoriz.js","routes/safe/components/Transactions/TxList/hooks/usePagedHistoryTransactions.ts","routes/safe/components/Transactions/TxList/hooks/useHistoryTransactions.ts","routes/safe/components/Transactions/TxList/styled.tsx","../../src/observers.ts","../../src/InView.tsx","components/InfiniteScroll/index.tsx","../../src/useInView.tsx","routes/safe/components/Transactions/TxList/TxsInfiniteScroll.tsx","routes/safe/components/Transactions/TxList/hooks/useAssetInfo.ts","routes/safe/components/Transactions/TxList/hooks/useTransactionStatus.ts","routes/safe/components/Transactions/TxList/assets/circle-cross-red.svg","routes/safe/components/Transactions/TxList/assets/incoming.svg","routes/safe/components/Transactions/TxList/assets/outgoing.svg","routes/safe/components/Transactions/TxList/assets/settings.svg","routes/safe/components/Transactions/TxList/hooks/useKnownAddress.ts","routes/safe/components/Transactions/TxList/hooks/useTransactionType.ts","components/CustomIconText/index.tsx","routes/safe/components/Transactions/TxList/TxLocationProvider.tsx","routes/safe/components/Transactions/TxList/hooks/useTransactionActions.ts","routes/safe/components/Transactions/TxList/TxActionProvider.tsx","routes/safe/components/Transactions/TxList/TxHoverProvider.tsx","routes/safe/components/Transactions/TxList/hooks/useActionButtonsHandlers.ts","routes/safe/components/Transactions/TxList/TxCollapsedActions.tsx","routes/safe/components/Transactions/TxList/TokenTransferAmount.tsx","routes/safe/components/Transactions/TxList/TxCollapsed.tsx","routes/safe/components/Transactions/TxList/TxHistoryCollapsed.tsx","routes/safe/components/Transactions/TxList/SpendingLimitDetails.tsx","../node_modules/@material-ui/core/esm/Divider/Divider.js","routes/safe/components/AddressBook/EllipsisTransactionDetails/index.tsx","routes/safe/components/Transactions/TxList/AddressInfo.tsx","routes/safe/components/Transactions/TxList/InfoDetails.tsx","routes/safe/components/Transactions/TxList/TxInfoDetails.tsx","routes/safe/components/Transactions/TxList/HexEncodedData.tsx","routes/safe/components/Transactions/TxList/MethodValue.tsx","routes/safe/components/Transactions/TxList/MethodDetails.tsx","routes/safe/components/Transactions/TxList/MultiSendDetails.tsx","routes/safe/components/Transactions/TxList/TxData.tsx","routes/safe/components/Transactions/TxList/TxExpandedActions.tsx","routes/safe/components/Transactions/TxList/TxInfoSettings.tsx","routes/safe/components/Transactions/TxList/TxInfoTransfer.tsx","routes/safe/components/Transactions/TxList/TxInfo.tsx","routes/safe/components/Transactions/TxList/assets/transactions-list-active.svg","routes/safe/components/Transactions/TxList/assets/transactions-list-inactive.svg","routes/safe/components/Transactions/TxList/OwnerRow.tsx","routes/safe/components/Transactions/TxList/TxOwners.tsx","routes/safe/components/Transactions/TxList/TxSummary.tsx","routes/safe/components/Transactions/TxList/TxDetails.tsx","routes/safe/components/Transactions/TxList/hooks/useTransactionDetails.ts","routes/safe/components/Transactions/TxList/TxInfoCreation.tsx","routes/safe/components/Transactions/TxList/TxHistoryRow.tsx","routes/safe/components/Transactions/TxList/HistoryTxList.tsx","routes/safe/components/Transactions/TxList/assets/no-transactions.svg","routes/safe/components/Transactions/TxList/HistoryTransactions.tsx","routes/safe/components/Transactions/TxList/modals/style.ts","logic/safe/store/models/confirmation.ts","routes/safe/components/Transactions/TxList/modals/ApproveTxModal.tsx","logic/safe/store/actions/processTransaction.ts","routes/safe/components/Transactions/TxList/modals/RejectTxModal.tsx","routes/safe/components/Transactions/TxList/ActionModal.tsx","routes/safe/components/Transactions/TxList/hooks/usePagedQueuedTransactions.ts","routes/safe/components/Transactions/TxList/hooks/useQueueTransactions.ts","routes/safe/components/Transactions/TxList/TxQueueCollapsed.tsx","routes/safe/components/Transactions/TxList/TxQueueRow.tsx","routes/safe/components/Transactions/TxList/QueueTxList.tsx","routes/safe/components/Transactions/TxList/QueueTransactions.tsx","routes/safe/components/Transactions/TxList/index.tsx"],"names":["setImageToPlaceholder","error","currentTarget","onerror","src","TokenPlaceholder","Bold","this","props","children","React","NO_CONTRACT","ensResolver","createDecorator","field","updates","contractAddress","a","isValidEnsName","isValidCryptoDomainName","getAddressFromDomain","resolvedAddress","console","message","formMutators","setMax","args","state","utils","changeValue","setContractAddress","setSelectedMethod","lastFormState","values","selectedMethod","name","setCallResults","setAbiValue","isAddress","type","indexOf","isBoolean","isUint","isInt","isByte","isArrayParameter","parameter","test","handleSubmitError","key","hasOwnProperty","undefined","value","reason","FORM_ERROR","generateFormFieldKey","signatureHash","index","keyType","extractMethodArgs","JSON","parse","map","Number","isInteger","BigNumber","toString","err","getParsedJSONOrArrayFromString","createTxObject","method","contract","getWeb3","eth","Contract","inputs","methods","isReadMethod","action","getValueFromTxInputs","tx","replace","String","isPromise","obj","then","tripleEquals","b","_len","arguments","length","calculations","Array","_key","form","previousValues","subscribe","_ref","batch","runUpdates","isEqual","next","getIn","previous","results","resolved","Object","keys","forEach","destField","change","result","update","fields","getRegisteredFields","_ref2","matches","isArray","findIndex","f","RegExp","fieldName","useStyles","makeStyles","createStyles","title","padding","lg","paddingBottom","hide","backgroundColor","visibility","actions","justifyContent","noBorderBottom","borderBottom","annotation","paddingLeft","ownersText","color","secondaryText","fontColor","container","actionButton","fontWeight","boldFont","marginRight","sm","buttonRow","position","left","bottom","boxSizing","width","borderTop","border","modifyBtn","height","xl","fontSize","smallFontSize","removeModuleIcon","marginLeft","cursor","modalHeading","modalContainer","minHeight","modalManage","modalClose","modalButtonRow","modalButtonRemove","modalName","textOverflow","overflow","modalUserName","whiteSpace","modalOwner","background","md","alignItems","modalUser","modalDescription","modalOpen","amountInput","gasCostsContainer","SpendingLimitRadioButtons","styled","RadioButtons","theme","colors","primary","StyledSwitch","rest","icon","hexToRgb","primaryLight","SafeRadioButtons","options","initialValue","groupName","input","onChange","onRadioChange","Switch","label","control","render","checked","ResetTimeLabel","div","ResetTimeToggle","ResetTimeOptions","RESET_TIME_OPTIONS","RINKEBY_RESET_TIME_OPTIONS","getResetTimeOptions","getNetworkName","toLowerCase","ResetTime","withResetTime","useField","subscription","resetTimeOptions","switchExplanation","size","Field","GnoField","AmountInput","TextField","SRCTextField","Amount","classes","tokenAddress","touched","visited","meta","selectedTokenRecord","useSelector","extendedSafeTokensSelector","find","token","address","validate","composeValidators","required","mustBeFloat","minValue","component","data-testid","endAdornment","symbol","className","DataDisplay","AddressInfo","getNameFromAddressBookSelector","explorerUrl","getExplorerInfo","hash","sameString","ADDRESS_BOOK_DEFAULT_NAME","showCopyBtn","showAvatar","textSize","ResetTimeInfo","Row","align","margin","iconSize","iconType","text","StyledImage","img","StyledImageName","TokenInfo","amount","alt","onError","logoUri","useTokenInfo","tokens","safeKnownCoins","sameAddress","_interopRequireDefault","require","_interopRequireWildcard","defineProperty","exports","default","_default","createElement","d","usePagedHistoryTransactions","historyTxs","historyTransactions","useState","count","setCount","useEffect","history","entries","reduce","acc","transactions","useHistoryTransactions","dispatch","useRef","useDispatch","safeAddress","safeParamAddressFromStateSelector","hasMore","setHasMore","isLoading","setIsLoading","useCallback","loadPagedHistoryTransactions","current","addHistoryTransactions","isTail","Wrapper","Breadcrumb","IconText","ContentWrapper","ColumnDisplayAccordionDetails","AccordionDetails","NoPaddingAccordion","Accordion","ActionAccordion","StyledTransactionsGroup","SubTitle","h2","Text","placeHolder","StyledTransactions","white","GroupedTransactionsCard","separator","inputField","gridColumns","nonce","info","time","votes","status","willBeReplaced","css","failedTransaction","onChainRejection","errorTooltip","StyledTransaction","join","StyledGroupedTransactions","slice","GroupedTransactions","DisclaimerContainer","TxDetailsContainer","errorHover","secondary","OwnerList","ul","OwnerListItem","li","InlineEthHashInfo","EthHashInfo","StyledScrollableBar","ScrollableTransactionsContainer","Centered","HorizontallyCentered","isVisible","StyledAccordionSummary","AccordionSummary","AlignItemsWithMargin","NoTransactions","ObserverMap","RootIds","rootId","optionsToId","root","observe","element","callback","id","instance","elements","observer","IntersectionObserver","inView","entry","thresholds","createObserver","callbacks","isPlainChildren","InView","node","_unobserveCb","handleNode","handleChange","componentDidUpdate","prevProps","componentWillUnmount","observeNode","threshold","rootMargin","trackVisibility","delay","unobserve","ref","as","tag","triggerOnce","initialInView","INFINITE_SCROLL_CONTAINER","InfiniteScrollContext","createContext","setLastItemId","InfiniteScrollProvider","forwardRef","lastItemId","_setLastItemId","Provider","itemId","setTimeout","displayName","InfiniteScroll","config","useInView","skip","setState","setRef","document","querySelector","TxsInfiniteScroll","defaultTokenTransferAsset","NOT_AVAILABLE","directionSign","amountWithSymbol","tokenType","useAssetInfo","txInfo","asset","setAsset","getTxAmount","isTransferTxInfo","direction","transferInfo","tokenName","nativeCoin","getNetworkInfo","isSettingsChangeTxInfo","isCustomTxInfo","useTransactionStatus","transaction","currentUser","userAccountSelector","setStatus","isStatusSuccess","txStatus","isStatusFailed","isStatusCancelled","isStatusWillBeReplaced","signaturePending","addressInList","executionInfo","missingSigners","useKnownAddress","addressInfo","recipientName","image","isAddressBook","useTransactionType","CustomTxIcon","setType","toAddress","getTxTo","knownAddress","toInfo","SettingsTxIcon","isSendTx","OutgoingTxIcon","IncomingTxIcon","dataDecoded","isCancellation","CircleCrossRed","safeAppInfo","logoUrl","fallbackIcon","CustomIconText","iconUrl","iconUrlFallback","showHash","avatarSize","customAvatar","customAvatarFallback","TxLocationContext","txLocation","setTxLocation","useTransactionActions","isUserAnOwner","grantedSelector","useContext","confirmationsSubmitted","confirmationsRequired","transactionsByNonce","getQueuedTransactionsByNonce","attributeName","attributeValue","canConfirm","canConfirmThenExecute","canExecute","canCancel","oneToGo","currentUserSigned","some","missingSigner","includes","prev","TransactionActionStateContext","selectedAction","actionSelected","transactionId","selectAction","Promise","resolve","TxActionProvider","setSelectedAction","fetchTransactionDetails","TxHoverContext","activeHover","setActiveHover","TxHoverProvider","useActionButtonsHandlers","actionContext","hoverContext","locationContext","handleConfirmButtonClick","event","stopPropagation","txDetails","detailedExecutionInfo","details","confirmations","enqueueSnackbar","NOTIFICATIONS","TX_FETCH_SIGNATURES_ERROR_MSG","handleCancelButtonClick","handleOnMouseEnter","handleOnMouseLeave","isPending","useMemo","match","disabledActions","IconButton","MuiIconButton","TxCollapsedActions","safeNonceSelector","getTitle","placement","onClick","disabled","onMouseEnter","onMouseLeave","AmountWrapper","TokenTransferAmount","assetInfo","Img","NFTIcon","TxInfo","settingsInfo","KNOWN_MODULES","module","isMultiSendTxInfo","actionCount","methodName","CircularProgressPainter","SmallDot","Dot","IconTextSrc","TooltipContent","TxCollapsed","isGrouped","TxsInfiniteScrollContext","isCancelTxDetails","txCollapsedNonce","txCollapsedType","txCollapsedInfo","timestamp","txCollapsedTime","formatDateTime","arrow","formatTime","formatTimeInWords","txCollapsedVotes","submitted","txCollapsedActions","txCollapsedStatus","strong","TxHistoryCollapsed","isSetAllowance","isDeleteAllowance","SpendingLimitRow","ModifySpendingLimitDetails","data","parameters","beneficiary","resetTimeMin","resetTimeLabel","tokenInfo","fromTokenUnit","decimals","DeleteSpendingLimitDetails","Divider","_props$absolute","absolute","_props$component","Component","_props$flexItem","flexItem","_props$light","light","_props$orientation","orientation","_props$role","role","_props$variant","variant","other","_objectWithoutProperties","_extends","clsx","vertical","withStyles","flexShrink","palette","divider","inset","fade","middle","spacing","alignSelf","display","xs","borderRadius","transition","outline","increasedPopperZindex","zIndex","EllipsisTransactionDetails","sendModalOpenHandler","anchorEl","setAnchorEl","currentSafeAddress","isOwnerConnected","isStoredInAddressBook","handleClick","closeMenuHandler","addOrEditEntryHandler","push","SAFELIST_ADDRESS","ClickAwayListener","onClickAway","tabIndex","onKeyDown","Menu","keepMounted","onClose","open","Boolean","MenuItem","avatarUrl","InfoDetails","SingleRow","TxInfoDetails","isTransferType","canRepeatTransaction","sendModalOpen","setSendModalOpen","activeScreenType","recipientAddress","selectedToken","ZERO_ADDRESS","tokenAmount","sendModalParams","setSendModalParams","isCollectible","getTxTokenData","SendModal","isOpen","styles","txDataParagraph","linkTxData","textDecoration","HexEncodedData","hexData","limit","showTxData","setShowTxData","showExpandBtn","shortener","textShortener","charsStart","charsEnd","Paragraph","noMargin","Link","aria-label","rel","target","NestedWrapper","GenericValue","getTextValue","getArrayValue","parentId","currentValue","Value","shortenHash","TxDetailsMethodParam","StyledMethodName","MethodDetails","param","MultiSendTxGroup","actionTitle","MultiSendDetails","txData","valueDecoded","valuesDecoded","to","DetailsWithTxInfo","TxData","TxExpandedActions","getConfirmTooltipTitle","TxInfoSettings","handler","owner","oldOwner","newOwner","implementation","TxInfoTransfer","setDetails","sender","recipient","OwnerRow","ownerName","StyledImg","TxOwners","isModuleExecutionDetails","confirmationsNeeded","CreationNode","signer","executor","TransactionListActive","TransactionListInactive","TxSummary","txHash","executedAt","isMultiSigExecutionDetails","created","submittedAt","safeTxHash","operation","Operation","DELEGATE","NormalBreakingText","TxDataGroup","txNonce","isTxExecuted","href","TxDetails","loading","setTxDetails","getTransactionDetails","useTransactionDetails","cn","TxInfoCreation","transactionHash","creator","factory","TxHistoryRow","TransitionProps","mountOnEnter","unmountOnExit","appear","isCreationTxInfo","HistoryTxList","lastTransactionsGroup","lastTransaction","txs","formatWithSchema","HistoryTransactions","NoTransactionsImage","heading","headingText","closeIcon","nonceNumber","marginTop","makeConfirmation","Record","signature","ApproveTxModal","isCancelTx","userAddress","approveAndExecute","setApproveAndExecute","thresholdReached","_threshold","_countingCurrentConfirmation","modalInfo","description","getModalTitleAndDescription","oneConfirmationLeft","isTheTxReadyToBeExecuted","manualGasPrice","setManualGasPrice","manualGasLimit","setManualGasLimit","t","List","EMPTY_DATA","baseGas","gasPrice","safeTxGas","gasToken","refundReceiver","CALL","origin","stringify","url","useTxInfo","useEstimateTransactionGas","txRecipient","txConfirmations","txAmount","preApprovingOwner","gasLimit","gasPriceFormatted","gasCostFormatted","txEstimationExecutionStatus","isExecution","isOffChainSignature","isCreation","useEstimationStatus","buttonStatus","handleExecuteCheckbox","prevApproveAndExecute","approveTx","txParameters","notifiedTransaction","ethParameters","getState","providerSelector","from","account","hardwareWallet","smartContractWallet","safeInstance","getGnosisSafeInstanceAt","getLastTx","lastTx","getNewTxNonce","shouldExecuteTransaction","getCurrentSafeVersion","safeVersion","sigs","generateSignaturesFromTxConfirmations","getPreValidatedSignatures","notificationsQueue","getNotificationsFromTxType","beforeExecutionKey","beforeExecution","txArgs","valueInWei","checkIfOffChainSignatureIsPossible","tryOffChainSigning","closeSnackbarAction","updateTransactionStatus","saveTxToHistory","fetchTransactions","getExecutionTransaction","getApprovalTransaction","sendParams","gas","ethGasLimit","ethGasPriceInGWei","ethNonce","send","once","aboutToExecuteTx","on","receipt","fetchSafe","errorMsg","afterExecutionError","code","persist","executeData","approveHash","encodeABI","getErrorMessage","errMsg","processTransaction","TX_NOTIFICATION_TYPES","CONFIRMATION_TX","getParametersStatus","Modal","handleClose","EditableTxParameters","parametersStatus","ethGasPrice","safeNonce","closeEditModalCallback","oldGasPrice","newGasPrice","toggleEditMode","grow","weight","disableRipple","Hairline","Block","style","flexDirection","FormControlLabel","Checkbox","TxParametersDetail","onEdit","isTransactionCreation","isTransactionExecution","EstimationStatus","LOADING","Footer","withoutBorder","ButtonStatus","Buttons","cancelButtonProps","confirmButtonProps","testId","RejectTxModal","gwTransaction","confirmButtonStatus","READY","confirmButtonText","createTransaction","CANCELLATION_TX","navigateToTransactionsTab","sendReplacementTransaction","ActionModal","useTransactionParameters","getTransactionByAttribute","usePagedQueuedTransactions","nextTxs","nextTransactions","queuedTxs","queuedTransactions","txsCount","setTxsCount","queued","queue","useQueueTransactions","nextPage","loadPagedQueuedTransactions","addQueuedTransactions","TxQueueCollapsed","calculateVotes","TxQueueRow","setTx","currTx","TreeView","firstElement","Disclaimer","QueueTransaction","QueueTxList","QueueTransactions","MenuSrc","items","GatewayTransactions","tab","setTab","selectedTab"],"mappings":"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","file":"static/js/37.05d725fb.chunk.js","sourcesContent":["import { SyntheticEvent } from 'react'\r\n\r\nimport TokenPlaceholder from 'src/routes/safe/components/Balances/assets/token_placeholder.svg'\r\n\r\nexport const setImageToPlaceholder = (error: SyntheticEvent<HTMLImageElement, Event>): void => {\r\n  error.currentTarget.onerror = null\r\n  error.currentTarget.src = TokenPlaceholder\r\n}\r\n","import * as React from 'react'\r\n\r\nclass Bold extends React.PureComponent<any> {\r\n  render() {\r\n    const { children, ...props } = this.props\r\n\r\n    return <b {...props}>{children}</b>\r\n  }\r\n}\r\n\r\nexport default Bold\r\n","export default __webpack_public_path__ + \"static/media/token_placeholder.c1abe466.svg\";","import { FORM_ERROR, Mutator, SubmissionErrors } from 'final-form'\r\nimport createDecorator from 'final-form-calculate'\r\nimport { ContractSendMethod } from 'web3-eth-contract'\r\n\r\nimport { AbiItemExtended } from 'src/logic/contractInteraction/sources/ABIService'\r\nimport { getAddressFromDomain, getWeb3 } from 'src/logic/wallets/getWeb3'\r\nimport { TransactionReviewType } from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/Review'\r\nimport { isValidCryptoDomainName, isValidEnsName } from 'src/logic/wallets/ethAddresses'\r\nimport { BigNumber } from 'bignumber.js'\r\n\r\nexport const NO_CONTRACT = 'no contract'\r\n\r\nexport const ensResolver = createDecorator({\r\n  field: 'contractAddress',\r\n  updates: {\r\n    contractAddress: async (contractAddress) => {\r\n      try {\r\n        const resolvedAddress =\r\n          (isValidEnsName(contractAddress) || isValidCryptoDomainName(contractAddress)) &&\r\n          (await getAddressFromDomain(contractAddress))\r\n\r\n        if (resolvedAddress) {\r\n          return resolvedAddress\r\n        }\r\n\r\n        return contractAddress\r\n      } catch (e) {\r\n        console.error(e.message)\r\n        return contractAddress\r\n      }\r\n    },\r\n  },\r\n})\r\n\r\nexport const formMutators: Record<string, Mutator<{ selectedMethod: { name: string } }>> = {\r\n  setMax: (args, state, utils) => {\r\n    utils.changeValue(state, 'value', () => args[0])\r\n  },\r\n  setContractAddress: (args, state, utils) => {\r\n    utils.changeValue(state, 'contractAddress', () => args[0])\r\n  },\r\n  setSelectedMethod: (args, state, utils) => {\r\n    const modified =\r\n      state.lastFormState?.values.selectedMethod && state.lastFormState.values.selectedMethod.name !== args[0].name\r\n\r\n    if (modified) {\r\n      utils.changeValue(state, 'callResults', () => '')\r\n      utils.changeValue(state, 'value', () => '')\r\n    }\r\n\r\n    utils.changeValue(state, 'selectedMethod', () => args[0])\r\n  },\r\n  setCallResults: (args, state, utils) => {\r\n    utils.changeValue(state, 'callResults', () => args[0])\r\n  },\r\n  setAbiValue: (args, state, utils) => {\r\n    utils.changeValue(state, 'abi', () => args[0])\r\n  },\r\n}\r\n\r\nexport const isAddress = (type: string): boolean => type.indexOf('address') === 0\r\nexport const isBoolean = (type: string): boolean => type.indexOf('bool') === 0\r\nexport const isString = (type: string): boolean => type.indexOf('string') === 0\r\nexport const isUint = (type: string): boolean => type.indexOf('uint') === 0\r\nexport const isInt = (type: string): boolean => type.indexOf('int') === 0\r\nexport const isByte = (type: string): boolean => type.indexOf('byte') === 0\r\n\r\nexport const isArrayParameter = (parameter: string): boolean => /(\\[\\d*])+$/.test(parameter)\r\nexport const getParsedJSONOrArrayFromString = (parameter: string): (string | number)[] | null => {\r\n  try {\r\n    const arrayResult = JSON.parse(parameter)\r\n    return arrayResult.map((value) => {\r\n      if (Number.isInteger(value)) {\r\n        return new BigNumber(value).toString()\r\n      }\r\n      return value\r\n    })\r\n  } catch (err) {\r\n    return null\r\n  }\r\n}\r\n\r\nexport const handleSubmitError = (error: SubmissionErrors, values: Record<string, string>): Record<string, string> => {\r\n  for (const key in values) {\r\n    if (values.hasOwnProperty(key) && error !== undefined && values[key] === error.value) {\r\n      return { [key]: error.reason }\r\n    }\r\n  }\r\n\r\n  // .call() failed and we're logging a generic error\r\n  return { [FORM_ERROR]: error ? error.message : undefined }\r\n}\r\n\r\nexport const generateFormFieldKey = (type: string, signatureHash: string, index: number): string => {\r\n  const keyType = isArrayParameter(type) ? 'arrayParam' : type\r\n  return `methodInput-${signatureHash}_${index}_${keyType}`\r\n}\r\n\r\nconst extractMethodArgs = (signatureHash: string, values: Record<string, string>) => ({ type }, index) => {\r\n  const key = generateFormFieldKey(type, signatureHash, index)\r\n\r\n  return getParsedJSONOrArrayFromString(values[key]) || values[key]\r\n}\r\n\r\nexport const createTxObject = (\r\n  method: AbiItemExtended,\r\n  contractAddress: string,\r\n  values: Record<string, string>,\r\n): ContractSendMethod => {\r\n  const web3 = getWeb3()\r\n  const contract = new web3.eth.Contract([method], contractAddress)\r\n  const { inputs, name = '', signatureHash } = method\r\n  const args = inputs?.map(extractMethodArgs(signatureHash, values)) || []\r\n\r\n  return contract.methods[name](...args)\r\n}\r\n\r\nexport const isReadMethod = (method: AbiItemExtended): boolean => method && method.action === 'read'\r\n\r\nexport const getValueFromTxInputs = (key: string, type: string, tx: TransactionReviewType): string => {\r\n  if (isArrayParameter(type)) {\r\n    key = key.replace('[]', '')\r\n  }\r\n\r\n  let value = tx[key]\r\n\r\n  if (type === 'bool') {\r\n    value = String(value)\r\n  }\r\n\r\n  return value\r\n}\r\n","import { getIn } from 'final-form';\n\nvar isPromise = (function (obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n});\n\n//      \n\nvar tripleEquals = function tripleEquals(a, b) {\n  return a === b;\n};\n\nvar createDecorator = function createDecorator() {\n  for (var _len = arguments.length, calculations = new Array(_len), _key = 0; _key < _len; _key++) {\n    calculations[_key] = arguments[_key];\n  }\n\n  return function (form) {\n    var previousValues = {};\n    var unsubscribe = form.subscribe(function (_ref) {\n      var values = _ref.values;\n      form.batch(function () {\n        var runUpdates = function runUpdates(field, isEqual, updates) {\n          var next = values && getIn(values, field);\n          var previous = previousValues && getIn(previousValues, field);\n\n          if (!isEqual(next, previous)) {\n            if (typeof updates === 'function') {\n              var results = updates(next, field, values, previousValues);\n\n              if (isPromise(results)) {\n                results.then(function (resolved) {\n                  Object.keys(resolved).forEach(function (destField) {\n                    form.change(destField, resolved[destField]);\n                  });\n                });\n              } else {\n                Object.keys(results).forEach(function (destField) {\n                  form.change(destField, results[destField]);\n                });\n              }\n            } else {\n              Object.keys(updates).forEach(function (destField) {\n                var update = updates[destField];\n                var result = update(next, values, previousValues);\n\n                if (isPromise(result)) {\n                  result.then(function (resolved) {\n                    form.change(destField, resolved);\n                  });\n                } else {\n                  form.change(destField, result);\n                }\n              });\n            }\n          }\n        };\n\n        var fields = form.getRegisteredFields();\n        calculations.forEach(function (_ref2) {\n          var field = _ref2.field,\n              isEqual = _ref2.isEqual,\n              updates = _ref2.updates;\n\n          if (typeof field === 'string') {\n            runUpdates(field, isEqual || tripleEquals, updates);\n          } else {\n            // field is a either array or regex\n            var matches = Array.isArray(field) ? function (name) {\n              return ~field.indexOf(name) || field.findIndex(function (f) {\n                return f instanceof RegExp && f.test(name);\n              }) !== -1;\n            } : function (name) {\n              return field.test(name);\n            };\n            fields.forEach(function (fieldName) {\n              if (matches(fieldName)) {\n                runUpdates(fieldName, isEqual || tripleEquals, updates);\n              }\n            });\n          }\n        });\n        previousValues = values;\n      });\n    }, {\n      values: true\n    });\n    return unsubscribe;\n  };\n};\n\n//\n\nexport default createDecorator;\n","import { createStyles, makeStyles } from '@material-ui/core'\r\nimport {\r\n  background,\r\n  boldFont,\r\n  border,\r\n  error,\r\n  fontColor,\r\n  lg,\r\n  md,\r\n  secondaryText,\r\n  sm,\r\n  smallFontSize,\r\n  xl,\r\n} from 'src/theme/variables'\r\n\r\nexport const useStyles = makeStyles(\r\n  createStyles({\r\n    title: {\r\n      padding: lg,\r\n      paddingBottom: 0,\r\n    },\r\n    hide: {\r\n      '&:hover': {\r\n        backgroundColor: '#f7f5f5',\r\n      },\r\n      '&:hover $actions': {\r\n        visibility: 'initial',\r\n      },\r\n    },\r\n    actions: {\r\n      justifyContent: 'flex-end',\r\n      visibility: 'hidden',\r\n    },\r\n    noBorderBottom: {\r\n      '& > td': {\r\n        borderBottom: 'none',\r\n      },\r\n    },\r\n    annotation: {\r\n      paddingLeft: lg,\r\n    },\r\n    ownersText: {\r\n      color: secondaryText,\r\n      '& b': {\r\n        color: fontColor,\r\n      },\r\n    },\r\n    container: {\r\n      padding: lg,\r\n    },\r\n    actionButton: {\r\n      fontWeight: boldFont,\r\n      marginRight: sm,\r\n    },\r\n    buttonRow: {\r\n      padding: lg,\r\n      position: 'absolute',\r\n      left: 0,\r\n      bottom: 0,\r\n      boxSizing: 'border-box',\r\n      width: '100%',\r\n      justifyContent: 'flex-end',\r\n      borderTop: `2px solid ${border}`,\r\n    },\r\n    modifyBtn: {\r\n      height: xl,\r\n      fontSize: smallFontSize,\r\n    },\r\n    removeModuleIcon: {\r\n      marginLeft: lg,\r\n      cursor: 'pointer',\r\n    },\r\n    modalHeading: {\r\n      boxSizing: 'border-box',\r\n      justifyContent: 'space-between',\r\n      height: '74px',\r\n      padding: `${sm} ${lg}`,\r\n    },\r\n    modalContainer: {\r\n      minHeight: '369px',\r\n    },\r\n    modalManage: {\r\n      fontSize: lg,\r\n    },\r\n    modalClose: {\r\n      height: '35px',\r\n      width: '35px',\r\n    },\r\n    modalButtonRow: {\r\n      height: '84px',\r\n      justifyContent: 'center',\r\n    },\r\n    modalButtonRemove: {\r\n      color: '#fff',\r\n      backgroundColor: error,\r\n      height: '42px',\r\n    },\r\n    modalName: {\r\n      textOverflow: 'ellipsis',\r\n      overflow: 'hidden',\r\n    },\r\n    modalUserName: {\r\n      whiteSpace: 'nowrap',\r\n    },\r\n    modalOwner: {\r\n      backgroundColor: background,\r\n      padding: md,\r\n      alignItems: 'center',\r\n    },\r\n    modalUser: {\r\n      justifyContent: 'left',\r\n    },\r\n    modalDescription: {\r\n      padding: md,\r\n    },\r\n    modalOpen: {\r\n      paddingLeft: sm,\r\n      width: 'auto',\r\n      '&:hover': {\r\n        cursor: 'pointer',\r\n      },\r\n    },\r\n    amountInput: {\r\n      width: '100% !important',\r\n    },\r\n    gasCostsContainer: {\r\n      backgroundColor: background,\r\n      padding: `0 ${lg}`,\r\n    },\r\n  }),\r\n)\r\n","import { RadioButtons, Text } from '@gnosis.pm/safe-react-components'\r\nimport { FormControlLabel, hexToRgb, Switch as SwitchMui } from '@material-ui/core'\r\nimport React, { ReactElement } from 'react'\r\nimport { useField } from 'react-final-form'\r\nimport styled from 'styled-components'\r\n\r\nimport { getNetworkName } from 'src/config'\r\nimport { Field } from 'src/routes/safe/components/Settings/SpendingLimit/FormFields/Amount'\r\n\r\n// TODO: propose refactor in safe-react-components based on this requirements\r\nconst SpendingLimitRadioButtons = styled(RadioButtons)`\r\n  & .MuiRadio-colorPrimary.Mui-checked {\r\n    color: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\n// TODO: add `name` and `value` to SRC Switch, as they're required for a better RFF integration\r\nconst StyledSwitch = styled(({ ...rest }) => <SwitchMui {...rest} />)`\r\n  && {\r\n    .MuiIconButton-label,\r\n    .MuiSwitch-colorSecondary {\r\n      color: ${({ theme }) => theme.colors.icon};\r\n    }\r\n\r\n    .MuiSwitch-colorSecondary.Mui-checked .MuiIconButton-label {\r\n      color: ${({ theme }) => theme.colors.primary};\r\n    }\r\n\r\n    .MuiSwitch-colorSecondary.Mui-checked:hover {\r\n      background-color: ${({ theme }) => hexToRgb(`${theme.colors.primary}03`)};\r\n    }\r\n\r\n    .Mui-checked + .MuiSwitch-track {\r\n      background-color: ${({ theme }) => theme.colors.primaryLight};\r\n    }\r\n  }\r\n`\r\n\r\ninterface RadioButtonOption {\r\n  label: string\r\n  value: string\r\n}\r\n\r\ninterface RadioButtonProps {\r\n  options: RadioButtonOption[]\r\n  initialValue: string\r\n  groupName: string\r\n}\r\n\r\nconst SafeRadioButtons = ({ options, initialValue, groupName }: RadioButtonProps): ReactElement => (\r\n  <Field name={groupName} initialValue={initialValue}>\r\n    {({ input: { name, value, onChange } }) => (\r\n      <SpendingLimitRadioButtons name={name} value={value || initialValue} onRadioChange={onChange} options={options} />\r\n    )}\r\n  </Field>\r\n)\r\n\r\nconst Switch = ({ label, name }: { label: string; name: string }): ReactElement => (\r\n  <FormControlLabel\r\n    label={label}\r\n    control={\r\n      <Field\r\n        name={name}\r\n        type=\"checkbox\"\r\n        render={({ input: { checked, onChange, name, value } }) => (\r\n          <StyledSwitch checked={checked} onChange={onChange} name={name} value={value} />\r\n        )}\r\n      />\r\n    }\r\n  />\r\n)\r\n\r\nconst ResetTimeLabel = styled.div`\r\n  grid-area: resetTimeLabel;\r\n`\r\n\r\nconst ResetTimeToggle = styled.div`\r\n  grid-area: resetTimeToggle;\r\n`\r\n\r\nconst ResetTimeOptions = styled.div`\r\n  grid-area: resetTimeOption;\r\n`\r\n\r\nconst RESET_TIME_OPTIONS = [\r\n  { label: '1 day', value: '1440' }, // 1 day x 24h x 60min\r\n  { label: '1 week', value: '10080' }, // 7 days x 24h x 60min\r\n  { label: '1 month', value: '43200' }, // 30 days x 24h x 60min\r\n]\r\n\r\nconst RINKEBY_RESET_TIME_OPTIONS = [\r\n  { label: '5 minutes', value: '5' },\r\n  { label: '30 minutes', value: '30' },\r\n  { label: '1 hour', value: '60' },\r\n]\r\n\r\nexport const getResetTimeOptions = (): RadioButtonOption[] => {\r\n  const currentNetwork = getNetworkName().toLowerCase()\r\n  return currentNetwork !== 'rinkeby' ? RESET_TIME_OPTIONS : RINKEBY_RESET_TIME_OPTIONS\r\n}\r\n\r\nconst ResetTime = (): ReactElement => {\r\n  const {\r\n    input: { value: withResetTime },\r\n  } = useField('withResetTime', { subscription: { value: true } })\r\n\r\n  const resetTimeOptions = getResetTimeOptions()\r\n\r\n  const switchExplanation = withResetTime ? 'choose reset time period' : 'one time'\r\n\r\n  return (\r\n    <>\r\n      <ResetTimeLabel>\r\n        <Text size=\"xl\">Set a reset time so the allowance automatically refills after the defined time period.</Text>\r\n      </ResetTimeLabel>\r\n      <ResetTimeToggle>\r\n        <Switch label={`Reset time (${switchExplanation})`} name=\"withResetTime\" />\r\n      </ResetTimeToggle>\r\n      {withResetTime && (\r\n        <ResetTimeOptions>\r\n          <SafeRadioButtons groupName=\"resetTime\" initialValue={resetTimeOptions[0].value} options={resetTimeOptions} />\r\n        </ResetTimeOptions>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ResetTime\r\n","import { TextField as SRCTextField } from '@gnosis.pm/safe-react-components'\r\nimport React, { ReactElement } from 'react'\r\nimport { useField } from 'react-final-form'\r\nimport { useSelector } from 'react-redux'\r\nimport styled from 'styled-components'\r\n\r\nimport GnoField from 'src/components/forms/Field'\r\nimport { composeValidators, minValue, mustBeFloat, required } from 'src/components/forms/validator'\r\nimport { extendedSafeTokensSelector } from 'src/routes/safe/container/selector'\r\nimport { useStyles } from 'src/routes/safe/components/Settings/SpendingLimit/style'\r\n\r\nexport const Field = styled(GnoField)`\r\n  margin: 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst AmountInput = styled.div`\r\n  grid-area: amountInput;\r\n`\r\n\r\nconst TextField = styled(SRCTextField)`\r\n  margin: 0;\r\n`\r\n\r\nconst Amount = (): ReactElement => {\r\n  const classes = useStyles()\r\n\r\n  const {\r\n    input: { value: tokenAddress },\r\n  } = useField('token', { subscription: { value: true } })\r\n  const {\r\n    meta: { touched, visited },\r\n  } = useField('amount', { subscription: { touched: true, visited: true } })\r\n\r\n  const tokens = useSelector(extendedSafeTokensSelector)\r\n\r\n  const selectedTokenRecord = tokens.find((token) => token.address === tokenAddress)\r\n\r\n  const validate = (touched || visited) && composeValidators(required, mustBeFloat, minValue(0, false))\r\n\r\n  return (\r\n    <AmountInput>\r\n      <Field\r\n        component={TextField}\r\n        label=\"Amount*\"\r\n        name=\"amount\"\r\n        type=\"text\"\r\n        data-testid=\"amount-input\"\r\n        endAdornment={selectedTokenRecord?.symbol}\r\n        className={classes.amountInput}\r\n        validate={validate}\r\n      />\r\n    </AmountInput>\r\n  )\r\n}\r\n\r\nexport default Amount\r\n","import { Text } from '@gnosis.pm/safe-react-components'\r\nimport React, { ReactElement } from 'react'\r\n\r\ninterface GenericInfoProps {\r\n  title?: string\r\n  children: React.ReactNode\r\n}\r\n\r\nconst DataDisplay = ({ title, children }: GenericInfoProps): ReactElement => (\r\n  <>\r\n    {title && (\r\n      <Text size=\"md\" color=\"secondaryLight\">\r\n        {title}\r\n      </Text>\r\n    )}\r\n    {children}\r\n  </>\r\n)\r\n\r\nexport default DataDisplay\r\n","import { EthHashInfo } from '@gnosis.pm/safe-react-components'\r\nimport React, { ReactElement } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { getExplorerInfo } from 'src/config'\r\nimport { getNameFromAddressBookSelector } from 'src/logic/addressBook/store/selectors'\r\nimport { ADDRESS_BOOK_DEFAULT_NAME } from 'src/logic/addressBook/model/addressBook'\r\nimport { sameString } from 'src/utils/strings'\r\n\r\nimport DataDisplay from './DataDisplay'\r\n\r\ninterface AddressInfoProps {\r\n  address: string\r\n  title?: string\r\n}\r\n\r\nconst AddressInfo = ({ address, title }: AddressInfoProps): ReactElement => {\r\n  const name = useSelector((state) => getNameFromAddressBookSelector(state, { address }))\r\n  const explorerUrl = getExplorerInfo(address)\r\n\r\n  return (\r\n    <DataDisplay title={title}>\r\n      <EthHashInfo\r\n        hash={address}\r\n        name={sameString(name, ADDRESS_BOOK_DEFAULT_NAME) ? undefined : name}\r\n        showCopyBtn\r\n        showAvatar\r\n        textSize=\"lg\"\r\n        explorerUrl={explorerUrl}\r\n      />\r\n    </DataDisplay>\r\n  )\r\n}\r\n\r\nexport default AddressInfo\r\n","import { IconText, Text } from '@gnosis.pm/safe-react-components'\r\nimport React, { ReactElement } from 'react'\r\n\r\nimport Row from 'src/components/layout/Row'\r\n\r\nimport DataDisplay from './DataDisplay'\r\n\r\ninterface ResetTimeInfoProps {\r\n  title?: string\r\n  label?: string\r\n}\r\n\r\nconst ResetTimeInfo = ({ title, label }: ResetTimeInfoProps): ReactElement => {\r\n  return (\r\n    <DataDisplay title={title}>\r\n      {label ? (\r\n        <Row align=\"center\" margin=\"md\">\r\n          <IconText iconSize=\"md\" iconType=\"fuelIndicator\" text={label} textSize=\"lg\" />\r\n        </Row>\r\n      ) : (\r\n        <Row align=\"center\" margin=\"md\">\r\n          <Text size=\"lg\">One-time spending limit</Text>\r\n        </Row>\r\n      )}\r\n    </DataDisplay>\r\n  )\r\n}\r\n\r\nexport default ResetTimeInfo\r\n","import { Text } from '@gnosis.pm/safe-react-components'\r\nimport React, { ReactElement } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport { Token } from 'src/logic/tokens/store/model/token'\r\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\r\n\r\nimport DataDisplay from './DataDisplay'\r\n\r\nconst StyledImage = styled.img`\r\n  width: 32px;\r\n  height: 32px;\r\n  object-fit: contain;\r\n  margin: 0 8px 0 0;\r\n`\r\nconst StyledImageName = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\ninterface TokenInfoProps {\r\n  amount: string\r\n  title?: string\r\n  token: Token\r\n}\r\n\r\nconst TokenInfo = ({ amount, title, token }: TokenInfoProps): ReactElement => {\r\n  return (\r\n    <DataDisplay title={title}>\r\n      <StyledImageName>\r\n        <StyledImage alt={token.name} onError={setImageToPlaceholder} src={token.logoUri} />\r\n        <Text size=\"lg\">\r\n          {amount} {token.symbol}\r\n        </Text>\r\n      </StyledImageName>\r\n    </DataDisplay>\r\n  )\r\n}\r\n\r\nexport default TokenInfo\r\n","import { useSelector } from 'react-redux'\r\n\r\nimport { Token } from 'src/logic/tokens/store/model/token'\r\nimport { sameAddress } from 'src/logic/wallets/ethAddresses'\r\nimport { safeKnownCoins } from 'src/routes/safe/container/selector'\r\n\r\nconst useTokenInfo = (address: string): Token | undefined => {\r\n  const tokens = useSelector(safeKnownCoins)\r\n\r\n  if (tokens) {\r\n    return tokens.find((token) => sameAddress(token.address, address))\r\n  }\r\n}\r\n\r\nexport default useTokenInfo\r\n","export default __webpack_public_path__ + \"static/media/custom.c5c7edba.svg\";","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"\n}), 'MoreHoriz');\n\nexports.default = _default;","import { useCallback, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { loadPagedHistoryTransactions } from 'src/logic/safe/store/actions/transactions/fetchTransactions/loadGatewayTransactions'\r\nimport { addHistoryTransactions } from 'src/logic/safe/store/actions/transactions/gatewayTransactions'\r\nimport { TransactionDetails } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { safeParamAddressFromStateSelector } from 'src/logic/safe/store/selectors'\r\nimport { useHistoryTransactions } from 'src/routes/safe/components/Transactions/TxList/hooks/useHistoryTransactions'\r\n\r\ntype PagedTransactions = {\r\n  count: number\r\n  transactions: TransactionDetails['transactions']\r\n  hasMore: boolean\r\n  next: () => Promise<void>\r\n  isLoading: boolean\r\n}\r\n\r\nexport const usePagedHistoryTransactions = (): PagedTransactions => {\r\n  const { count, transactions } = useHistoryTransactions()\r\n\r\n  const dispatch = useRef(useDispatch())\r\n  const safeAddress = useRef(useSelector(safeParamAddressFromStateSelector))\r\n  const [hasMore, setHasMore] = useState(true)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  const next = useCallback(async () => {\r\n    setIsLoading(true)\r\n    const results = await loadPagedHistoryTransactions(safeAddress.current)\r\n\r\n    if (!results) {\r\n      setHasMore(false)\r\n      setIsLoading(false)\r\n      return\r\n    }\r\n\r\n    const { values, next } = results\r\n\r\n    if (next === null) {\r\n      setHasMore(false)\r\n    }\r\n\r\n    if (values) {\r\n      dispatch.current(addHistoryTransactions({ safeAddress: safeAddress.current, values, isTail: true }))\r\n    } else {\r\n      setHasMore(false)\r\n    }\r\n    setIsLoading(false)\r\n  }, [])\r\n\r\n  return { count, transactions, hasMore, next, isLoading }\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { TransactionDetails } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { historyTransactions } from 'src/logic/safe/store/selectors/gatewayTransactions'\r\n\r\nexport const useHistoryTransactions = (): TransactionDetails => {\r\n  const historyTxs = useSelector(historyTransactions)\r\n  const [count, setCount] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const history = historyTxs\r\n      ? Object.entries(historyTxs).reduce((acc, [, transactions]) => (acc += transactions.length), 0)\r\n      : 0\r\n    setCount(history)\r\n  }, [historyTxs])\r\n\r\n  return {\r\n    count,\r\n    transactions: historyTxs ? Object.entries(historyTxs) : [],\r\n  }\r\n}\r\n","import {\r\n  Text,\r\n  Accordion,\r\n  AccordionDetails,\r\n  AccordionSummary,\r\n  EthHashInfo,\r\n  IconText,\r\n} from '@gnosis.pm/safe-react-components'\r\nimport styled, { css } from 'styled-components'\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n`\r\n\r\nexport const Breadcrumb = styled(IconText)`\r\n  p {\r\n    font-weight: bold;\r\n  }\r\n`\r\n\r\nexport const ContentWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-grow: 1;\r\n  align-items: center;\r\n`\r\n\r\nexport const ColumnDisplayAccordionDetails = styled(AccordionDetails)`\r\n  flex-flow: column;\r\n`\r\n\r\nexport const NoPaddingAccordion = styled(Accordion)`\r\n  &.MuiAccordion-root {\r\n    background-color: transparent;\r\n\r\n    .MuiAccordionDetails-root {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nexport const ActionAccordion = styled(Accordion)`\r\n  &.MuiAccordion-root {\r\n    &:first-child {\r\n      border-top: none;\r\n    }\r\n\r\n    &.Mui-expanded {\r\n      &:last-child {\r\n        border-bottom: none;\r\n      }\r\n    }\r\n\r\n    .MuiAccordionDetails-root {\r\n      padding: 16px;\r\n    }\r\n  }\r\n`\r\n\r\nexport const StyledTransactionsGroup = styled.div`\r\n  align-items: flex-start;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  margin: 16px 8px;\r\n  width: 98%;\r\n`\r\n\r\nexport const H2 = styled.h2`\r\n  text-transform: uppercase;\r\n  font-size: smaller;\r\n`\r\n\r\nexport const SubTitle = styled(Text)`\r\n  margin-bottom: 8px;\r\n\r\n  font-size: 0.76em;\r\n  font-weight: 600;\r\n  line-height: 1.5;\r\n  letter-spacing: 1px;\r\n  color: ${({ theme }) => theme.colors.placeHolder};\r\n  text-transform: uppercase;\r\n`\r\n\r\nexport const StyledTransactions = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.white};\r\n  border-radius: 8px;\r\n  box-shadow: #00000026 0 4px 12px 0;\r\n  overflow: hidden;\r\n  width: 100%;\r\n\r\n  & > .MuiAccordion-root {\r\n    &:first-child {\r\n      border-top: none;\r\n    }\r\n\r\n    &:last-child {\r\n      border-bottom: none;\r\n    }\r\n  }\r\n`\r\n\r\nexport const GroupedTransactionsCard = styled(StyledTransactions)`\r\n  transition: all 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\r\n  background-color: transparent;\r\n  border-radius: 0;\r\n  box-shadow: none;\r\n\r\n  &:not(:last-child) {\r\n    border-bottom: 2px solid ${({ theme }) => theme.colors.separator};\r\n  }\r\n\r\n  .MuiAccordion-root,\r\n  .MuiAccordionSummary-root,\r\n  .MuiAccordionDetails-root {\r\n    background-color: transparent;\r\n\r\n    &:hover,\r\n    &.Mui-expanded {\r\n      background-color: transparent;\r\n    }\r\n  }\r\n\r\n  &:hover {\r\n    background-color: ${({ theme }) => theme.colors.background};\r\n\r\n    .MuiAccordionDetails-root {\r\n      div[class^='tx-'] {\r\n        background-color: ${({ theme }) => theme.colors.background};\r\n      }\r\n    }\r\n\r\n    .disclaimer-container {\r\n      background-color: ${({ theme }) => theme.colors.inputField};\r\n    }\r\n  }\r\n`\r\nconst gridColumns = {\r\n  nonce: '0.5fr',\r\n  type: '3fr',\r\n  info: '3fr',\r\n  time: '2.5fr',\r\n  votes: '1.5fr',\r\n  actions: '1fr',\r\n  status: '2.5fr',\r\n}\r\n\r\nconst willBeReplaced = css`\r\n  .will-be-replaced * {\r\n    color: gray !important;\r\n    text-decoration: line-through !important;\r\n    filter: grayscale(1) opacity(0.8) !important;\r\n  }\r\n`\r\n\r\nconst failedTransaction = css`\r\n  &.failed-transaction {\r\n    div[class^='tx-']:not(.tx-status):not(.tx-nonce) {\r\n      opacity: 0.5;\r\n    }\r\n  }\r\n`\r\n\r\nconst onChainRejection = css`\r\n  &.on-chain-rejection {\r\n    background-color: ${({ theme }) => theme.colors.errorTooltip};\r\n    border-left: 4px solid ${({ theme }) => theme.colors.error};\r\n    border-radius: 4px;\r\n    padding-left: 7px;\r\n    height: 22px;\r\n    max-width: 165px;\r\n\r\n    > div {\r\n      height: 17px;\r\n      align-items: center;\r\n      padding-top: 3px;\r\n    }\r\n\r\n    p {\r\n      font-size: 11px;\r\n      line-height: 16px;\r\n      letter-spacing: 1px;\r\n      font-weight: bold;\r\n      text-transform: uppercase;\r\n      margin-left: -2px;\r\n    }\r\n  }\r\n`\r\n\r\nexport const StyledTransaction = styled.div`\r\n  ${willBeReplaced};\r\n  ${failedTransaction};\r\n\r\n  display: grid;\r\n  grid-template-columns: ${Object.values(gridColumns).join(' ')};\r\n  width: 100%;\r\n\r\n  & > div {\r\n    align-self: center;\r\n  }\r\n\r\n  .tx-type {\r\n    ${onChainRejection};\r\n  }\r\n\r\n  .tx-votes {\r\n    justify-self: center;\r\n  }\r\n\r\n  .tx-actions {\r\n    visibility: hidden;\r\n    justify-self: end;\r\n  }\r\n\r\n  .tx-status {\r\n    justify-self: end;\r\n    margin-right: 8px;\r\n    display: flex;\r\n    flex-flow: row nowrap;\r\n    align-items: center;\r\n    justify-content: end;\r\n\r\n    p {\r\n      margin-left: 8px;\r\n    }\r\n  }\r\n\r\n  &:hover {\r\n    .tx-actions {\r\n      visibility: visible;\r\n\r\n      &.will-be-replaced {\r\n        visibility: hidden;\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const StyledGroupedTransactions = styled(StyledTransaction)`\r\n  // no \\`tx-nonce\\` column required\r\n  grid-template-columns: ${Object.values(gridColumns).slice(1).join(' ')};\r\n`\r\n\r\nexport const GroupedTransactions = styled(StyledTransaction)`\r\n  // add a bottom division line for all elements but the last\r\n  &:not(:last-of-type) {\r\n    border-bottom: 2px solid ${({ theme }) => theme.colors.separator};\r\n  }\r\n\r\n  // builds the tree-view layout\r\n  .tree-lines {\r\n    height: 100%;\r\n    margin-left: 30px;\r\n    position: relative;\r\n    width: 30%;\r\n\r\n    // this is a special case, the first element in the list needs to have a block child component\r\n    // add tree lines line to the first item of the list\r\n    .first-node {\r\n      display: block;\r\n      position: absolute;\r\n      top: -16px;\r\n      width: 100%;\r\n\r\n      &::before {\r\n        border-bottom: 2px solid ${({ theme }) => theme.colors.separator};\r\n        border-left: 2px solid ${({ theme }) => theme.colors.separator};\r\n        content: '';\r\n        height: 22px;\r\n        position: absolute;\r\n        top: 8px;\r\n        width: 100%;\r\n      }\r\n    }\r\n\r\n    // add tree lines to all elements of the list (except for the last one)\r\n    // :last-of-type won't work with classes selector (HTML elements only)\r\n    // as we need block-level elements, we're using paragraphs for .tree-lines and .first-node\r\n    // given that divs are already being used for the transaction row, and both (p and div) are siblings\r\n    &:not(:last-of-type) {\r\n      &::before {\r\n        border-bottom: 2px solid ${({ theme }) => theme.colors.separator};\r\n        border-left: 2px solid ${({ theme }) => theme.colors.separator};\r\n        content: '';\r\n        height: 100%;\r\n        margin-top: 14px;\r\n        position: absolute;\r\n        width: 100%;\r\n      }\r\n    }\r\n  }\r\n\r\n  // overrides Accordion styles, as grouped txs behave differently\r\n  > .MuiAccordion-root {\r\n    transition: none;\r\n    border: 0;\r\n    grid-column-end: span 6;\r\n    grid-column-start: 2;\r\n\r\n    &:first-child {\r\n      border: 0;\r\n    }\r\n\r\n    &.Mui-expanded {\r\n      justify-self: center;\r\n      width: calc(100% - 32px);\r\n\r\n      &:not(:last-of-type) {\r\n        border-bottom: 2px solid ${({ theme }) => theme.colors.separator};\r\n      }\r\n\r\n      &:not(:first-of-type) {\r\n        border-top: 2px solid ${({ theme }) => theme.colors.separator};\r\n        // if two consecutive accordions are expanded, borders will get duplicated\r\n        // this rule is to overlap them\r\n        margin-top: -2px;\r\n      }\r\n\r\n      > .MuiAccordionSummary-root {\r\n        padding: 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nexport const DisclaimerContainer = styled(StyledTransaction)`\r\n  background-color: ${({ theme }) => theme.colors.inputField} !important;\r\n  border-radius: 4px;\r\n  margin: 12px 8px 0 12px;\r\n  padding: 8px 12px;\r\n  width: calc(100% - 48px);\r\n\r\n  .nonce {\r\n    grid-column-start: 1;\r\n  }\r\n\r\n  .disclaimer {\r\n    grid-column-start: 2;\r\n    grid-column-end: span 6;\r\n  }\r\n`\r\n\r\nexport const TxDetailsContainer = styled.div`\r\n  ${willBeReplaced};\r\n\r\n  background-color: ${({ theme }) => theme.colors.separator} !important;\r\n  column-gap: 2px;\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  grid-auto-rows: minmax(min-content, max-content);\r\n  grid-template-rows: [tx-summary] minmax(min-content, max-content) [tx-details] minmax(min-content, 1fr);\r\n  row-gap: 2px;\r\n  width: 100%;\r\n\r\n  & > div {\r\n    background-color: ${({ theme }) => theme.colors.white};\r\n    line-break: anywhere;\r\n    overflow: hidden;\r\n    padding: 20px 24px;\r\n    word-break: break-all;\r\n  }\r\n\r\n  .tx-summary {\r\n  }\r\n\r\n  .tx-details {\r\n    &.not-executed {\r\n      grid-row-end: span 2;\r\n    }\r\n\r\n    &.no-padding {\r\n      padding: 0;\r\n    }\r\n  }\r\n\r\n  .tx-owners {\r\n    padding: 24px;\r\n    grid-column-start: 2;\r\n    grid-row-end: span 2;\r\n    grid-row-start: 1;\r\n\r\n    &.no-owner {\r\n      grid-row-end: span 3;\r\n    }\r\n  }\r\n\r\n  .tx-details-actions {\r\n    align-items: center;\r\n    display: flex;\r\n    height: 60px;\r\n    justify-content: center;\r\n\r\n    button {\r\n      color: ${({ theme }) => theme.colors.white};\r\n      margin: 0 8px;\r\n\r\n      &:hover {\r\n        color: ${({ theme }) => theme.colors.white};\r\n      }\r\n\r\n      &.error {\r\n        background-color: ${({ theme }) => theme.colors.error};\r\n\r\n        &:hover {\r\n          background-color: ${({ theme }) => theme.colors.errorHover};\r\n        }\r\n      }\r\n\r\n      &.primary {\r\n        background-color: ${({ theme }) => theme.colors.primary};\r\n\r\n        &:hover {\r\n          background-color: ${({ theme }) => theme.colors.secondary};\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const OwnerList = styled.ul`\r\n  list-style: none;\r\n  margin: 0;\r\n  padding-left: 6px;\r\n\r\n  .legend {\r\n    left: 15px;\r\n    padding-bottom: 0.86em;\r\n    position: relative;\r\n    top: -3px;\r\n\r\n    .owner-info {\r\n      margin: 5px;\r\n    }\r\n\r\n    span {\r\n      color: #008c73;\r\n      font-weight: bold;\r\n    }\r\n  }\r\n\r\n  ul {\r\n    margin-top: 0;\r\n  }\r\n\r\n  .icon {\r\n    left: -7px;\r\n    position: absolute;\r\n    width: 16px;\r\n    z-index: 2;\r\n  }\r\n`\r\n\r\nexport const OwnerListItem = styled.li`\r\n  display: flex;\r\n  position: relative;\r\n\r\n  &::before {\r\n    border-left: 2px ${({ theme }) => theme.colors.icon} solid;\r\n    border-radius: 1px;\r\n    content: '';\r\n    height: calc(100% - 16px);\r\n    top: 16px;\r\n    left: 0;\r\n    position: absolute;\r\n    z-index: 1;\r\n  }\r\n\r\n  &:last-child::before {\r\n    border-left: none;\r\n  }\r\n`\r\n\r\nexport const InlineEthHashInfo = styled(EthHashInfo)`\r\n  display: inline-flex;\r\n`\r\n\r\nexport const StyledScrollableBar = styled.div`\r\n  &::-webkit-scrollbar {\r\n    width: 0.7em;\r\n    scroll-behavior: smooth;\r\n  }\r\n\r\n  &::-webkit-scrollbar-track {\r\n    box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\r\n    border-radius: 20px;\r\n  }\r\n\r\n  &::-webkit-scrollbar-thumb {\r\n    background-color: darkgrey;\r\n    outline: 1px solid #dadada;\r\n    border-radius: 20px;\r\n  }\r\n\r\n  // firefox experimental\r\n  scrollbar-color: darkgrey #dadada;\r\n  scrollbar-width: thin;\r\n`\r\n\r\nexport const ScrollableTransactionsContainer = styled(StyledScrollableBar)`\r\n  height: calc(100vh - 225px);\r\n  overflow-x: hidden;\r\n  overflow-y: auto;\r\n  width: 100%;\r\n`\r\nexport const Centered = styled.div<{ padding?: number }>`\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  padding: ${({ padding }) => `${padding}px`};\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nexport const HorizontallyCentered = styled(Centered)<{ isVisible: boolean }>`\r\n  visibility: ${({ isVisible }) => (isVisible ? 'visible' : 'hidden')};\r\n  height: 100px;\r\n`\r\n\r\nexport const StyledAccordionSummary = styled(AccordionSummary)`\r\n  height: 52px;\r\n  .tx-nonce {\r\n    margin: 0 16px 0 8px;\r\n  }\r\n`\r\nexport const AlignItemsWithMargin = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  span:first-child {\r\n    margin-right: 6px;\r\n  }\r\n`\r\nexport const NoTransactions = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-top: 60px;\r\n`\r\n","import { ObserverInstanceCallback } from './index';\n\nconst ObserverMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element, string> = new WeakMap();\n\nlet rootId = 0;\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root?: Element | null) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = ObserverMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    ObserverMap.set(id, instance);\n  }\n\n  return instance;\n}\n\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n) {\n  if (!element) return () => {};\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      ObserverMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observers';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  static displayName = 'InView';\n  static defaultProps = {\n    threshold: 0,\n    triggerOnce: false,\n    initialInView: false,\n  };\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const { threshold, root, rootMargin, trackVisibility, delay } = this.props;\n\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold,\n      root,\n      rootMargin,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay,\n    });\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      tag,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || tag || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import React, { createContext, forwardRef, MutableRefObject, ReactElement, ReactNode, useEffect, useState } from 'react'\r\nimport { InViewHookResponse, useInView } from 'react-intersection-observer'\r\n\r\nexport const INFINITE_SCROLL_CONTAINER = 'infinite-scroll-container'\r\n\r\nexport const InfiniteScrollContext = createContext<{\r\n  ref: MutableRefObject<HTMLDivElement | null> | ((instance: HTMLDivElement | null) => void) | null\r\n  lastItemId?: string\r\n  setLastItemId: (itemId?: string) => void\r\n}>({ setLastItemId: () => {}, ref: null })\r\n\r\nexport const InfiniteScrollProvider = forwardRef<HTMLDivElement, { children: ReactNode }>(\r\n  ({ children }, ref): ReactElement => {\r\n    const [lastItemId, _setLastItemId] = useState<string>()\r\n\r\n    const setLastItemId = (itemId?: string) => {\r\n      setTimeout(() => _setLastItemId(itemId), 0)\r\n    }\r\n\r\n    return (\r\n      <InfiniteScrollContext.Provider value={{ ref, lastItemId, setLastItemId }}>\r\n        {children}\r\n      </InfiniteScrollContext.Provider>\r\n    )\r\n  },\r\n)\r\n\r\nInfiniteScrollProvider.displayName = 'InfiniteScrollProvider'\r\n\r\ntype InfiniteScrollProps = {\r\n  children: ReactNode\r\n  hasMore: boolean\r\n  next: () => Promise<void>\r\n  config?: InViewHookResponse\r\n}\r\n\r\nexport const InfiniteScroll = ({ children, hasMore, next, config }: InfiniteScrollProps): ReactElement => {\r\n  const { ref, inView } = useInView({\r\n    threshold: 0,\r\n    root: document.querySelector(`#${INFINITE_SCROLL_CONTAINER}`),\r\n    rootMargin: '0px 0px 200px 0px',\r\n    triggerOnce: true,\r\n    ...config,\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (inView && hasMore) {\r\n      next()\r\n    }\r\n  }, [inView, hasMore, next])\r\n\r\n  return <InfiniteScrollProvider ref={ref}>{children}</InfiniteScrollProvider>\r\n}\r\n","import * as React from 'react';\nimport { InViewHookResponse, IntersectionOptions } from './index';\nimport { useEffect } from 'react';\nimport { observe } from './observers';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const unobserve = React.useRef<Function>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n  });\n  const setRef = React.useCallback(\n    (node) => {\n      if (unobserve.current !== undefined) {\n        unobserve.current();\n        unobserve.current = undefined;\n      }\n\n      // Skip creating the observer\n      if (skip) return;\n\n      if (node) {\n        unobserve.current = observe(\n          node,\n          (inView, entry) => {\n            setState({ inView, entry });\n\n            if (entry.isIntersecting && triggerOnce && unobserve.current) {\n              // If it should only trigger once, unobserve the element after it's inView\n              unobserve.current();\n              unobserve.current = undefined;\n            }\n          },\n          {\n            root,\n            rootMargin,\n            threshold,\n            // @ts-ignore\n            trackVisibility,\n            // @ts-ignore\n            delay,\n          },\n        );\n      }\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      delay,\n    ],\n  );\n\n  /* eslint-disable-next-line */\n  useEffect(() => {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n      });\n    }\n  });\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n","import { Loader } from '@gnosis.pm/safe-react-components'\r\nimport React, { ReactElement, ReactNode } from 'react'\r\n\r\nimport { INFINITE_SCROLL_CONTAINER, InfiniteScroll } from 'src/components/InfiniteScroll'\r\nimport { HorizontallyCentered, ScrollableTransactionsContainer } from './styled'\r\n\r\ntype TxsInfiniteScrollProps = {\r\n  children: ReactNode\r\n  next: () => Promise<void>\r\n  hasMore: boolean\r\n  isLoading: boolean\r\n}\r\n\r\nexport const TxsInfiniteScroll = ({ children, next, hasMore, isLoading }: TxsInfiniteScrollProps): ReactElement => {\r\n  return (\r\n    <InfiniteScroll next={next} hasMore={hasMore}>\r\n      <ScrollableTransactionsContainer id={INFINITE_SCROLL_CONTAINER}>\r\n        {children}\r\n        <HorizontallyCentered isVisible={isLoading}>\r\n          <Loader size=\"md\" />\r\n        </HorizontallyCentered>\r\n      </ScrollableTransactionsContainer>\r\n    </InfiniteScroll>\r\n  )\r\n}\r\n\r\nexport { InfiniteScrollContext as TxsInfiniteScrollContext } from 'src/components/InfiniteScroll'\r\n","import { useEffect, useState } from 'react'\r\n\r\nimport { getNetworkInfo } from 'src/config'\r\nimport {\r\n  Custom,\r\n  isCustomTxInfo,\r\n  isSettingsChangeTxInfo,\r\n  isTransferTxInfo,\r\n  SettingsChange,\r\n  TransactionInfo,\r\n} from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { getTxAmount, NOT_AVAILABLE } from 'src/routes/safe/components/Transactions/TxList/utils'\r\n\r\nexport type TokenTransferAsset = {\r\n  type: 'Transfer'\r\n  name: string\r\n  logoUri: string\r\n  directionSign: '+' | '-' | ''\r\n  amountWithSymbol: string\r\n  tokenType: string\r\n}\r\n\r\nexport type AssetInfo = TokenTransferAsset | SettingsChange | Custom\r\n\r\nexport const isTokenTransferAsset = (value: AssetInfo): value is TokenTransferAsset => {\r\n  return value.type === 'Transfer'\r\n}\r\n\r\nconst defaultTokenTransferAsset: TokenTransferAsset = {\r\n  type: 'Transfer',\r\n  name: NOT_AVAILABLE,\r\n  logoUri: NOT_AVAILABLE,\r\n  directionSign: '',\r\n  amountWithSymbol: NOT_AVAILABLE,\r\n  tokenType: 'UNKNOWN',\r\n}\r\n\r\nexport const useAssetInfo = (txInfo: TransactionInfo): AssetInfo | undefined => {\r\n  const [asset, setAsset] = useState<AssetInfo>()\r\n  const amountWithSymbol = getTxAmount(txInfo)\r\n\r\n  useEffect(() => {\r\n    if (isTransferTxInfo(txInfo)) {\r\n      const { direction, transferInfo } = txInfo\r\n      const directionSign = direction === 'INCOMING' ? '+' : '-'\r\n\r\n      switch (transferInfo.type) {\r\n        case 'ERC20': {\r\n          setAsset({\r\n            type: 'Transfer',\r\n            name: transferInfo.tokenName ?? defaultTokenTransferAsset.name,\r\n            logoUri: transferInfo.logoUri ?? defaultTokenTransferAsset.logoUri,\r\n            directionSign,\r\n            amountWithSymbol,\r\n            tokenType: transferInfo.type,\r\n          })\r\n          break\r\n        }\r\n        case 'ERC721': {\r\n          setAsset({\r\n            type: 'Transfer',\r\n            name: transferInfo.tokenName ?? defaultTokenTransferAsset.name,\r\n            logoUri: transferInfo.logoUri ?? defaultTokenTransferAsset.logoUri,\r\n            directionSign: directionSign,\r\n            amountWithSymbol,\r\n            tokenType: transferInfo.type,\r\n          })\r\n          break\r\n        }\r\n        case 'ETHER': {\r\n          const { nativeCoin } = getNetworkInfo()\r\n\r\n          setAsset({\r\n            type: 'Transfer',\r\n            name: nativeCoin.name ?? defaultTokenTransferAsset.name,\r\n            logoUri: nativeCoin.logoUri ?? defaultTokenTransferAsset.logoUri,\r\n            directionSign: directionSign,\r\n            amountWithSymbol,\r\n            tokenType: transferInfo.type,\r\n          })\r\n          break\r\n        }\r\n      }\r\n      return\r\n    }\r\n\r\n    if (isSettingsChangeTxInfo(txInfo)) {\r\n      setAsset(txInfo)\r\n      return\r\n    }\r\n\r\n    if (isCustomTxInfo(txInfo)) {\r\n      setAsset(txInfo)\r\n    }\r\n  }, [txInfo, amountWithSymbol])\r\n\r\n  return asset\r\n}\r\n","import { ThemeColors } from '@gnosis.pm/safe-react-components/dist/theme'\r\nimport { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport {\r\n  isStatusCancelled,\r\n  isStatusFailed,\r\n  isStatusSuccess,\r\n  isStatusWillBeReplaced,\r\n  Transaction,\r\n} from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { userAccountSelector } from 'src/logic/wallets/store/selectors'\r\nimport { addressInList } from 'src/routes/safe/components/Transactions/TxList/utils'\r\n\r\nexport type TransactionStatusProps = {\r\n  color: ThemeColors\r\n  text: string\r\n}\r\n\r\nexport const useTransactionStatus = (transaction: Transaction): TransactionStatusProps => {\r\n  const currentUser = useSelector(userAccountSelector)\r\n  const [status, setStatus] = useState<TransactionStatusProps>({ color: 'primary', text: '' })\r\n\r\n  useEffect(() => {\r\n    if (isStatusSuccess(transaction.txStatus)) {\r\n      setStatus({ color: 'primary', text: 'Success' })\r\n    } else if (isStatusFailed(transaction.txStatus)) {\r\n      setStatus({ color: 'error', text: 'Failed' })\r\n    } else if (isStatusCancelled(transaction.txStatus)) {\r\n      setStatus({ color: 'error', text: 'Cancelled' })\r\n    } else if (isStatusWillBeReplaced(transaction.txStatus)) {\r\n      setStatus({ color: 'placeHolder', text: 'Transaction will be replaced' })\r\n    } else {\r\n      // AWAITING_EXECUTION, AWAITING_CONFIRMATIONS, PENDING or PENDING_FAILED\r\n      let text: string\r\n      const signaturePending = addressInList(transaction.executionInfo?.missingSigners)\r\n\r\n      switch (transaction.txStatus) {\r\n        case 'AWAITING_CONFIRMATIONS':\r\n          text = signaturePending(currentUser) ? 'Needs your confirmation' : 'Needs confirmations'\r\n          break\r\n        case 'AWAITING_EXECUTION':\r\n          text = 'Needs execution'\r\n          break\r\n        case 'PENDING':\r\n        case 'PENDING_FAILED':\r\n        default:\r\n          text = 'Pending'\r\n          break\r\n      }\r\n\r\n      setStatus({ color: 'rinkeby', text })\r\n    }\r\n  }, [currentUser, transaction.executionInfo?.missingSigners, transaction.txStatus])\r\n\r\n  return status\r\n}\r\n","export default __webpack_public_path__ + \"static/media/circle-cross-red.856e4902.svg\";","export default __webpack_public_path__ + \"static/media/incoming.a3c7e671.svg\";","export default __webpack_public_path__ + \"static/media/outgoing.19c93aeb.svg\";","export default __webpack_public_path__ + \"static/media/settings.655e5d78.svg\";","import { useSelector } from 'react-redux'\r\n\r\nimport { sameString } from 'src/utils/strings'\r\nimport { ADDRESS_BOOK_DEFAULT_NAME } from 'src/logic/addressBook/model/addressBook'\r\nimport { getNameFromAddressBookSelector } from 'src/logic/addressBook/store/selectors'\r\n\r\ntype AddressInfo = { name: string | undefined; image: string | undefined }\r\n\r\ntype UseKnownAddressResponse = AddressInfo & { isAddressBook: boolean }\r\n\r\nexport const useKnownAddress = (address: string, addressInfo: AddressInfo): UseKnownAddressResponse => {\r\n  const recipientName = useSelector((state) => getNameFromAddressBookSelector(state, { address }))\r\n  // We have to check that the name returned is not UNKNOWN\r\n  const isInAddressBook = !sameString(recipientName, ADDRESS_BOOK_DEFAULT_NAME)\r\n\r\n  return isInAddressBook\r\n    ? {\r\n        name: recipientName,\r\n        image: undefined,\r\n        isAddressBook: true,\r\n      }\r\n    : { ...addressInfo, isAddressBook: false }\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { Transaction, Custom } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { safeParamAddressFromStateSelector } from 'src/logic/safe/store/selectors'\r\nimport CustomTxIcon from 'src/routes/safe/components/Transactions/TxList/assets/custom.svg'\r\nimport CircleCrossRed from 'src/routes/safe/components/Transactions/TxList/assets/circle-cross-red.svg'\r\nimport IncomingTxIcon from 'src/routes/safe/components/Transactions/TxList/assets/incoming.svg'\r\nimport OutgoingTxIcon from 'src/routes/safe/components/Transactions/TxList/assets/outgoing.svg'\r\nimport SettingsTxIcon from 'src/routes/safe/components/Transactions/TxList/assets/settings.svg'\r\nimport { getTxTo } from 'src/routes/safe/components/Transactions/TxList/utils'\r\nimport { useKnownAddress } from './useKnownAddress'\r\n\r\nexport type TxTypeProps = {\r\n  icon?: string\r\n  fallbackIcon?: string\r\n  text?: string\r\n}\r\n\r\nexport const useTransactionType = (tx: Transaction): TxTypeProps => {\r\n  const [type, setType] = useState<TxTypeProps>({ icon: CustomTxIcon, text: 'Contract interaction' })\r\n  const safeAddress = useSelector(safeParamAddressFromStateSelector)\r\n  const toAddress = getTxTo(tx)\r\n  // Fixed casting because known address only works for Custom tx\r\n  const knownAddress = useKnownAddress(toAddress || '0x', {\r\n    name: (tx.txInfo as Custom)?.toInfo?.name,\r\n    image: (tx.txInfo as Custom)?.toInfo?.logoUri || undefined,\r\n  })\r\n\r\n  useEffect(() => {\r\n    switch (tx.txInfo.type) {\r\n      case 'Creation': {\r\n        setType({ icon: SettingsTxIcon, text: 'Safe created' })\r\n        break\r\n      }\r\n      case 'Transfer': {\r\n        const isSendTx = tx.txInfo.direction === 'OUTGOING'\r\n        setType({ icon: isSendTx ? OutgoingTxIcon : IncomingTxIcon, text: isSendTx ? 'Send' : 'Receive' })\r\n        break\r\n      }\r\n      case 'SettingsChange': {\r\n        setType({ icon: SettingsTxIcon, text: tx.txInfo.dataDecoded.method })\r\n        break\r\n      }\r\n      case 'Custom': {\r\n        // TODO: is this the only way to identify a 'module' transaction?\r\n        if (!tx.executionInfo) {\r\n          setType({ icon: SettingsTxIcon, text: 'Module' })\r\n          break\r\n        }\r\n\r\n        if (tx.txInfo.isCancellation) {\r\n          setType({ icon: CircleCrossRed, text: 'On-chain rejection' })\r\n          break\r\n        }\r\n\r\n        if (tx.safeAppInfo) {\r\n          setType({ icon: tx.safeAppInfo.logoUrl, text: tx.safeAppInfo.name })\r\n          break\r\n        }\r\n\r\n        const toInfo = tx.txInfo.toInfo\r\n        setType({\r\n          icon: knownAddress.isAddressBook ? CustomTxIcon : knownAddress.image || CustomTxIcon,\r\n          fallbackIcon: knownAddress.isAddressBook ? undefined : CustomTxIcon,\r\n          text: toInfo ? knownAddress.name : 'Contract interaction',\r\n        })\r\n        break\r\n      }\r\n    }\r\n  }, [tx, safeAddress, knownAddress.name, knownAddress.image, knownAddress.isAddressBook])\r\n\r\n  return type\r\n}\r\n","import { EthHashInfo } from '@gnosis.pm/safe-react-components'\r\nimport React, { ReactElement } from 'react'\r\n\r\ntype Props = {\r\n  address: string\r\n  iconUrl?: string\r\n  iconUrlFallback?: string\r\n  text?: string\r\n}\r\n\r\nexport const CustomIconText = ({ address, iconUrl, text, iconUrlFallback }: Props): ReactElement => (\r\n  <EthHashInfo\r\n    hash={address}\r\n    showHash={false}\r\n    avatarSize=\"sm\"\r\n    showAvatar\r\n    customAvatar={iconUrl || undefined}\r\n    customAvatarFallback={iconUrlFallback}\r\n    name={text}\r\n    textSize=\"xl\"\r\n  />\r\n)\r\n","import React, { createContext, ReactElement, ReactNode, useState } from 'react'\r\nimport { TxLocation } from 'src/logic/safe/store/models/types/gateway.d'\r\n\r\nexport type TxLocationProps = {\r\n  txLocation: TxLocation\r\n  setTxLocation?: (txLocation: TxLocation) => void\r\n}\r\n\r\nexport const TxLocationContext = createContext<TxLocationProps>({\r\n  txLocation: 'history',\r\n  setTxLocation: () => {},\r\n})\r\n\r\nexport const TxLocationProvider = ({ children }: { children: ReactNode }): ReactElement => {\r\n  const [txLocation, setTxLocation] = useState<TxLocation>('history')\r\n\r\n  return <TxLocationContext.Provider value={{ txLocation, setTxLocation }}>{children}</TxLocationContext.Provider>\r\n}\r\n","import { useContext, useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { ExecutionInfo, isCustomTxInfo, Transaction } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { safeParamAddressFromStateSelector } from 'src/logic/safe/store/selectors'\r\nimport { getQueuedTransactionsByNonce } from 'src/logic/safe/store/selectors/gatewayTransactions'\r\nimport { sameAddress } from 'src/logic/wallets/ethAddresses'\r\nimport { userAccountSelector } from 'src/logic/wallets/store/selectors'\r\nimport { TxLocationContext } from 'src/routes/safe/components/Transactions/TxList/TxLocationProvider'\r\nimport { grantedSelector } from 'src/routes/safe/container/selector'\r\nimport { AppReduxState } from 'src/store'\r\n\r\nexport const isThresholdReached = (executionInfo: ExecutionInfo): boolean => {\r\n  const { confirmationsSubmitted, confirmationsRequired } = executionInfo\r\n  return confirmationsSubmitted >= confirmationsRequired\r\n}\r\n\r\nexport type TransactionActions = {\r\n  canConfirm: boolean\r\n  canConfirmThenExecute: boolean\r\n  canExecute: boolean\r\n  canCancel: boolean\r\n  isUserAnOwner: boolean\r\n  oneToGo: boolean\r\n}\r\n\r\nexport const useTransactionActions = (transaction: Transaction): TransactionActions => {\r\n  const currentUser = useSelector(userAccountSelector)\r\n  const safeAddress = useSelector(safeParamAddressFromStateSelector)\r\n  const isUserAnOwner = useSelector(grantedSelector)\r\n  const { txLocation } = useContext(TxLocationContext)\r\n  const { confirmationsSubmitted = 0, confirmationsRequired = 0, missingSigners } = transaction.executionInfo ?? {}\r\n  const transactionsByNonce = useSelector((state: AppReduxState) =>\r\n    getQueuedTransactionsByNonce(state)({\r\n      attributeName: 'nonce',\r\n      attributeValue: transaction.executionInfo?.nonce ?? -1,\r\n      txLocation,\r\n    }),\r\n  )\r\n\r\n  const [state, setState] = useState<TransactionActions>({\r\n    canConfirm: false,\r\n    canConfirmThenExecute: false,\r\n    canExecute: false,\r\n    canCancel: false,\r\n    isUserAnOwner,\r\n    oneToGo: false,\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (isUserAnOwner && txLocation !== 'history' && transaction.executionInfo) {\r\n      const currentUserSigned = !missingSigners?.some((missingSigner) => sameAddress(missingSigner, currentUser))\r\n\r\n      const oneToGo = confirmationsSubmitted === confirmationsRequired - 1\r\n      const canConfirm = ['queued.next', 'queued.queued'].includes(txLocation) && !currentUserSigned\r\n      const thresholdReached = confirmationsSubmitted >= confirmationsRequired\r\n\r\n      setState({\r\n        canConfirm,\r\n        canConfirmThenExecute: txLocation === 'queued.next' && canConfirm && oneToGo,\r\n        canExecute: txLocation === 'queued.next' && thresholdReached,\r\n        canCancel: !transactionsByNonce.some(({ txInfo }) => isCustomTxInfo(txInfo) && txInfo.isCancellation),\r\n        isUserAnOwner,\r\n        oneToGo,\r\n      })\r\n    } else {\r\n      setState((prev) => ({ ...prev, isUserAnOwner }))\r\n    }\r\n  }, [\r\n    confirmationsRequired,\r\n    confirmationsSubmitted,\r\n    currentUser,\r\n    isUserAnOwner,\r\n    missingSigners,\r\n    safeAddress,\r\n    transaction,\r\n    transactionsByNonce,\r\n    txLocation,\r\n  ])\r\n\r\n  return state\r\n}\r\n","import React, { createContext, ReactElement, ReactNode, useCallback, useRef, useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nimport { fetchTransactionDetails } from 'src/logic/safe/store/actions/fetchTransactionDetails'\r\nimport { TxLocation } from 'src/logic/safe/store/models/types/gateway.d'\r\n\r\nexport type ActionType = 'cancel' | 'confirm' | 'execute' | 'none'\r\n\r\nexport type SelectedAction = {\r\n  // FixMe: give proper names to the keys\r\n  //  for instance:\r\n  //  `action->{ type; forTransactionId; txLocation; }`\r\n  //  `setAction` as callback\r\n  selectedAction: {\r\n    actionSelected: ActionType\r\n    transactionId: string\r\n    txLocation: TxLocation\r\n  }\r\n  selectAction: (args: SelectedAction['selectedAction']) => Promise<void>\r\n}\r\n\r\nexport const TransactionActionStateContext = createContext<SelectedAction>({\r\n  selectedAction: {\r\n    actionSelected: 'none',\r\n    transactionId: '',\r\n    txLocation: 'history',\r\n  },\r\n  selectAction: () => Promise.resolve(),\r\n})\r\n\r\nexport const TxActionProvider = ({ children }: { children: ReactNode }): ReactElement => {\r\n  const dispatch = useRef(useDispatch())\r\n  const [selectedAction, setSelectedAction] = useState<SelectedAction['selectedAction']>({\r\n    actionSelected: 'none',\r\n    transactionId: '',\r\n    txLocation: 'history',\r\n  })\r\n\r\n  const selectAction = useCallback(\r\n    async ({ actionSelected, transactionId, txLocation }: SelectedAction['selectedAction']) => {\r\n      if (transactionId) {\r\n        await dispatch.current(fetchTransactionDetails({ transactionId, txLocation }))\r\n      }\r\n\r\n      setSelectedAction({ actionSelected, transactionId, txLocation })\r\n    },\r\n    [],\r\n  )\r\n\r\n  return (\r\n    <TransactionActionStateContext.Provider value={{ selectedAction, selectAction }}>\r\n      {children}\r\n    </TransactionActionStateContext.Provider>\r\n  )\r\n}\r\n","import React, { createContext, ReactElement, ReactNode, useState } from 'react'\r\n\r\nexport const TxHoverContext = createContext<{\r\n  activeHover?: string\r\n  setActiveHover: (activeHover?: string) => void\r\n}>({\r\n  activeHover: undefined,\r\n  setActiveHover: () => {},\r\n})\r\n\r\nexport const TxHoverProvider = ({ children }: { children: ReactNode }): ReactElement => {\r\n  const [activeHover, setActiveHover] = useState<string | undefined>()\r\n\r\n  return <TxHoverContext.Provider value={{ activeHover, setActiveHover }}>{children}</TxHoverContext.Provider>\r\n}\r\n","import { MouseEvent as ReactMouseEvent, useCallback, useContext, useMemo, useRef } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { MultiSigExecutionDetails, Transaction } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { userAccountSelector } from 'src/logic/wallets/store/selectors'\r\nimport { addressInList } from 'src/routes/safe/components/Transactions/TxList/utils'\r\nimport { useTransactionActions } from './useTransactionActions'\r\nimport { TransactionActionStateContext } from 'src/routes/safe/components/Transactions/TxList/TxActionProvider'\r\nimport { TxHoverContext } from 'src/routes/safe/components/Transactions/TxList/TxHoverProvider'\r\nimport { TxLocationContext } from 'src/routes/safe/components/Transactions/TxList/TxLocationProvider'\r\nimport enqueueSnackbar from 'src/logic/notifications/store/actions/enqueueSnackbar'\r\nimport { NOTIFICATIONS } from 'src/logic/notifications'\r\n\r\ntype ActionButtonsHandlers = {\r\n  canCancel: boolean\r\n  handleConfirmButtonClick: (event: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => void\r\n  handleCancelButtonClick: (event: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => void\r\n  handleOnMouseEnter: () => void\r\n  handleOnMouseLeave: () => void\r\n  isPending: boolean\r\n  disabledActions: boolean\r\n}\r\n\r\nexport const useActionButtonsHandlers = (transaction: Transaction): ActionButtonsHandlers => {\r\n  const currentUser = useSelector(userAccountSelector)\r\n  const actionContext = useRef(useContext(TransactionActionStateContext))\r\n  const hoverContext = useRef(useContext(TxHoverContext))\r\n  const locationContext = useRef(useContext(TxLocationContext))\r\n  const dispatch = useDispatch()\r\n  const { canCancel, canConfirmThenExecute, canExecute } = useTransactionActions(transaction)\r\n\r\n  const handleConfirmButtonClick = useCallback(\r\n    (event: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n      event.stopPropagation()\r\n      if (transaction.txDetails?.detailedExecutionInfo?.type === 'MULTISIG') {\r\n        const details = transaction.txDetails?.detailedExecutionInfo as MultiSigExecutionDetails\r\n        if (\r\n          (canExecute && details.confirmationsRequired > details.confirmations.length) ||\r\n          (canConfirmThenExecute && details.confirmationsRequired - 1 > details.confirmations.length)\r\n        ) {\r\n          dispatch(enqueueSnackbar(NOTIFICATIONS.TX_FETCH_SIGNATURES_ERROR_MSG))\r\n          return\r\n        }\r\n      }\r\n      actionContext.current.selectAction({\r\n        actionSelected: canExecute || canConfirmThenExecute ? 'execute' : 'confirm',\r\n        transactionId: transaction.id,\r\n        txLocation: locationContext.current.txLocation,\r\n      })\r\n    },\r\n    [canConfirmThenExecute, canExecute, dispatch, transaction.id, transaction.txDetails?.detailedExecutionInfo],\r\n  )\r\n\r\n  const handleCancelButtonClick = useCallback(\r\n    (event: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n      event.stopPropagation()\r\n      actionContext.current.selectAction({\r\n        actionSelected: 'cancel',\r\n        transactionId: transaction.id,\r\n        txLocation: locationContext.current.txLocation,\r\n      })\r\n    },\r\n    [transaction.id],\r\n  )\r\n\r\n  const handleOnMouseEnter = useCallback(() => {\r\n    if (canExecute) {\r\n      hoverContext.current.setActiveHover(transaction.id)\r\n    }\r\n  }, [canExecute, transaction.id])\r\n\r\n  const handleOnMouseLeave = useCallback(() => {\r\n    hoverContext.current.setActiveHover()\r\n  }, [])\r\n\r\n  const isPending = useMemo(() => !!transaction.txStatus.match(/^PENDING.*/), [transaction.txStatus])\r\n\r\n  const signaturePending = addressInList(transaction.executionInfo?.missingSigners)\r\n\r\n  const disabledActions = useMemo(\r\n    () =>\r\n      isPending ||\r\n      (transaction.txStatus === 'AWAITING_EXECUTION' && locationContext.current.txLocation === 'queued.queued') ||\r\n      (transaction.txStatus === 'AWAITING_CONFIRMATIONS' && !signaturePending(currentUser)),\r\n    [currentUser, isPending, signaturePending, transaction.txStatus],\r\n  )\r\n\r\n  return {\r\n    canCancel,\r\n    handleConfirmButtonClick,\r\n    handleCancelButtonClick,\r\n    handleOnMouseEnter,\r\n    handleOnMouseLeave,\r\n    isPending,\r\n    disabledActions,\r\n  }\r\n}\r\n","import { Icon, Tooltip } from '@gnosis.pm/safe-react-components'\r\nimport { default as MuiIconButton } from '@material-ui/core/IconButton'\r\nimport React, { ReactElement } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { safeNonceSelector } from 'src/logic/safe/store/selectors'\r\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { useActionButtonsHandlers } from './hooks/useActionButtonsHandlers'\r\n\r\nconst IconButton = styled(MuiIconButton)`\r\n  padding: 8px !important;\r\n\r\n  &.Mui-disabled {\r\n    opacity: 0.4;\r\n  }\r\n`\r\n\r\ntype TxCollapsedActionsProps = {\r\n  transaction: Transaction\r\n}\r\n\r\nexport const TxCollapsedActions = ({ transaction }: TxCollapsedActionsProps): ReactElement => {\r\n  const {\r\n    canCancel,\r\n    handleConfirmButtonClick,\r\n    handleCancelButtonClick,\r\n    handleOnMouseEnter,\r\n    handleOnMouseLeave,\r\n    isPending,\r\n    disabledActions,\r\n  } = useActionButtonsHandlers(transaction)\r\n  const nonce = useSelector(safeNonceSelector)\r\n\r\n  const getTitle = () => {\r\n    if (transaction.txStatus === 'AWAITING_EXECUTION') {\r\n      return transaction.executionInfo?.nonce === nonce\r\n        ? 'Execute'\r\n        : `Transaction with nonce ${nonce} needs to be executed first`\r\n    }\r\n    return 'Confirm'\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Tooltip title={getTitle()} placement=\"top\">\r\n        <span>\r\n          <IconButton\r\n            size=\"small\"\r\n            type=\"button\"\r\n            onClick={handleConfirmButtonClick}\r\n            disabled={disabledActions}\r\n            onMouseEnter={handleOnMouseEnter}\r\n            onMouseLeave={handleOnMouseLeave}\r\n          >\r\n            <Icon type={transaction.txStatus === 'AWAITING_EXECUTION' ? 'rocket' : 'check'} color=\"primary\" size=\"sm\" />\r\n          </IconButton>\r\n        </span>\r\n      </Tooltip>\r\n      {canCancel && (\r\n        <Tooltip title=\"Reject\" placement=\"top\">\r\n          <span>\r\n            <IconButton size=\"small\" type=\"button\" onClick={handleCancelButtonClick} disabled={isPending}>\r\n              <Icon type=\"circleCross\" color=\"error\" size=\"sm\" />\r\n            </IconButton>\r\n          </span>\r\n        </Tooltip>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n","import { Text } from '@gnosis.pm/safe-react-components'\r\nimport React, { ReactElement } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport Img from 'src/components/layout/Img'\r\nimport NFTIcon from 'src/routes/safe/components/Balances/assets/nft_icon.png'\r\nimport TokenPlaceholder from 'src/routes/safe/components/Balances/assets/token_placeholder.svg'\r\nimport { TokenTransferAsset } from './hooks/useAssetInfo'\r\n\r\nconst Amount = styled(Text)`\r\n  margin-left: 10px;\r\n  line-height: 16px;\r\n`\r\n\r\nconst AmountWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nexport type TokenTransferAmountProps = {\r\n  assetInfo: TokenTransferAsset\r\n}\r\n\r\nexport const TokenTransferAmount = ({ assetInfo }: TokenTransferAmountProps): ReactElement => {\r\n  return (\r\n    <AmountWrapper>\r\n      <Img\r\n        alt={assetInfo.name}\r\n        height={26}\r\n        onError={(error) => {\r\n          error.currentTarget.onerror = null\r\n          error.currentTarget.src = assetInfo.tokenType === 'ERC721' ? NFTIcon : TokenPlaceholder\r\n        }}\r\n        src={assetInfo.logoUri}\r\n      />\r\n      <Amount size=\"xl\">{`${assetInfo.directionSign}${assetInfo.amountWithSymbol}`}</Amount>\r\n    </AmountWrapper>\r\n  )\r\n}\r\n","import { Dot, IconText as IconTextSrc, Loader, Text, Tooltip } from '@gnosis.pm/safe-react-components'\r\nimport { ThemeColors } from '@gnosis.pm/safe-react-components/dist/theme'\r\nimport React, { ReactElement, useContext, useRef } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport { CustomIconText } from 'src/components/CustomIconText'\r\nimport {\r\n  isCustomTxInfo,\r\n  isMultiSendTxInfo,\r\n  isSettingsChangeTxInfo,\r\n  Transaction,\r\n} from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { TxCollapsedActions } from './TxCollapsedActions'\r\nimport { formatDateTime, formatTime, formatTimeInWords } from 'src/utils/date'\r\nimport { KNOWN_MODULES } from 'src/utils/constants'\r\nimport { sameString } from 'src/utils/strings'\r\nimport { AssetInfo, isTokenTransferAsset } from './hooks/useAssetInfo'\r\nimport { TransactionActions } from './hooks/useTransactionActions'\r\nimport { TransactionStatusProps } from './hooks/useTransactionStatus'\r\nimport { TxTypeProps } from './hooks/useTransactionType'\r\nimport { StyledGroupedTransactions, StyledTransaction } from './styled'\r\nimport { TokenTransferAmount } from './TokenTransferAmount'\r\nimport { TxsInfiniteScrollContext } from './TxsInfiniteScroll'\r\nimport { TxLocationContext } from './TxLocationProvider'\r\nimport { CalculatedVotes } from './TxQueueCollapsed'\r\nimport { getTxTo, isCancelTxDetails } from './utils'\r\n\r\nconst TxInfo = ({ info }: { info: AssetInfo }) => {\r\n  if (isTokenTransferAsset(info)) {\r\n    return <TokenTransferAmount assetInfo={info} />\r\n  }\r\n\r\n  if (isSettingsChangeTxInfo(info)) {\r\n    const UNKNOWN_MODULE = 'Unknown module'\r\n\r\n    switch (info.settingsInfo?.type) {\r\n      case 'SET_FALLBACK_HANDLER':\r\n      case 'ADD_OWNER':\r\n      case 'REMOVE_OWNER':\r\n      case 'SWAP_OWNER':\r\n      case 'CHANGE_THRESHOLD':\r\n      case 'CHANGE_IMPLEMENTATION':\r\n        break\r\n      case 'ENABLE_MODULE':\r\n      case 'DISABLE_MODULE':\r\n        return (\r\n          <Text size=\"xl\" as=\"span\">\r\n            {KNOWN_MODULES[info.settingsInfo.module] ?? UNKNOWN_MODULE}\r\n          </Text>\r\n        )\r\n    }\r\n  }\r\n\r\n  if (isCustomTxInfo(info)) {\r\n    if (isMultiSendTxInfo(info)) {\r\n      return (\r\n        <Text size=\"xl\" as=\"span\">\r\n          {info.actionCount} {`action${info.actionCount > 1 ? 's' : ''}`}\r\n        </Text>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <Text size=\"xl\" as=\"span\">\r\n        {info.methodName}\r\n      </Text>\r\n    )\r\n  }\r\n  return null\r\n}\r\n\r\nconst CircularProgressPainter = styled.div<{ color: ThemeColors }>`\r\n  color: ${({ theme, color }) => theme.colors[color]};\r\n`\r\n\r\nconst SmallDot = styled(Dot)`\r\n  height: 8px;\r\n  width: 8px;\r\n  background-color: ${({ theme, color }) => theme.colors[color]} !important;\r\n`\r\n\r\nconst IconText = styled(IconTextSrc)`\r\n  p {\r\n    font-weight: bold;\r\n  }\r\n`\r\n\r\nconst TooltipContent = styled.div`\r\n  width: max-content;\r\n`\r\n\r\ntype TxCollapsedProps = {\r\n  transaction: Transaction\r\n  isGrouped?: boolean\r\n  nonce?: number\r\n  type: TxTypeProps\r\n  info?: AssetInfo\r\n  time: number\r\n  votes?: CalculatedVotes\r\n  actions?: TransactionActions\r\n  status: TransactionStatusProps\r\n}\r\n\r\nexport const TxCollapsed = ({\r\n  transaction,\r\n  isGrouped = false,\r\n  nonce,\r\n  type,\r\n  info,\r\n  time,\r\n  votes,\r\n  actions,\r\n  status,\r\n}: TxCollapsedProps): ReactElement => {\r\n  const { txLocation } = useContext(TxLocationContext)\r\n  const { ref, lastItemId } = useContext(TxsInfiniteScrollContext)\r\n  const toAddress = getTxTo(transaction)\r\n\r\n  const willBeReplaced = transaction?.txStatus === 'WILL_BE_REPLACED' ? ' will-be-replaced' : ''\r\n  const onChainRejection =\r\n    isCancelTxDetails(transaction.txInfo) && txLocation !== 'history' ? ' on-chain-rejection' : ''\r\n\r\n  const txCollapsedNonce = (\r\n    <div className={'tx-nonce' + willBeReplaced}>\r\n      <Text size=\"xl\">{nonce}</Text>\r\n    </div>\r\n  )\r\n\r\n  const txCollapsedType = (\r\n    <div className={'tx-type' + willBeReplaced + onChainRejection}>\r\n      <CustomIconText\r\n        address={toAddress || '0x'}\r\n        iconUrl={type.icon}\r\n        iconUrlFallback={type.fallbackIcon}\r\n        text={type.text}\r\n      />\r\n    </div>\r\n  )\r\n\r\n  const txCollapsedInfo = <div className={'tx-info' + willBeReplaced}>{info && <TxInfo info={info} />}</div>\r\n\r\n  const timestamp = useRef<HTMLDivElement | null>(null)\r\n\r\n  const txCollapsedTime = (\r\n    <div className={'tx-time' + willBeReplaced}>\r\n      <Tooltip title={formatDateTime(time)} arrow backgroundColor=\"white\" size=\"lg\">\r\n        <TooltipContent ref={timestamp}>\r\n          <Text size=\"xl\">{txLocation === 'history' ? formatTime(time) : formatTimeInWords(time)}</Text>\r\n        </TooltipContent>\r\n      </Tooltip>\r\n    </div>\r\n  )\r\n\r\n  const txCollapsedVotes = (\r\n    <div className={'tx-votes' + willBeReplaced}>\r\n      {votes && (\r\n        <IconText\r\n          color={votes.required > votes.submitted ? 'secondaryLight' : 'primary'}\r\n          iconType=\"owners\"\r\n          iconSize=\"sm\"\r\n          text={`${votes.votes}`}\r\n          textSize=\"md\"\r\n        />\r\n      )}\r\n    </div>\r\n  )\r\n\r\n  const txCollapsedActions = (\r\n    <div className={'tx-actions' + willBeReplaced}>\r\n      {actions?.isUserAnOwner && transaction && <TxCollapsedActions transaction={transaction} />}\r\n    </div>\r\n  )\r\n\r\n  // attaching ref to a div element as it was causing troubles to add a `ref` to a FunctionComponent\r\n  const txCollapsedStatus = (\r\n    <div className=\"tx-status\" ref={sameString(lastItemId, transaction.id) ? ref : null}>\r\n      {transaction?.txStatus === 'PENDING' || transaction?.txStatus === 'PENDING_FAILED' ? (\r\n        <CircularProgressPainter color={status.color}>\r\n          <Loader size=\"xs\" color=\"pending\" />\r\n        </CircularProgressPainter>\r\n      ) : (\r\n        (transaction?.txStatus === 'AWAITING_EXECUTION' || transaction?.txStatus === 'AWAITING_CONFIRMATIONS') && (\r\n          <SmallDot color={status.color} />\r\n        )\r\n      )}\r\n      <Text size=\"md\" color={status.color} className=\"col\" strong>\r\n        {status.text}\r\n      </Text>\r\n    </div>\r\n  )\r\n\r\n  return isGrouped ? (\r\n    <StyledGroupedTransactions>\r\n      {/* no nonce */}\r\n      {txCollapsedType}\r\n      {txCollapsedInfo}\r\n      {txCollapsedTime}\r\n      {txCollapsedVotes}\r\n      {txCollapsedActions}\r\n      {txCollapsedStatus}\r\n    </StyledGroupedTransactions>\r\n  ) : (\r\n    <StyledTransaction className={sameString(status.text, 'Failed') ? 'failed-transaction' : ''}>\r\n      {txCollapsedNonce}\r\n      {txCollapsedType}\r\n      {txCollapsedInfo}\r\n      {txCollapsedTime}\r\n      {txCollapsedVotes}\r\n      {txCollapsedActions}\r\n      {txCollapsedStatus}\r\n    </StyledTransaction>\r\n  )\r\n}\r\n","import React, { ReactElement } from 'react'\r\n\r\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { useAssetInfo } from './hooks/useAssetInfo'\r\nimport { useTransactionStatus } from './hooks/useTransactionStatus'\r\nimport { useTransactionType } from './hooks/useTransactionType'\r\nimport { TxCollapsed } from './TxCollapsed'\r\n\r\nexport const TxHistoryCollapsed = ({ transaction }: { transaction: Transaction }): ReactElement => {\r\n  const nonce = transaction.executionInfo?.nonce\r\n  const type = useTransactionType(transaction)\r\n  const info = useAssetInfo(transaction.txInfo)\r\n  const status = useTransactionStatus(transaction)\r\n\r\n  return (\r\n    <TxCollapsed\r\n      nonce={nonce}\r\n      type={type}\r\n      info={info}\r\n      time={transaction.timestamp}\r\n      status={status}\r\n      transaction={transaction}\r\n    />\r\n  )\r\n}\r\n","import { Text } from '@gnosis.pm/safe-react-components'\r\nimport React from 'react'\r\nimport { sameString } from 'src/utils/strings'\r\nimport styled from 'styled-components'\r\n\r\nimport useTokenInfo from 'src/logic/safe/hooks/useTokenInfo'\r\nimport { DataDecoded } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { fromTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\r\nimport { getResetTimeOptions } from 'src/routes/safe/components/Settings/SpendingLimit/FormFields/ResetTime'\r\nimport { AddressInfo, ResetTimeInfo, TokenInfo } from 'src/routes/safe/components/Settings/SpendingLimit/InfoDisplay'\r\n\r\nconst SET_ALLOWANCE = 'setAllowance'\r\nconst DELETE_ALLOWANCE = 'deleteAllowance'\r\n\r\nexport const isSetAllowance = (method?: string): boolean => {\r\n  return sameString(method, SET_ALLOWANCE)\r\n}\r\n\r\nexport const isDeleteAllowance = (method?: string): boolean => {\r\n  return sameString(method, DELETE_ALLOWANCE)\r\n}\r\n\r\nexport const isSpendingLimitMethod = (method?: string): boolean => {\r\n  return isSetAllowance(method) || isDeleteAllowance(method)\r\n}\r\n\r\nconst SpendingLimitRow = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nexport const ModifySpendingLimitDetails = ({ data }: { data: DataDecoded }): React.ReactElement => {\r\n  const [beneficiary, tokenAddress, amount, resetTimeMin] = React.useMemo(\r\n    () => data.parameters?.map(({ value }) => value) ?? [],\r\n    [data.parameters],\r\n  )\r\n\r\n  const resetTimeLabel = React.useMemo(\r\n    () => getResetTimeOptions().find(({ value }) => +value === +resetTimeMin)?.label ?? '',\r\n    [resetTimeMin],\r\n  )\r\n\r\n  const tokenInfo = useTokenInfo(tokenAddress)\r\n\r\n  return (\r\n    <>\r\n      <SpendingLimitRow>\r\n        <Text size=\"xl\" strong>\r\n          Modify spending limit:\r\n        </Text>\r\n      </SpendingLimitRow>\r\n      <SpendingLimitRow>\r\n        <AddressInfo title=\"Beneficiary\" address={beneficiary} />\r\n      </SpendingLimitRow>\r\n      <SpendingLimitRow>\r\n        {tokenInfo && <TokenInfo amount={fromTokenUnit(amount, tokenInfo.decimals)} title=\"Amount\" token={tokenInfo} />}\r\n      </SpendingLimitRow>\r\n      <SpendingLimitRow>\r\n        <ResetTimeInfo title=\"Reset Time\" label={resetTimeLabel} />\r\n      </SpendingLimitRow>\r\n    </>\r\n  )\r\n}\r\n\r\nexport const DeleteSpendingLimitDetails = ({ data }: { data: DataDecoded }): React.ReactElement => {\r\n  const [beneficiary, tokenAddress] = React.useMemo(() => data.parameters?.map(({ value }) => value) ?? [], [\r\n    data.parameters,\r\n  ])\r\n  const tokenInfo = useTokenInfo(tokenAddress)\r\n\r\n  return (\r\n    <>\r\n      <SpendingLimitRow>\r\n        <Text size=\"xl\" strong>\r\n          Delete spending limit:\r\n        </Text>\r\n      </SpendingLimitRow>\r\n      <SpendingLimitRow>\r\n        <AddressInfo title=\"Beneficiary\" address={beneficiary} />\r\n      </SpendingLimitRow>\r\n      <SpendingLimitRow>{tokenInfo && <TokenInfo amount=\"\" title=\"Token\" token={tokenInfo} />}</SpendingLimitRow>\r\n    </>\r\n  )\r\n}\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport { fade } from '../styles/colorManipulator';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      height: 1,\n      margin: 0,\n      // Reset browser default style.\n      border: 'none',\n      flexShrink: 0,\n      backgroundColor: theme.palette.divider\n    },\n\n    /* Styles applied to the root element if `absolute={true}`. */\n    absolute: {\n      position: 'absolute',\n      bottom: 0,\n      left: 0,\n      width: '100%'\n    },\n\n    /* Styles applied to the root element if `variant=\"inset\"`. */\n    inset: {\n      marginLeft: 72\n    },\n\n    /* Styles applied to the root element if `light={true}`. */\n    light: {\n      backgroundColor: fade(theme.palette.divider, 0.08)\n    },\n\n    /* Styles applied to the root element if `variant=\"middle\"`. */\n    middle: {\n      marginLeft: theme.spacing(2),\n      marginRight: theme.spacing(2)\n    },\n\n    /* Styles applied to the root element if `orientation=\"vertical\"`. */\n    vertical: {\n      height: '100%',\n      width: 1\n    },\n\n    /* Styles applied to the root element if `flexItem={true}`. */\n    flexItem: {\n      alignSelf: 'stretch',\n      height: 'auto'\n    }\n  };\n};\nvar Divider = /*#__PURE__*/React.forwardRef(function Divider(props, ref) {\n  var _props$absolute = props.absolute,\n      absolute = _props$absolute === void 0 ? false : _props$absolute,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'hr' : _props$component,\n      _props$flexItem = props.flexItem,\n      flexItem = _props$flexItem === void 0 ? false : _props$flexItem,\n      _props$light = props.light,\n      light = _props$light === void 0 ? false : _props$light,\n      _props$orientation = props.orientation,\n      orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation,\n      _props$role = props.role,\n      role = _props$role === void 0 ? Component !== 'hr' ? 'separator' : undefined : _props$role,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'fullWidth' : _props$variant,\n      other = _objectWithoutProperties(props, [\"absolute\", \"classes\", \"className\", \"component\", \"flexItem\", \"light\", \"orientation\", \"role\", \"variant\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, variant !== 'fullWidth' && classes[variant], absolute && classes.absolute, flexItem && classes.flexItem, light && classes.light, orientation === 'vertical' && classes.vertical),\n    role: role,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Divider.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Absolutely position the element.\n   */\n  absolute: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * If `true`, a vertical divider will have the correct height when used in flex container.\n   * (By default, a vertical divider will have a calculated height of `0px` if it is the child of a flex container.)\n   */\n  flexItem: PropTypes.bool,\n\n  /**\n   * If `true`, the divider will have a lighter color.\n   */\n  light: PropTypes.bool,\n\n  /**\n   * The divider orientation.\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n\n  /**\n   * @ignore\n   */\n  role: PropTypes.string,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['fullWidth', 'inset', 'middle'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiDivider'\n})(Divider);","import { ClickAwayListener, createStyles, Divider } from '@material-ui/core'\r\nimport Menu from '@material-ui/core/Menu'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz'\r\nimport { push } from 'connected-react-router'\r\nimport React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { sameString } from 'src/utils/strings'\r\nimport { ADDRESS_BOOK_DEFAULT_NAME } from 'src/logic/addressBook/model/addressBook'\r\nimport { getNameFromAddressBookSelector } from 'src/logic/addressBook/store/selectors'\r\nimport { SAFELIST_ADDRESS } from 'src/routes/routes'\r\nimport { safeParamAddressFromStateSelector } from 'src/logic/safe/store/selectors'\r\nimport { xs } from 'src/theme/variables'\r\nimport { grantedSelector } from 'src/routes/safe/container/selector'\r\n\r\nconst useStyles = makeStyles(\r\n  createStyles({\r\n    container: {\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      cursor: 'pointer',\r\n      margin: `0 ${xs}`,\r\n      borderRadius: '50%',\r\n      transition: 'background-color .2s ease-in-out',\r\n      '&:hover': {\r\n        backgroundColor: '#F0EFEE',\r\n      },\r\n      outline: 'none',\r\n    },\r\n    increasedPopperZindex: {\r\n      zIndex: 2001,\r\n    },\r\n  }),\r\n)\r\n\r\ntype EllipsisTransactionDetailsProps = {\r\n  address: string\r\n  sendModalOpenHandler?: () => void\r\n}\r\n\r\nexport const EllipsisTransactionDetails = ({\r\n  address,\r\n  sendModalOpenHandler,\r\n}: EllipsisTransactionDetailsProps): React.ReactElement => {\r\n  const classes = useStyles()\r\n  const [anchorEl, setAnchorEl] = React.useState(null)\r\n\r\n  const dispatch = useDispatch()\r\n  const currentSafeAddress = useSelector(safeParamAddressFromStateSelector)\r\n  const isOwnerConnected = useSelector(grantedSelector)\r\n\r\n  const recipientName = useSelector((state) => getNameFromAddressBookSelector(state, { address }))\r\n  // We have to check that the name returned is not UNKNOWN\r\n  const isStoredInAddressBook = !sameString(recipientName, ADDRESS_BOOK_DEFAULT_NAME)\r\n\r\n  const handleClick = (event) => setAnchorEl(event.currentTarget)\r\n\r\n  const closeMenuHandler = () => setAnchorEl(null)\r\n\r\n  const addOrEditEntryHandler = () => {\r\n    dispatch(push(`${SAFELIST_ADDRESS}/${currentSafeAddress}/address-book?entryAddress=${address}`))\r\n    closeMenuHandler()\r\n  }\r\n\r\n  return (\r\n    <ClickAwayListener onClickAway={closeMenuHandler}>\r\n      <div className={classes.container} role=\"menu\" tabIndex={0}>\r\n        <MoreHorizIcon onClick={handleClick} onKeyDown={handleClick} />\r\n        <Menu anchorEl={anchorEl} id=\"simple-menu\" keepMounted onClose={closeMenuHandler} open={Boolean(anchorEl)}>\r\n          {sendModalOpenHandler\r\n            ? [\r\n                <MenuItem key=\"send-again-button\" onClick={sendModalOpenHandler} disabled={!isOwnerConnected}>\r\n                  Send Again\r\n                </MenuItem>,\r\n                <Divider key=\"divider\" />,\r\n              ]\r\n            : null}\r\n          {isStoredInAddressBook ? (\r\n            <MenuItem onClick={addOrEditEntryHandler}>Edit Address book Entry</MenuItem>\r\n          ) : (\r\n            <MenuItem onClick={addOrEditEntryHandler}>Add to address book</MenuItem>\r\n          )}\r\n        </Menu>\r\n      </div>\r\n    </ClickAwayListener>\r\n  )\r\n}\r\n","import { EthHashInfo } from '@gnosis.pm/safe-react-components'\r\nimport React, { ReactElement } from 'react'\r\n\r\nimport { getExplorerInfo } from 'src/config'\r\nimport { useKnownAddress } from './hooks/useKnownAddress'\r\n\r\ntype Props = {\r\n  address: string\r\n  name?: string | undefined\r\n  avatarUrl?: string | undefined\r\n}\r\n\r\nexport const AddressInfo = ({ address, name, avatarUrl }: Props): ReactElement | null => {\r\n  const toInfo = useKnownAddress(address, { name, image: avatarUrl })\r\n\r\n  if (address === '') {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <EthHashInfo\r\n      hash={address}\r\n      name={toInfo.name}\r\n      showAvatar\r\n      customAvatar={toInfo.image}\r\n      showCopyBtn\r\n      explorerUrl={getExplorerInfo(address)}\r\n    />\r\n  )\r\n}\r\n","import { Text } from '@gnosis.pm/safe-react-components'\r\nimport React, { ReactElement, ReactNode } from 'react'\r\n\r\ntype InfoDetailsProps = {\r\n  children: ReactNode\r\n  title: string\r\n}\r\n\r\nexport const InfoDetails = ({ children, title }: InfoDetailsProps): ReactElement => (\r\n  <>\r\n    <Text size=\"xl\" strong>\r\n      {title}\r\n    </Text>\r\n    {children}\r\n  </>\r\n)\r\n","import React, { ReactElement, useContext, useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport { fromTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\r\nimport { ZERO_ADDRESS } from 'src/logic/wallets/ethAddresses'\r\nimport { Erc721Transfer, Transfer } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { EllipsisTransactionDetails } from 'src/routes/safe/components/AddressBook/EllipsisTransactionDetails'\r\nimport SendModal from 'src/routes/safe/components/Balances/SendModal'\r\nimport { AddressInfo } from './AddressInfo'\r\nimport { InfoDetails } from './InfoDetails'\r\nimport { TxLocationContext, TxLocationProps } from './TxLocationProvider'\r\nimport { getTxTokenData } from './utils'\r\n\r\nconst SingleRow = styled.div`\r\n  display: flex;\r\n  align-items: flex-end;\r\n`\r\n\r\ntype TxInfoDetailsProps = {\r\n  title: string\r\n  address: string\r\n  name?: string | undefined\r\n  avatarUrl?: string | undefined\r\n  isTransferType?: boolean\r\n  txInfo?: Transfer\r\n}\r\n\r\nexport const TxInfoDetails = ({\r\n  title,\r\n  address,\r\n  isTransferType,\r\n  txInfo,\r\n  name,\r\n  avatarUrl,\r\n}: TxInfoDetailsProps): ReactElement => {\r\n  const { txLocation } = useContext<TxLocationProps>(TxLocationContext)\r\n  const canRepeatTransaction =\r\n    // is transfer type by context\r\n    isTransferType &&\r\n    // not a Collectible\r\n    txInfo?.transferInfo.type !== 'ERC721' &&\r\n    // in history list\r\n    txLocation === 'history' &&\r\n    // it's outgoing\r\n    txInfo?.direction === 'OUTGOING'\r\n\r\n  const [sendModalOpen, setSendModalOpen] = useState(false)\r\n  const sendModalOpenHandler = () => {\r\n    setSendModalOpen(true)\r\n  }\r\n  const onClose = () => {\r\n    setSendModalOpen(false)\r\n  }\r\n\r\n  const [sendModalParams, setSendModalParams] = useState<{\r\n    activeScreenType: 'sendCollectible' | 'sendFunds'\r\n    recipientAddress: string\r\n    selectedToken: string | Erc721Transfer\r\n    tokenAmount: string\r\n  }>({\r\n    activeScreenType: 'sendFunds',\r\n    recipientAddress: address,\r\n    selectedToken: ZERO_ADDRESS,\r\n    tokenAmount: '0',\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (txInfo) {\r\n      const isCollectible = txInfo.transferInfo.type === 'ERC721'\r\n      const { address, value, decimals } = getTxTokenData(txInfo)\r\n\r\n      setSendModalParams((prev) => ({\r\n        ...prev,\r\n        activeScreenType: isCollectible ? 'sendCollectible' : 'sendFunds',\r\n        selectedToken: isCollectible ? (txInfo.transferInfo as Erc721Transfer) : address,\r\n        tokenAmount: isCollectible ? '1' : fromTokenUnit(value, Number(decimals)),\r\n      }))\r\n    }\r\n  }, [txInfo])\r\n\r\n  return (\r\n    <InfoDetails title={title}>\r\n      <SingleRow>\r\n        <AddressInfo address={address} name={name} avatarUrl={avatarUrl} />\r\n        <EllipsisTransactionDetails\r\n          address={address}\r\n          sendModalOpenHandler={canRepeatTransaction ? sendModalOpenHandler : undefined}\r\n        />\r\n      </SingleRow>\r\n      {canRepeatTransaction && <SendModal isOpen={sendModalOpen} onClose={onClose} {...sendModalParams} />}\r\n    </InfoDetails>\r\n  )\r\n}\r\n","import { Text } from '@gnosis.pm/safe-react-components'\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles'\r\nimport React, { ReactElement, useState } from 'react'\r\n\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport LinkWithRef from 'src/components/layout/Link'\r\nimport { textShortener } from 'src/utils/strings'\r\n\r\nexport const styles = createStyles({\r\n  txDataParagraph: {\r\n    whiteSpace: 'normal',\r\n  },\r\n  linkTxData: {\r\n    textDecoration: 'underline',\r\n    cursor: 'pointer',\r\n  },\r\n})\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\nexport const HexEncodedData = ({\r\n  hexData,\r\n  title,\r\n  limit = 20,\r\n}: {\r\n  hexData: string\r\n  title?: string\r\n  limit?: number\r\n}): ReactElement => {\r\n  const classes = useStyles()\r\n  const [showTxData, setShowTxData] = useState(false)\r\n  const showExpandBtn = hexData.length > limit\r\n  const shortener = textShortener({ charsStart: 40, charsEnd: 0 })\r\n\r\n  return (\r\n    <div className=\"tx-hexData\">\r\n      {title && (\r\n        <Text size=\"xl\" strong>\r\n          {title}:\r\n        </Text>\r\n      )}\r\n      <Paragraph className={classes.txDataParagraph} noMargin size=\"md\">\r\n        {showExpandBtn ? (\r\n          <>\r\n            {showTxData ? (\r\n              <>\r\n                {hexData}{' '}\r\n                <LinkWithRef\r\n                  aria-label=\"Hide details of the transaction\"\r\n                  className={classes.linkTxData}\r\n                  onClick={() => setShowTxData(false)}\r\n                  rel=\"noopener noreferrer\"\r\n                  target=\"_blank\"\r\n                >\r\n                  Show Less\r\n                </LinkWithRef>\r\n              </>\r\n            ) : (\r\n              <>\r\n                {shortener(hexData)}{' '}\r\n                <LinkWithRef\r\n                  aria-label=\"Show details of the transaction\"\r\n                  className={classes.linkTxData}\r\n                  onClick={() => setShowTxData(true)}\r\n                  rel=\"noopener noreferrer\"\r\n                  target=\"_blank\"\r\n                >\r\n                  Show More\r\n                </LinkWithRef>\r\n              </>\r\n            )}\r\n          </>\r\n        ) : (\r\n          hexData\r\n        )}\r\n      </Paragraph>\r\n    </div>\r\n  )\r\n}\r\n","import { Text, EthHashInfo } from '@gnosis.pm/safe-react-components'\r\nimport React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport {\r\n  isAddress,\r\n  isArrayParameter,\r\n} from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/utils'\r\nimport { HexEncodedData } from './HexEncodedData'\r\nimport { getExplorerInfo } from 'src/config'\r\n\r\nconst NestedWrapper = styled.div`\r\n  padding-left: 4px;\r\n`\r\n\r\ninterface RenderValueProps {\r\n  method: string\r\n  type: string\r\n  value: string | string[]\r\n}\r\n\r\nconst GenericValue = ({ method, type, value }: RenderValueProps): React.ReactElement => {\r\n  const getTextValue = (value: string) => <HexEncodedData limit={60} hexData={value} />\r\n\r\n  const getArrayValue = (parentId: string, value: string[] | string) => (\r\n    <div>\r\n      [\r\n      <NestedWrapper>\r\n        {(value as string[]).map((currentValue, index) => {\r\n          const key = `${parentId}-value-${index}`\r\n          return Array.isArray(currentValue) ? (\r\n            <Text key={key} size=\"xl\">\r\n              {getArrayValue(key, currentValue)}\r\n            </Text>\r\n          ) : (\r\n            getTextValue(currentValue)\r\n          )\r\n        })}\r\n      </NestedWrapper>\r\n      ]\r\n    </div>\r\n  )\r\n\r\n  if (isArrayParameter(type) || Array.isArray(value)) {\r\n    return getArrayValue(method, value)\r\n  }\r\n\r\n  return getTextValue(value as string)\r\n}\r\n\r\nconst Value = ({ type, ...props }: RenderValueProps): React.ReactElement => {\r\n  if (isArrayParameter(type) && isAddress(type)) {\r\n    return (\r\n      <div>\r\n        [\r\n        <NestedWrapper>\r\n          {(props.value as string[]).map((address) => {\r\n            const explorerUrl = getExplorerInfo(address)\r\n            return <EthHashInfo key={address} textSize=\"xl\" hash={address} showCopyBtn explorerUrl={explorerUrl} />\r\n          })}\r\n        </NestedWrapper>\r\n        ]\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (isAddress(type)) {\r\n    const explorerUrl = getExplorerInfo(props.value as string)\r\n    return (\r\n      <EthHashInfo textSize=\"xl\" hash={props.value as string} showCopyBtn explorerUrl={explorerUrl} shortenHash={4} />\r\n    )\r\n  }\r\n\r\n  return <GenericValue type={type} {...props} />\r\n}\r\n\r\nexport default Value\r\n","import { Text } from '@gnosis.pm/safe-react-components'\r\nimport React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport { DataDecoded } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { isArrayParameter } from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/utils'\r\nimport Value from 'src/routes/safe/components/Transactions/TxList/MethodValue'\r\n\r\nconst TxDetailsMethodParam = styled.div<{ isArrayParameter: boolean }>`\r\n  padding-left: 24px;\r\n  display: ${({ isArrayParameter }) => (isArrayParameter ? 'block' : 'flex')};\r\n  align-items: center;\r\n\r\n  p:first-of-type {\r\n    margin-right: ${({ isArrayParameter }) => (isArrayParameter ? '0' : '4px')};\r\n  }\r\n`\r\n\r\nconst TxInfo = styled.div`\r\n  padding: 8px 0;\r\n`\r\n\r\nconst StyledMethodName = styled(Text)`\r\n  white-space: nowrap;\r\n`\r\n\r\nexport const MethodDetails = ({ data }: { data: DataDecoded }): React.ReactElement => {\r\n  return (\r\n    <TxInfo>\r\n      <Text size=\"xl\" strong>\r\n        {data.method}\r\n      </Text>\r\n\r\n      {data.parameters?.map((param, index) => (\r\n        <TxDetailsMethodParam key={`${data.method}_param-${index}`} isArrayParameter={isArrayParameter(param.type)}>\r\n          <StyledMethodName size=\"xl\" strong>\r\n            {param.name}({param.type}):\r\n          </StyledMethodName>\r\n          <Value method={data.method} type={param.type} value={param.value} />\r\n        </TxDetailsMethodParam>\r\n      ))}\r\n    </TxInfo>\r\n  )\r\n}\r\n","import { AccordionSummary, IconText } from '@gnosis.pm/safe-react-components'\r\nimport React, { ReactElement, ReactNode } from 'react'\r\n\r\nimport { getNetworkInfo } from 'src/config'\r\nimport { DataDecoded, TransactionData } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { fromTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\r\nimport { HexEncodedData } from './HexEncodedData'\r\nimport { MethodDetails } from './MethodDetails'\r\nimport { isSpendingLimitMethod } from './SpendingLimitDetails'\r\nimport { ColumnDisplayAccordionDetails, ActionAccordion } from './styled'\r\nimport { TxInfoDetails } from './TxInfoDetails'\r\n\r\ntype MultiSendTxGroupProps = {\r\n  actionTitle: string\r\n  children: ReactNode\r\n  txDetails: {\r\n    title: string\r\n    address: string\r\n    dataDecoded: DataDecoded | null\r\n  }\r\n}\r\n\r\nconst MultiSendTxGroup = ({ actionTitle, children, txDetails }: MultiSendTxGroupProps): ReactElement => {\r\n  return (\r\n    <ActionAccordion>\r\n      <AccordionSummary>\r\n        <IconText iconSize=\"sm\" iconType=\"code\" text={actionTitle} textSize=\"xl\" />\r\n      </AccordionSummary>\r\n      <ColumnDisplayAccordionDetails>\r\n        {!isSpendingLimitMethod(txDetails.dataDecoded?.method) && (\r\n          <TxInfoDetails title={txDetails.title} address={txDetails.address} />\r\n        )}\r\n        {children}\r\n      </ColumnDisplayAccordionDetails>\r\n    </ActionAccordion>\r\n  )\r\n}\r\n\r\nconst { nativeCoin } = getNetworkInfo()\r\n\r\nexport const MultiSendDetails = ({ txData }: { txData: TransactionData }): ReactElement | null => {\r\n  // no parameters for the `multiSend`\r\n  if (!txData.dataDecoded?.parameters) {\r\n    // we render the hex encoded data\r\n    if (txData.hexData) {\r\n      return <HexEncodedData title=\"Data (hex encoded)\" hexData={txData.hexData} />\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  // multiSend has one parameter `transactions` therefore `txData.dataDecoded.parameters[0]` is safe to be used here\r\n  return (\r\n    <>\r\n      {txData.dataDecoded.parameters[0].valueDecoded?.map(({ dataDecoded }, index, valuesDecoded) => {\r\n        let details\r\n        const { data, value, to } = valuesDecoded[index]\r\n        const actionTitle = `Action ${index + 1} ${dataDecoded ? `(${dataDecoded.method})` : ''}`\r\n        const amount = value ? fromTokenUnit(value, nativeCoin.decimals) : 0\r\n        const title = `Send ${amount} ${nativeCoin.name} to:`\r\n\r\n        if (dataDecoded) {\r\n          // Backend decoded data\r\n          details = <MethodDetails data={dataDecoded} />\r\n        } else {\r\n          // We couldn't decode it but we have data\r\n          details = data && <HexEncodedData title=\"Data (hex encoded)\" hexData={data} />\r\n        }\r\n\r\n        return (\r\n          <MultiSendTxGroup\r\n            key={`${data ?? to}-${index}`}\r\n            actionTitle={actionTitle}\r\n            txDetails={{ title, address: to, dataDecoded }}\r\n          >\r\n            {details}\r\n          </MultiSendTxGroup>\r\n        )\r\n      })}\r\n    </>\r\n  )\r\n}\r\n","import React, { ReactElement, ReactNode } from 'react'\r\n\r\nimport { getNetworkInfo } from 'src/config'\r\nimport {\r\n  ExpandedTxDetails,\r\n  isCustomTxInfo,\r\n  TransactionData,\r\n  TransactionInfo,\r\n} from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { fromTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\r\nimport {\r\n  DeleteSpendingLimitDetails,\r\n  isDeleteAllowance,\r\n  isSetAllowance,\r\n  ModifySpendingLimitDetails,\r\n} from './SpendingLimitDetails'\r\nimport { TxInfoDetails } from './TxInfoDetails'\r\nimport { sameString } from 'src/utils/strings'\r\nimport { HexEncodedData } from './HexEncodedData'\r\nimport { MethodDetails } from './MethodDetails'\r\nimport { MultiSendDetails } from './MultiSendDetails'\r\n\r\nconst { nativeCoin } = getNetworkInfo()\r\n\r\ntype DetailsWithTxInfoProps = {\r\n  children: ReactNode\r\n  txData: TransactionData\r\n  txInfo: TransactionInfo\r\n}\r\n\r\nconst DetailsWithTxInfo = ({ children, txData, txInfo }: DetailsWithTxInfoProps): ReactElement => {\r\n  const amount = txData.value ? fromTokenUnit(txData.value, nativeCoin.decimals) : 'n/a'\r\n  let name\r\n  let avatarUrl\r\n\r\n  if (isCustomTxInfo(txInfo) && txInfo.toInfo) {\r\n    name = txInfo.toInfo.name\r\n    avatarUrl = txInfo.toInfo.logoUri\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <TxInfoDetails\r\n        address={txData.to}\r\n        name={name}\r\n        avatarUrl={avatarUrl}\r\n        title={`Send ${amount} ${nativeCoin.symbol} to:`}\r\n      />\r\n\r\n      {children}\r\n    </>\r\n  )\r\n}\r\n\r\ntype TxDataProps = {\r\n  txData: ExpandedTxDetails['txData']\r\n  txInfo: TransactionInfo\r\n}\r\n\r\nexport const TxData = ({ txData, txInfo }: TxDataProps): ReactElement | null => {\r\n  // nothing to render\r\n  if (!txData) {\r\n    return null\r\n  }\r\n\r\n  // unknown tx information\r\n  if (!txData.dataDecoded) {\r\n    // no hex data, nothing to render\r\n    if (!txData.hexData) {\r\n      return null\r\n    }\r\n\r\n    // we render the hex encoded data\r\n    return (\r\n      <DetailsWithTxInfo txData={txData} txInfo={txInfo}>\r\n        <HexEncodedData title=\"Data (hex encoded)\" hexData={txData.hexData} />\r\n      </DetailsWithTxInfo>\r\n    )\r\n  }\r\n\r\n  // known data and particularly `multiSend` data type\r\n  if (sameString(txData.dataDecoded.method, 'multiSend')) {\r\n    return <MultiSendDetails txData={txData} />\r\n  }\r\n\r\n  // FixMe: this way won't scale well\r\n  if (isSetAllowance(txData.dataDecoded.method)) {\r\n    return <ModifySpendingLimitDetails data={txData.dataDecoded} />\r\n  }\r\n\r\n  // FixMe: this way won't scale well\r\n  if (isDeleteAllowance(txData.dataDecoded.method)) {\r\n    return <DeleteSpendingLimitDetails data={txData.dataDecoded} />\r\n  }\r\n\r\n  // we render the decoded data\r\n  return (\r\n    <DetailsWithTxInfo txData={txData} txInfo={txInfo}>\r\n      <MethodDetails data={txData.dataDecoded} />\r\n    </DetailsWithTxInfo>\r\n  )\r\n}\r\n","import { Button, Tooltip } from '@gnosis.pm/safe-react-components'\r\nimport React, { ReactElement } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { safeNonceSelector } from 'src/logic/safe/store/selectors'\r\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { useActionButtonsHandlers } from 'src/routes/safe/components/Transactions/TxList/hooks/useActionButtonsHandlers'\r\n\r\ntype TxExpandedActionsProps = {\r\n  transaction: Transaction\r\n}\r\n\r\nexport const TxExpandedActions = ({ transaction }: TxExpandedActionsProps): ReactElement | null => {\r\n  const {\r\n    canCancel,\r\n    handleConfirmButtonClick,\r\n    handleCancelButtonClick,\r\n    handleOnMouseEnter,\r\n    handleOnMouseLeave,\r\n    isPending,\r\n    disabledActions,\r\n  } = useActionButtonsHandlers(transaction)\r\n  const nonce = useSelector(safeNonceSelector)\r\n\r\n  const onExecuteOrConfirm = (event) => {\r\n    handleOnMouseLeave()\r\n    handleConfirmButtonClick(event)\r\n  }\r\n\r\n  const getConfirmTooltipTitle = () => {\r\n    if (transaction.txStatus === 'AWAITING_EXECUTION') {\r\n      return transaction.executionInfo?.nonce === nonce\r\n        ? 'Execute'\r\n        : `Transaction with nonce ${nonce} needs to be executed first`\r\n    }\r\n    return 'Confirm'\r\n  }\r\n\r\n  // There is a problem in chrome that produces onMouseLeave event not being triggered properly.\r\n  // https://github.com/facebook/react/issues/4492\r\n  return (\r\n    <>\r\n      <Tooltip title={getConfirmTooltipTitle()} placement=\"top\">\r\n        <span>\r\n          <Button\r\n            size=\"md\"\r\n            color=\"primary\"\r\n            disabled={disabledActions}\r\n            onClick={onExecuteOrConfirm}\r\n            onMouseEnter={handleOnMouseEnter}\r\n            onMouseLeave={handleOnMouseLeave}\r\n            className=\"primary\"\r\n          >\r\n            {transaction.txStatus === 'AWAITING_EXECUTION' ? 'Execute' : 'Confirm'}\r\n          </Button>\r\n        </span>\r\n      </Tooltip>\r\n      {canCancel && (\r\n        <Button size=\"md\" color=\"error\" onClick={handleCancelButtonClick} className=\"error\" disabled={isPending}>\r\n          Reject\r\n        </Button>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n","import { Text } from '@gnosis.pm/safe-react-components'\r\nimport React, { ReactElement } from 'react'\r\n\r\nimport { SettingsChange } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { AddressInfo } from './AddressInfo'\r\nimport { InfoDetails } from './InfoDetails'\r\nimport { TxInfoDetails } from './TxInfoDetails'\r\n\r\ntype TxInfoSettingsProps = {\r\n  settingsInfo: SettingsChange['settingsInfo']\r\n}\r\n\r\nexport const TxInfoSettings = ({ settingsInfo }: TxInfoSettingsProps): ReactElement | null => {\r\n  if (!settingsInfo) {\r\n    return null\r\n  }\r\n\r\n  switch (settingsInfo.type) {\r\n    case 'SET_FALLBACK_HANDLER': {\r\n      return <InfoDetails title=\"Set fallback handler:\">{settingsInfo.handler}</InfoDetails>\r\n    }\r\n    case 'ADD_OWNER': {\r\n      return (\r\n        <InfoDetails title=\"Add owner:\">\r\n          <AddressInfo address={settingsInfo.owner} />\r\n          <InfoDetails title=\"Change required confirmations:\">{settingsInfo.threshold}</InfoDetails>\r\n        </InfoDetails>\r\n      )\r\n    }\r\n    case 'REMOVE_OWNER': {\r\n      return (\r\n        <InfoDetails title=\"Remove owner:\">\r\n          <AddressInfo address={settingsInfo.owner} />\r\n          <InfoDetails title=\"Change required confirmations:\">{settingsInfo.threshold}</InfoDetails>\r\n        </InfoDetails>\r\n      )\r\n    }\r\n    case 'SWAP_OWNER': {\r\n      return (\r\n        <InfoDetails title=\"Swap owner:\">\r\n          <TxInfoDetails title=\"Old owner\" address={settingsInfo.oldOwner} />\r\n          <TxInfoDetails title=\"New owner\" address={settingsInfo.newOwner} />\r\n        </InfoDetails>\r\n      )\r\n    }\r\n    case 'CHANGE_THRESHOLD': {\r\n      return <InfoDetails title=\"Change required confirmations:\">{settingsInfo.threshold}</InfoDetails>\r\n    }\r\n    case 'CHANGE_IMPLEMENTATION': {\r\n      return (\r\n        <InfoDetails title=\"Change implementation:\">\r\n          <Text size=\"md\" strong>\r\n            {settingsInfo.implementation}\r\n          </Text>\r\n        </InfoDetails>\r\n      )\r\n    }\r\n    case 'ENABLE_MODULE': {\r\n      return (\r\n        <InfoDetails title=\"Enable module:\">\r\n          <AddressInfo address={settingsInfo.module} />\r\n        </InfoDetails>\r\n      )\r\n    }\r\n    case 'DISABLE_MODULE': {\r\n      return (\r\n        <InfoDetails title=\"Disable module:\">\r\n          <AddressInfo address={settingsInfo.module} />\r\n        </InfoDetails>\r\n      )\r\n    }\r\n    default:\r\n      return null\r\n  }\r\n}\r\n","import React, { ReactElement, useEffect, useState } from 'react'\r\n\r\nimport { Transfer } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { useAssetInfo } from './hooks/useAssetInfo'\r\nimport { TxInfoDetails } from './TxInfoDetails'\r\n\r\nexport const TxInfoTransfer = ({ txInfo }: { txInfo: Transfer }): ReactElement | null => {\r\n  const assetInfo = useAssetInfo(txInfo)\r\n  const [details, setDetails] = useState<{ title: string; address: string } | undefined>()\r\n\r\n  useEffect(() => {\r\n    if (assetInfo && assetInfo.type === 'Transfer') {\r\n      if (txInfo.direction === 'INCOMING') {\r\n        setDetails({ title: `Received ${assetInfo.amountWithSymbol} from:`, address: txInfo.sender })\r\n      } else {\r\n        setDetails({ title: `Send ${assetInfo.amountWithSymbol} to:`, address: txInfo.recipient })\r\n      }\r\n    }\r\n  }, [assetInfo, txInfo.direction, txInfo.recipient, txInfo.sender])\r\n\r\n  return details ? (\r\n    <TxInfoDetails title={details.title} address={details.address} isTransferType txInfo={txInfo} />\r\n  ) : null\r\n}\r\n","import React, { ReactElement } from 'react'\r\n\r\nimport { TransactionInfo, isSettingsChangeTxInfo, isTransferTxInfo } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { TxInfoSettings } from './TxInfoSettings'\r\nimport { TxInfoTransfer } from './TxInfoTransfer'\r\n\r\nexport const TxInfo = ({ txInfo }: { txInfo: TransactionInfo }): ReactElement | null => {\r\n  if (isSettingsChangeTxInfo(txInfo)) {\r\n    return <TxInfoSettings settingsInfo={txInfo.settingsInfo} />\r\n  }\r\n\r\n  if (isTransferTxInfo(txInfo)) {\r\n    return <TxInfoTransfer txInfo={txInfo} />\r\n  }\r\n\r\n  return null\r\n}\r\n","export default __webpack_public_path__ + \"static/media/transactions-list-active.307ee003.svg\";","export default __webpack_public_path__ + \"static/media/transactions-list-inactive.e5d49753.svg\";","import { EthHashInfo } from '@gnosis.pm/safe-react-components'\r\nimport React, { ReactElement } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { getExplorerInfo } from 'src/config'\r\nimport { getNameFromAddressBookSelector } from 'src/logic/addressBook/store/selectors'\r\nimport { ADDRESS_BOOK_DEFAULT_NAME } from 'src/logic/addressBook/model/addressBook'\r\nimport { sameString } from 'src/utils/strings'\r\n\r\nexport const OwnerRow = ({ address }: { address: string }): ReactElement => {\r\n  const ownerName = useSelector((state) => getNameFromAddressBookSelector(state, { address }))\r\n\r\n  return (\r\n    <EthHashInfo\r\n      hash={address}\r\n      name={sameString(ownerName, ADDRESS_BOOK_DEFAULT_NAME) ? undefined : ownerName}\r\n      showAvatar\r\n      showCopyBtn\r\n      explorerUrl={getExplorerInfo(address)}\r\n      shortenHash={4}\r\n      className=\"owner-info\"\r\n    />\r\n  )\r\n}\r\n","import { Text, Icon } from '@gnosis.pm/safe-react-components'\r\nimport React, { ReactElement } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport Img from 'src/components/layout/Img'\r\nimport { ExpandedTxDetails, isModuleExecutionDetails } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport TransactionListActive from './assets/transactions-list-active.svg'\r\nimport TransactionListInactive from './assets/transactions-list-inactive.svg'\r\nimport { OwnerRow } from './OwnerRow'\r\nimport { OwnerList, OwnerListItem } from './styled'\r\nimport { isCancelTxDetails } from './utils'\r\n\r\nconst StyledImg = styled(Img)`\r\n  background-color: transparent;\r\n  border-radius: 50%;\r\n`\r\n\r\nexport const TxOwners = ({ txDetails }: { txDetails: ExpandedTxDetails }): ReactElement | null => {\r\n  const { txInfo, detailedExecutionInfo } = txDetails\r\n\r\n  if (!detailedExecutionInfo || isModuleExecutionDetails(detailedExecutionInfo)) {\r\n    return null\r\n  }\r\n\r\n  const confirmationsNeeded = detailedExecutionInfo.confirmationsRequired - detailedExecutionInfo.confirmations.length\r\n\r\n  const CreationNode = isCancelTxDetails(txInfo) ? (\r\n    <OwnerListItem>\r\n      <span className=\"icon\">\r\n        <Icon size=\"sm\" type=\"circleCross\" color=\"error\" />\r\n      </span>\r\n      <div className=\"legend\">\r\n        <Text color=\"error\" size=\"xl\" strong>\r\n          On-chain rejection created\r\n        </Text>\r\n      </div>\r\n    </OwnerListItem>\r\n  ) : (\r\n    <OwnerListItem>\r\n      <span className=\"icon\">\r\n        <Icon size=\"sm\" type=\"add\" color=\"primary\" />\r\n      </span>\r\n      <div className=\"legend\">\r\n        <Text color=\"primary\" size=\"xl\" strong>\r\n          Created\r\n        </Text>\r\n      </div>\r\n    </OwnerListItem>\r\n  )\r\n\r\n  return (\r\n    <OwnerList>\r\n      {CreationNode}\r\n      {detailedExecutionInfo.confirmations.map(({ signer }) => (\r\n        <OwnerListItem key={signer}>\r\n          <span className=\"icon\">\r\n            <Icon size=\"sm\" type=\"circleCheck\" color=\"primary\" />\r\n          </span>\r\n          <div className=\"legend\">\r\n            <Text color=\"primary\" size=\"xl\" strong>\r\n              Confirmed\r\n            </Text>\r\n            <OwnerRow address={signer} />\r\n          </div>\r\n        </OwnerListItem>\r\n      ))}\r\n      {confirmationsNeeded <= 0 ? (\r\n        <OwnerListItem>\r\n          <span className=\"icon\">\r\n            {detailedExecutionInfo.executor ? (\r\n              <Icon type=\"circleCheck\" size=\"sm\" color=\"primary\" />\r\n            ) : (\r\n              <StyledImg alt=\"\" src={TransactionListActive} />\r\n            )}\r\n          </span>\r\n          <div className=\"legend\">\r\n            <Text color=\"primary\" size=\"xl\" strong>\r\n              {detailedExecutionInfo.executor ? 'Executed' : 'Execute'}\r\n            </Text>\r\n            {detailedExecutionInfo.executor && <OwnerRow address={detailedExecutionInfo.executor} />}\r\n          </div>\r\n        </OwnerListItem>\r\n      ) : (\r\n        <OwnerListItem>\r\n          <span className=\"icon\">\r\n            <StyledImg alt=\"\" src={TransactionListInactive} />\r\n          </span>\r\n          <div className=\"legend\">\r\n            <Text color=\"icon\" size=\"xl\" strong>\r\n              Execute ({confirmationsNeeded} more {confirmationsNeeded === 1 ? 'confirmation' : 'confirmations'} needed)\r\n            </Text>\r\n          </div>\r\n        </OwnerListItem>\r\n      )}\r\n    </OwnerList>\r\n  )\r\n}\r\n","import { Text } from '@gnosis.pm/safe-react-components'\r\nimport React, { ReactElement } from 'react'\r\n\r\nimport { getExplorerInfo } from 'src/config'\r\nimport { formatDateTime } from 'src/utils/date'\r\nimport { ExpandedTxDetails, isMultiSigExecutionDetails, Operation } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { InlineEthHashInfo } from './styled'\r\nimport { NOT_AVAILABLE } from './utils'\r\n\r\nexport const TxSummary = ({ txDetails }: { txDetails: ExpandedTxDetails }): ReactElement => {\r\n  const { txHash, detailedExecutionInfo, executedAt, txData } = txDetails\r\n  const explorerUrl = txHash ? getExplorerInfo(txHash) : null\r\n  const nonce = isMultiSigExecutionDetails(detailedExecutionInfo) ? detailedExecutionInfo.nonce : undefined\r\n  const created = isMultiSigExecutionDetails(detailedExecutionInfo) ? detailedExecutionInfo.submittedAt : undefined\r\n  const safeTxHash = isMultiSigExecutionDetails(detailedExecutionInfo) ? detailedExecutionInfo.safeTxHash : undefined\r\n\r\n  return (\r\n    <>\r\n      <div className=\"tx-hash\">\r\n        <Text size=\"xl\" strong as=\"span\">\r\n          Transaction hash:{' '}\r\n        </Text>\r\n        {txHash ? (\r\n          <InlineEthHashInfo textSize=\"xl\" hash={txHash} shortenHash={8} showCopyBtn explorerUrl={explorerUrl} />\r\n        ) : (\r\n          <Text size=\"xl\" as=\"span\">\r\n            {NOT_AVAILABLE}\r\n          </Text>\r\n        )}\r\n      </div>\r\n      {safeTxHash !== undefined && (\r\n        <div className=\"tx-hash\">\r\n          <Text size=\"xl\" strong as=\"span\">\r\n            SafeTxHash:{' '}\r\n          </Text>\r\n          <InlineEthHashInfo textSize=\"xl\" hash={safeTxHash} shortenHash={8} showCopyBtn />\r\n        </div>\r\n      )}\r\n      {nonce !== undefined && (\r\n        <div className=\"tx-nonce\">\r\n          <Text size=\"xl\" strong as=\"span\">\r\n            Nonce:{' '}\r\n          </Text>\r\n          <Text size=\"xl\" as=\"span\">\r\n            {nonce}\r\n          </Text>\r\n        </div>\r\n      )}\r\n      {created && (\r\n        <div className=\"tx-created\">\r\n          <Text size=\"xl\" strong as=\"span\">\r\n            Created:{' '}\r\n          </Text>\r\n          <Text size=\"xl\" as=\"span\">\r\n            {formatDateTime(created)}\r\n          </Text>\r\n        </div>\r\n      )}\r\n      <div className=\"tx-executed\">\r\n        <Text size=\"xl\" strong as=\"span\">\r\n          Executed:{' '}\r\n        </Text>\r\n        <Text size=\"xl\" as=\"span\">\r\n          {executedAt ? formatDateTime(executedAt) : NOT_AVAILABLE}\r\n        </Text>\r\n      </div>\r\n      {txData?.operation === Operation.DELEGATE && (\r\n        <div className=\"tx-operation\">\r\n          <Text size=\"xl\" strong as=\"span\">\r\n            Delegate Call\r\n          </Text>\r\n        </div>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n","import { Icon, Link, Loader, Text } from '@gnosis.pm/safe-react-components'\r\nimport cn from 'classnames'\r\nimport React, { ReactElement, useContext } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport {\r\n  ExpandedTxDetails,\r\n  isMultiSendTxInfo,\r\n  isSettingsChangeTxInfo,\r\n  isTransferTxInfo,\r\n  MultiSigExecutionDetails,\r\n  Transaction,\r\n} from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { TransactionActions } from './hooks/useTransactionActions'\r\nimport { useTransactionDetails } from './hooks/useTransactionDetails'\r\nimport { TxDetailsContainer, Centered, AlignItemsWithMargin } from './styled'\r\nimport { TxData } from './TxData'\r\nimport { TxExpandedActions } from './TxExpandedActions'\r\nimport { TxInfo } from './TxInfo'\r\nimport { TxLocationContext } from './TxLocationProvider'\r\nimport { TxOwners } from './TxOwners'\r\nimport { TxSummary } from './TxSummary'\r\nimport { isCancelTxDetails, NOT_AVAILABLE } from './utils'\r\n\r\nconst NormalBreakingText = styled(Text)`\r\n  line-break: normal;\r\n  word-break: normal;\r\n`\r\n\r\nconst TxDataGroup = ({ txDetails }: { txDetails: ExpandedTxDetails }): ReactElement | null => {\r\n  if (isTransferTxInfo(txDetails.txInfo) || isSettingsChangeTxInfo(txDetails.txInfo)) {\r\n    return <TxInfo txInfo={txDetails.txInfo} />\r\n  }\r\n\r\n  if (isCancelTxDetails(txDetails.txInfo)) {\r\n    const txNonce = `${(txDetails.detailedExecutionInfo as MultiSigExecutionDetails).nonce ?? NOT_AVAILABLE}`\r\n    const isTxExecuted = txDetails.executedAt\r\n\r\n    // executed rejection transaction\r\n    let message = `This is an on-chain rejection that didn't send any funds.\r\n     This on-chain rejection replaced all transactions with nonce ${txNonce}.`\r\n\r\n    if (!isTxExecuted) {\r\n      // queued rejection transaction\r\n      message = `This is an on-chain rejection that doesn't send any funds.\r\n Executing this on-chain rejection will replace all currently awaiting transactions with nonce ${txNonce}.`\r\n    }\r\n    return (\r\n      <>\r\n        <NormalBreakingText size=\"xl\">{message}</NormalBreakingText>\r\n        {!isTxExecuted && (\r\n          <>\r\n            <br />\r\n            <Link\r\n              href=\"https://help.gnosis-safe.io/en/articles/4738501-why-do-i-need-to-pay-for-cancelling-a-transaction\"\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n              title=\"Why do I need to pay for rejecting a transaction?\"\r\n            >\r\n              <AlignItemsWithMargin>\r\n                <Text size=\"xl\" as=\"span\" color=\"primary\">\r\n                  Why do I need to pay for rejecting a transaction?\r\n                </Text>\r\n                <Icon size=\"sm\" type=\"externalLink\" color=\"primary\" />\r\n              </AlignItemsWithMargin>\r\n            </Link>\r\n          </>\r\n        )}\r\n      </>\r\n    )\r\n  }\r\n\r\n  if (!txDetails.txData) {\r\n    return null\r\n  }\r\n\r\n  return <TxData txData={txDetails.txData} txInfo={txDetails.txInfo} />\r\n}\r\n\r\ntype TxDetailsProps = {\r\n  transaction: Transaction\r\n  actions?: TransactionActions\r\n}\r\n\r\nexport const TxDetails = ({ transaction, actions }: TxDetailsProps): ReactElement => {\r\n  const { txLocation } = useContext(TxLocationContext)\r\n  const { data, loading } = useTransactionDetails(transaction.id)\r\n\r\n  if (loading) {\r\n    return (\r\n      <Centered padding={10}>\r\n        <Loader size=\"sm\" />\r\n      </Centered>\r\n    )\r\n  }\r\n\r\n  if (!data) {\r\n    return (\r\n      <TxDetailsContainer>\r\n        <Text size=\"xl\" strong>\r\n          No data available\r\n        </Text>\r\n      </TxDetailsContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <TxDetailsContainer>\r\n      <div className={cn('tx-summary', { 'will-be-replaced': transaction.txStatus === 'WILL_BE_REPLACED' })}>\r\n        <TxSummary txDetails={data} />\r\n      </div>\r\n      <div\r\n        className={cn('tx-details', {\r\n          'no-padding': isMultiSendTxInfo(data.txInfo),\r\n          'not-executed': !data.executedAt,\r\n          'will-be-replaced': transaction.txStatus === 'WILL_BE_REPLACED',\r\n        })}\r\n      >\r\n        <TxDataGroup txDetails={data} />\r\n      </div>\r\n      <div\r\n        className={cn('tx-owners', {\r\n          'no-owner': txLocation !== 'history' && !actions?.isUserAnOwner,\r\n          'will-be-replaced': transaction.txStatus === 'WILL_BE_REPLACED',\r\n        })}\r\n      >\r\n        <TxOwners txDetails={data} />\r\n      </div>\r\n      {!data.executedAt && txLocation !== 'history' && actions?.isUserAnOwner && (\r\n        <div className={cn('tx-details-actions', { 'will-be-replaced': transaction.txStatus === 'WILL_BE_REPLACED' })}>\r\n          <TxExpandedActions transaction={transaction} />\r\n        </div>\r\n      )}\r\n    </TxDetailsContainer>\r\n  )\r\n}\r\n","import { useContext, useEffect, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { ExpandedTxDetails } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { fetchTransactionDetails } from 'src/logic/safe/store/actions/fetchTransactionDetails'\r\nimport { TxLocationContext } from 'src/routes/safe/components/Transactions/TxList/TxLocationProvider'\r\nimport { getTransactionDetails } from 'src/logic/safe/store/selectors/gatewayTransactions'\r\nimport { AppReduxState } from 'src/store'\r\n\r\nexport type LoadTransactionDetails = {\r\n  data?: ExpandedTxDetails\r\n  loading: boolean\r\n}\r\n\r\nexport const useTransactionDetails = (transactionId: string): LoadTransactionDetails => {\r\n  const { txLocation } = useContext(TxLocationContext)\r\n  const dispatch = useRef(useDispatch())\r\n  const [txDetails, setTxDetails] = useState<LoadTransactionDetails>({\r\n    loading: true,\r\n    data: undefined,\r\n  })\r\n  const data = useSelector((state: AppReduxState) =>\r\n    getTransactionDetails(state)({ attributeValue: transactionId, attributeName: 'id', txLocation }),\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setTxDetails({ loading: false, data })\r\n    } else {\r\n      // lookup tx details\r\n      dispatch.current(fetchTransactionDetails({ transactionId, txLocation }))\r\n    }\r\n  }, [data, transactionId, txLocation])\r\n\r\n  return txDetails\r\n}\r\n","import { Text } from '@gnosis.pm/safe-react-components'\r\nimport React, { ReactElement } from 'react'\r\n\r\nimport { getExplorerInfo } from 'src/config'\r\nimport { formatDateTime } from 'src/utils/date'\r\nimport { Creation, Transaction } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { NOT_AVAILABLE } from './utils'\r\nimport { InlineEthHashInfo, TxDetailsContainer } from './styled'\r\n\r\nexport const TxInfoCreation = ({ transaction }: { transaction: Transaction }): ReactElement | null => {\r\n  const txInfo = transaction.txInfo as Creation\r\n  const timestamp = transaction.timestamp\r\n\r\n  return (\r\n    <TxDetailsContainer>\r\n      <div className=\"tx-summary\">\r\n        <div className=\"tx-hash\">\r\n          <Text size=\"xl\" strong as=\"span\">\r\n            Transaction hash:{' '}\r\n          </Text>\r\n          <InlineEthHashInfo\r\n            textSize=\"xl\"\r\n            hash={txInfo.transactionHash}\r\n            shortenHash={8}\r\n            showCopyBtn\r\n            explorerUrl={getExplorerInfo(txInfo.transactionHash)}\r\n          />\r\n        </div>\r\n        <div className=\"tx-created\">\r\n          <Text size=\"xl\" strong as=\"span\">\r\n            Created:{' '}\r\n          </Text>\r\n          <Text size=\"xl\" as=\"span\">\r\n            {formatDateTime(timestamp)}\r\n          </Text>\r\n        </div>\r\n        <div className=\"tx-creator\">\r\n          <Text size=\"xl\" strong as=\"span\">\r\n            Creator:{' '}\r\n          </Text>\r\n          <InlineEthHashInfo\r\n            textSize=\"xl\"\r\n            hash={txInfo.creator}\r\n            shortenHash={4}\r\n            showCopyBtn\r\n            explorerUrl={getExplorerInfo(txInfo.creator)}\r\n          />\r\n        </div>\r\n        <div className=\"tx-factory\">\r\n          <Text size=\"xl\" strong as=\"span\">\r\n            Factory:{' '}\r\n          </Text>\r\n          {txInfo.factory ? (\r\n            <InlineEthHashInfo\r\n              textSize=\"xl\"\r\n              hash={txInfo.factory}\r\n              shortenHash={4}\r\n              showCopyBtn\r\n              explorerUrl={getExplorerInfo(txInfo.factory)}\r\n            />\r\n          ) : (\r\n            <Text size=\"xl\" as=\"span\">\r\n              {NOT_AVAILABLE}\r\n            </Text>\r\n          )}\r\n        </div>\r\n        <div className=\"tx-mastercopy\">\r\n          <Text size=\"xl\" strong as=\"span\">\r\n            Mastercopy:{' '}\r\n          </Text>\r\n          {txInfo.implementation ? (\r\n            <InlineEthHashInfo\r\n              textSize=\"xl\"\r\n              hash={txInfo.implementation}\r\n              shortenHash={4}\r\n              showCopyBtn\r\n              explorerUrl={getExplorerInfo(txInfo.implementation)}\r\n            />\r\n          ) : (\r\n            <Text size=\"xl\" as=\"span\">\r\n              {NOT_AVAILABLE}\r\n            </Text>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div />\r\n    </TxDetailsContainer>\r\n  )\r\n}\r\n","import { AccordionDetails } from '@gnosis.pm/safe-react-components'\r\nimport React, { ReactElement } from 'react'\r\n\r\nimport { isCreationTxInfo, Transaction } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { NoPaddingAccordion, StyledAccordionSummary } from './styled'\r\nimport { TxHistoryCollapsed } from './TxHistoryCollapsed'\r\nimport { TxDetails } from './TxDetails'\r\nimport { TxInfoCreation } from './TxInfoCreation'\r\n\r\nexport const TxHistoryRow = ({ transaction }: { transaction: Transaction }): ReactElement => (\r\n  <NoPaddingAccordion\r\n    TransitionProps={{\r\n      mountOnEnter: false,\r\n      unmountOnExit: true,\r\n      appear: true,\r\n    }}\r\n  >\r\n    <StyledAccordionSummary>\r\n      <TxHistoryCollapsed transaction={transaction} />\r\n    </StyledAccordionSummary>\r\n    <AccordionDetails>\r\n      {isCreationTxInfo(transaction.txInfo) ? (\r\n        <TxInfoCreation transaction={transaction} />\r\n      ) : (\r\n        <TxDetails transaction={transaction} />\r\n      )}\r\n    </AccordionDetails>\r\n  </NoPaddingAccordion>\r\n)\r\n","import React, { ReactElement, useContext } from 'react'\r\n\r\nimport { TransactionDetails } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { TxsInfiniteScrollContext } from 'src/routes/safe/components/Transactions/TxList/TxsInfiniteScroll'\r\nimport { formatWithSchema } from 'src/utils/date'\r\nimport { sameString } from 'src/utils/strings'\r\nimport { StyledTransactions, StyledTransactionsGroup, SubTitle } from './styled'\r\nimport { TxHistoryRow } from './TxHistoryRow'\r\nimport { TxLocationContext } from './TxLocationProvider'\r\n\r\nexport const HistoryTxList = ({ transactions }: { transactions: TransactionDetails['transactions'] }): ReactElement => {\r\n  const { lastItemId, setLastItemId } = useContext(TxsInfiniteScrollContext)\r\n\r\n  const [, lastTransactionsGroup] = transactions[transactions.length - 1]\r\n  const lastTransaction = lastTransactionsGroup[lastTransactionsGroup.length - 1]\r\n\r\n  if (!sameString(lastItemId, lastTransaction.id)) {\r\n    setLastItemId(lastTransaction.id)\r\n  }\r\n\r\n  return (\r\n    <TxLocationContext.Provider value={{ txLocation: 'history' }}>\r\n      {transactions?.map(([timestamp, txs]) => (\r\n        <StyledTransactionsGroup key={timestamp}>\r\n          <SubTitle size=\"lg\">{formatWithSchema(Number(timestamp), 'MMM d, yyyy')}</SubTitle>\r\n          <StyledTransactions>\r\n            {txs.map((transaction) => (\r\n              <TxHistoryRow key={transaction.id} transaction={transaction} />\r\n            ))}\r\n          </StyledTransactions>\r\n        </StyledTransactionsGroup>\r\n      ))}\r\n    </TxLocationContext.Provider>\r\n  )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/no-transactions.34ad3291.svg\";","import { Loader, Title } from '@gnosis.pm/safe-react-components'\r\nimport React, { ReactElement } from 'react'\r\n\r\nimport { usePagedHistoryTransactions } from './hooks/usePagedHistoryTransactions'\r\nimport { Centered, NoTransactions } from './styled'\r\nimport { HistoryTxList } from './HistoryTxList'\r\nimport { TxsInfiniteScroll } from './TxsInfiniteScroll'\r\nimport Img from 'src/components/layout/Img'\r\nimport NoTransactionsImage from './assets/no-transactions.svg'\r\n\r\nexport const HistoryTransactions = (): ReactElement => {\r\n  const { count, hasMore, next, transactions, isLoading } = usePagedHistoryTransactions()\r\n\r\n  if (count === 0 && isLoading) {\r\n    return (\r\n      <Centered>\r\n        <Loader size=\"md\" />\r\n      </Centered>\r\n    )\r\n  }\r\n\r\n  if (count === 0) {\r\n    return (\r\n      <NoTransactions>\r\n        <Img alt=\"No Transactions yet\" src={NoTransactionsImage} />\r\n        <Title size=\"xs\">History transactions will appear here </Title>\r\n      </NoTransactions>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <TxsInfiniteScroll next={next} hasMore={hasMore} isLoading={isLoading}>\r\n      <HistoryTxList transactions={transactions} />\r\n    </TxsInfiniteScroll>\r\n  )\r\n}\r\n","import { createStyles, makeStyles } from '@material-ui/core'\r\nimport { background, lg, md, sm } from 'src/theme/variables'\r\n\r\nexport const useStyles = makeStyles(\r\n  createStyles({\r\n    heading: {\r\n      padding: `${sm} ${lg}`,\r\n      justifyContent: 'space-between',\r\n      boxSizing: 'border-box',\r\n      height: '74px',\r\n    },\r\n    headingText: {\r\n      fontSize: lg,\r\n    },\r\n    closeIcon: {\r\n      height: '35px',\r\n      width: '35px',\r\n    },\r\n    container: {\r\n      padding: `${md} ${lg}`,\r\n    },\r\n    nonceNumber: {\r\n      marginTop: sm,\r\n      fontSize: md,\r\n    },\r\n    gasCostsContainer: {\r\n      backgroundColor: background,\r\n      padding: `0 ${lg}`,\r\n    },\r\n  }),\r\n)\r\n","import { Record } from 'immutable'\r\nimport { ConfirmationProps } from './types/confirmation'\r\n\r\nexport const makeConfirmation = Record<ConfirmationProps>({\r\n  owner: '',\r\n  type: 'initialised',\r\n  hash: '',\r\n  signature: null,\r\n})\r\n","import { List } from 'immutable'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Close from '@material-ui/icons/Close'\r\nimport React, { useMemo, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { useStyles } from './style'\r\n\r\nimport Modal, { ButtonStatus, Modal as GenericModal } from 'src/components/Modal'\r\nimport Block from 'src/components/layout/Block'\r\nimport Bold from 'src/components/layout/Bold'\r\nimport Hairline from 'src/components/layout/Hairline'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Row from 'src/components/layout/Row'\r\nimport { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions'\r\nimport { processTransaction } from 'src/logic/safe/store/actions/processTransaction'\r\nimport { safeParamAddressFromStateSelector } from 'src/logic/safe/store/selectors'\r\nimport { EstimationStatus, useEstimateTransactionGas } from 'src/logic/hooks/useEstimateTransactionGas'\r\nimport { useEstimationStatus } from 'src/logic/hooks/useEstimationStatus'\r\nimport { TransactionFees } from 'src/components/TransactionsFees'\r\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\r\nimport { TxParametersDetail } from 'src/routes/safe/components/Transactions/helpers/TxParametersDetail'\r\nimport { EditableTxParameters } from 'src/routes/safe/components/Transactions/helpers/EditableTxParameters'\r\nimport { EMPTY_DATA } from 'src/logic/wallets/ethTransactions'\r\nimport { userAccountSelector } from 'src/logic/wallets/store/selectors'\r\nimport { isThresholdReached } from 'src/routes/safe/components/Transactions/TxList/hooks/useTransactionActions'\r\nimport { Overwrite } from 'src/types/helpers'\r\nimport { ZERO_ADDRESS } from 'src/logic/wallets/ethAddresses'\r\nimport { makeConfirmation } from 'src/logic/safe/store/models/confirmation'\r\nimport { NOTIFICATIONS } from 'src/logic/notifications'\r\nimport {\r\n  ExpandedTxDetails,\r\n  isMultiSigExecutionDetails,\r\n  Operation,\r\n  Transaction,\r\n} from 'src/logic/safe/store/models/types/gateway.d'\r\nimport enqueueSnackbar from 'src/logic/notifications/store/actions/enqueueSnackbar'\r\n\r\nexport const APPROVE_TX_MODAL_SUBMIT_BTN_TEST_ID = 'approve-tx-modal-submit-btn'\r\nexport const REJECT_TX_MODAL_SUBMIT_BTN_TEST_ID = 'reject-tx-modal-submit-btn'\r\n\r\nconst getModalTitleAndDescription = (thresholdReached, isCancelTx) => {\r\n  const modalInfo = {\r\n    title: 'Execute transaction rejection',\r\n    description: 'This action will execute this transaction.',\r\n  }\r\n\r\n  if (isCancelTx) {\r\n    return modalInfo\r\n  }\r\n\r\n  if (thresholdReached) {\r\n    modalInfo.title = 'Execute transaction'\r\n    modalInfo.description =\r\n      'This action will execute this transaction. A separate Transaction will be performed to submit the execution.'\r\n  } else {\r\n    modalInfo.title = 'Approve Transaction'\r\n    modalInfo.description =\r\n      'This action will approve this transaction. A separate Transaction will be performed to submit the approval.'\r\n  }\r\n\r\n  return modalInfo\r\n}\r\n\r\nconst useTxInfo = (transaction: Props['transaction']) => {\r\n  const t = useRef(transaction)\r\n  const safeAddress = useSelector(safeParamAddressFromStateSelector)\r\n\r\n  const confirmations = useMemo(\r\n    () =>\r\n      t.current.txDetails.detailedExecutionInfo && isMultiSigExecutionDetails(t.current.txDetails.detailedExecutionInfo)\r\n        ? List(\r\n            t.current.txDetails.detailedExecutionInfo.confirmations.map(({ signer, signature }) =>\r\n              makeConfirmation({ owner: signer, signature }),\r\n            ),\r\n          )\r\n        : List([]),\r\n    [],\r\n  )\r\n\r\n  const data = useMemo(() => t.current.txDetails.txData?.hexData ?? EMPTY_DATA, [])\r\n\r\n  const baseGas = useMemo(\r\n    () =>\r\n      isMultiSigExecutionDetails(t.current.txDetails.detailedExecutionInfo)\r\n        ? t.current.txDetails.detailedExecutionInfo.baseGas\r\n        : 0,\r\n    [],\r\n  )\r\n\r\n  const gasPrice = useMemo(\r\n    () =>\r\n      isMultiSigExecutionDetails(t.current.txDetails.detailedExecutionInfo)\r\n        ? t.current.txDetails.detailedExecutionInfo.gasPrice\r\n        : '0',\r\n    [],\r\n  )\r\n\r\n  const safeTxGas = useMemo(\r\n    () =>\r\n      isMultiSigExecutionDetails(t.current.txDetails.detailedExecutionInfo)\r\n        ? t.current.txDetails.detailedExecutionInfo.safeTxGas\r\n        : 0,\r\n    [],\r\n  )\r\n\r\n  const gasToken = useMemo(\r\n    () =>\r\n      isMultiSigExecutionDetails(t.current.txDetails.detailedExecutionInfo)\r\n        ? t.current.txDetails.detailedExecutionInfo.gasToken\r\n        : ZERO_ADDRESS,\r\n    [],\r\n  )\r\n\r\n  const nonce = useMemo(() => t.current.executionInfo?.nonce ?? 0, [])\r\n\r\n  const refundReceiver = useMemo(\r\n    () =>\r\n      isMultiSigExecutionDetails(t.current.txDetails.detailedExecutionInfo)\r\n        ? t.current.txDetails.detailedExecutionInfo.refundReceiver\r\n        : ZERO_ADDRESS,\r\n    [],\r\n  )\r\n\r\n  const safeTxHash = useMemo(\r\n    () =>\r\n      isMultiSigExecutionDetails(t.current.txDetails.detailedExecutionInfo)\r\n        ? t.current.txDetails.detailedExecutionInfo.safeTxHash\r\n        : EMPTY_DATA,\r\n    [],\r\n  )\r\n\r\n  const value = useMemo(() => {\r\n    switch (t.current.txInfo.type) {\r\n      case 'Transfer':\r\n        if (t.current.txInfo.transferInfo.type === 'ETHER') {\r\n          return t.current.txInfo.transferInfo.value\r\n        } else {\r\n          return t.current.txDetails.txData?.value ?? '0'\r\n        }\r\n      case 'Custom':\r\n        return t.current.txInfo.value\r\n      case 'Creation':\r\n      case 'SettingsChange':\r\n      default:\r\n        return '0'\r\n    }\r\n  }, [])\r\n\r\n  const to = useMemo(() => {\r\n    switch (t.current.txInfo.type) {\r\n      case 'Transfer':\r\n        if (t.current.txInfo.transferInfo.type === 'ETHER') {\r\n          return t.current.txInfo.recipient\r\n        } else {\r\n          return t.current.txInfo.transferInfo.tokenAddress\r\n        }\r\n      case 'Custom':\r\n        return t.current.txInfo.to\r\n      case 'Creation':\r\n      case 'SettingsChange':\r\n      default:\r\n        return safeAddress\r\n    }\r\n  }, [safeAddress])\r\n\r\n  const operation = useMemo(() => t.current.txDetails.txData?.operation ?? Operation.CALL, [])\r\n\r\n  const origin = useMemo(\r\n    () =>\r\n      t.current.safeAppInfo ? JSON.stringify({ name: t.current.safeAppInfo.name, url: t.current.safeAppInfo.url }) : '',\r\n    [],\r\n  )\r\n\r\n  const id = useMemo(() => t.current.id, [])\r\n\r\n  return {\r\n    confirmations,\r\n    data,\r\n    baseGas,\r\n    gasPrice,\r\n    safeTxGas,\r\n    gasToken,\r\n    nonce,\r\n    refundReceiver,\r\n    safeTxHash,\r\n    value,\r\n    to,\r\n    operation,\r\n    origin,\r\n    id,\r\n  }\r\n}\r\n\r\ntype Props = {\r\n  onClose: () => void\r\n  canExecute?: boolean\r\n  isCancelTx?: boolean\r\n  isOpen: boolean\r\n  transaction: Overwrite<Transaction, { txDetails: ExpandedTxDetails }>\r\n  txParameters: TxParameters\r\n}\r\n\r\nexport const ApproveTxModal = ({\r\n  onClose,\r\n  canExecute = false,\r\n  isCancelTx = false,\r\n  isOpen,\r\n  transaction,\r\n}: Props): React.ReactElement => {\r\n  const dispatch = useDispatch()\r\n  const userAddress = useSelector(userAccountSelector)\r\n  const classes = useStyles()\r\n  const safeAddress = useSelector(safeParamAddressFromStateSelector)\r\n  const [approveAndExecute, setApproveAndExecute] = useState(canExecute)\r\n  const thresholdReached = !!(transaction.executionInfo && isThresholdReached(transaction.executionInfo))\r\n  const _threshold = transaction.executionInfo?.confirmationsRequired ?? 0\r\n  const _countingCurrentConfirmation = (transaction.executionInfo?.confirmationsSubmitted ?? 0) + 1\r\n  const { description, title } = getModalTitleAndDescription(thresholdReached, isCancelTx)\r\n  const oneConfirmationLeft = !thresholdReached && _countingCurrentConfirmation === _threshold\r\n  const isTheTxReadyToBeExecuted = oneConfirmationLeft ? true : thresholdReached\r\n  const [manualGasPrice, setManualGasPrice] = useState<string | undefined>()\r\n  const [manualGasLimit, setManualGasLimit] = useState<string | undefined>()\r\n  const {\r\n    confirmations,\r\n    data,\r\n    baseGas,\r\n    gasPrice,\r\n    safeTxGas,\r\n    gasToken,\r\n    nonce,\r\n    refundReceiver,\r\n    safeTxHash,\r\n    value,\r\n    to,\r\n    operation,\r\n    origin,\r\n    id,\r\n  } = useTxInfo(transaction)\r\n  const {\r\n    gasLimit,\r\n    gasPriceFormatted,\r\n    gasCostFormatted,\r\n    txEstimationExecutionStatus,\r\n    isExecution,\r\n    isOffChainSignature,\r\n    isCreation,\r\n  } = useEstimateTransactionGas({\r\n    txRecipient: to,\r\n    txData: data,\r\n    txConfirmations: confirmations,\r\n    txAmount: value,\r\n    preApprovingOwner: approveAndExecute ? userAddress : undefined,\r\n    safeTxGas,\r\n    operation,\r\n    manualGasPrice,\r\n    manualGasLimit,\r\n  })\r\n\r\n  const [buttonStatus] = useEstimationStatus(txEstimationExecutionStatus)\r\n\r\n  const handleExecuteCheckbox = () => setApproveAndExecute((prevApproveAndExecute) => !prevApproveAndExecute)\r\n\r\n  const approveTx = (txParameters: TxParameters) => {\r\n    if (thresholdReached && confirmations.size < _threshold) {\r\n      dispatch(enqueueSnackbar(NOTIFICATIONS.TX_FETCH_SIGNATURES_ERROR_MSG))\r\n    } else {\r\n      dispatch(\r\n        processTransaction({\r\n          safeAddress,\r\n          tx: {\r\n            id,\r\n            baseGas,\r\n            confirmations,\r\n            data,\r\n            gasPrice,\r\n            gasToken,\r\n            nonce,\r\n            operation,\r\n            origin,\r\n            refundReceiver,\r\n            safeTxGas,\r\n            safeTxHash,\r\n            to,\r\n            value,\r\n          },\r\n          userAddress,\r\n          notifiedTransaction: TX_NOTIFICATION_TYPES.CONFIRMATION_TX,\r\n          approveAndExecute: canExecute && approveAndExecute && isTheTxReadyToBeExecuted,\r\n          ethParameters: txParameters,\r\n          thresholdReached,\r\n        }),\r\n      )\r\n    }\r\n    onClose()\r\n  }\r\n\r\n  const getParametersStatus = () => {\r\n    if (canExecute || approveAndExecute) {\r\n      return 'SAFE_DISABLED'\r\n    }\r\n\r\n    return 'DISABLED'\r\n  }\r\n\r\n  const closeEditModalCallback = (txParameters: TxParameters) => {\r\n    const oldGasPrice = Number(gasPriceFormatted)\r\n    const newGasPrice = Number(txParameters.ethGasPrice)\r\n\r\n    if (newGasPrice && oldGasPrice !== newGasPrice) {\r\n      setManualGasPrice(newGasPrice.toString())\r\n    }\r\n\r\n    if (txParameters.ethGasLimit && gasLimit !== txParameters.ethGasLimit) {\r\n      setManualGasLimit(txParameters.ethGasLimit.toString())\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal description={description} handleClose={onClose} open={isOpen} title={title}>\r\n      <EditableTxParameters\r\n        isOffChainSignature={isOffChainSignature}\r\n        isExecution={isExecution}\r\n        parametersStatus={getParametersStatus()}\r\n        ethGasLimit={gasLimit}\r\n        ethGasPrice={gasPriceFormatted}\r\n        safeNonce={nonce.toString()}\r\n        safeTxGas={safeTxGas.toString()}\r\n        closeEditModalCallback={closeEditModalCallback}\r\n      >\r\n        {(txParameters, toggleEditMode) => {\r\n          return (\r\n            <>\r\n              {/* Header */}\r\n              <Row align=\"center\" className={classes.heading} grow>\r\n                <Paragraph className={classes.headingText} noMargin weight=\"bolder\">\r\n                  {title}\r\n                </Paragraph>\r\n                <IconButton disableRipple onClick={onClose}>\r\n                  <Close className={classes.closeIcon} />\r\n                </IconButton>\r\n              </Row>\r\n\r\n              <Hairline />\r\n\r\n              {/* Tx info */}\r\n              <Block className={classes.container}>\r\n                <Row style={{ flexDirection: 'column' }}>\r\n                  <Paragraph>{description}</Paragraph>\r\n                  <Paragraph color=\"medium\" size=\"sm\">\r\n                    Transaction nonce:\r\n                    <br />\r\n                    <Bold className={classes.nonceNumber}>{nonce}</Bold>\r\n                  </Paragraph>\r\n\r\n                  {oneConfirmationLeft && canExecute && (\r\n                    <>\r\n                      <Paragraph color=\"error\">\r\n                        Approving this transaction executes it right away.\r\n                        {!isCancelTx &&\r\n                          ' If you want approve but execute the transaction manually later, click on the checkbox below.'}\r\n                      </Paragraph>\r\n\r\n                      {!isCancelTx && (\r\n                        <FormControlLabel\r\n                          control={\r\n                            <Checkbox checked={approveAndExecute} color=\"primary\" onChange={handleExecuteCheckbox} />\r\n                          }\r\n                          label=\"Execute transaction\"\r\n                          data-testid=\"execute-checkbox\"\r\n                        />\r\n                      )}\r\n                    </>\r\n                  )}\r\n\r\n                  {/* Tx Parameters */}\r\n                  {(approveAndExecute || !isOffChainSignature) && (\r\n                    <TxParametersDetail\r\n                      txParameters={txParameters}\r\n                      onEdit={toggleEditMode}\r\n                      parametersStatus={getParametersStatus()}\r\n                      isTransactionCreation={isCreation}\r\n                      isTransactionExecution={isExecution}\r\n                      isOffChainSignature={isOffChainSignature}\r\n                    />\r\n                  )}\r\n                </Row>\r\n              </Block>\r\n\r\n              {txEstimationExecutionStatus === EstimationStatus.LOADING ? null : (\r\n                <Block className={classes.gasCostsContainer}>\r\n                  <TransactionFees\r\n                    gasCostFormatted={gasCostFormatted}\r\n                    isExecution={isExecution}\r\n                    isCreation={isCreation}\r\n                    isOffChainSignature={isOffChainSignature}\r\n                    txEstimationExecutionStatus={txEstimationExecutionStatus}\r\n                  />\r\n                </Block>\r\n              )}\r\n\r\n              {/* Footer */}\r\n              <GenericModal.Footer withoutBorder={buttonStatus !== ButtonStatus.LOADING}>\r\n                <GenericModal.Footer.Buttons\r\n                  cancelButtonProps={{ onClick: onClose, text: 'Close' }}\r\n                  confirmButtonProps={{\r\n                    onClick: () => approveTx(txParameters),\r\n                    type: 'submit',\r\n                    status: buttonStatus,\r\n                    text: txEstimationExecutionStatus === EstimationStatus.LOADING ? 'Estimating' : undefined,\r\n                    testId: isCancelTx ? REJECT_TX_MODAL_SUBMIT_BTN_TEST_ID : APPROVE_TX_MODAL_SUBMIT_BTN_TEST_ID,\r\n                  }}\r\n                />\r\n              </GenericModal.Footer>\r\n            </>\r\n          )\r\n        }}\r\n      </EditableTxParameters>\r\n    </Modal>\r\n  )\r\n}\r\n","import { List } from 'immutable'\r\nimport { AnyAction } from 'redux'\r\nimport { ThunkAction } from 'redux-thunk'\r\n\r\nimport { getGnosisSafeInstanceAt } from 'src/logic/contracts/safeContracts'\r\nimport { getNotificationsFromTxType } from 'src/logic/notifications'\r\nimport {\r\n  checkIfOffChainSignatureIsPossible,\r\n  generateSignaturesFromTxConfirmations,\r\n  getPreValidatedSignatures,\r\n} from 'src/logic/safe/safeTxSigner'\r\nimport { getApprovalTransaction, getExecutionTransaction, saveTxToHistory } from 'src/logic/safe/transactions'\r\nimport { tryOffChainSigning } from 'src/logic/safe/transactions/offchainSigner'\r\nimport * as aboutToExecuteTx from 'src/logic/safe/utils/aboutToExecuteTx'\r\nimport { getCurrentSafeVersion } from 'src/logic/safe/utils/safeVersion'\r\nimport { EMPTY_DATA } from 'src/logic/wallets/ethTransactions'\r\nimport { providerSelector } from 'src/logic/wallets/store/selectors'\r\nimport enqueueSnackbar from 'src/logic/notifications/store/actions/enqueueSnackbar'\r\nimport closeSnackbarAction from 'src/logic/notifications/store/actions/closeSnackbar'\r\nimport { fetchSafe } from 'src/logic/safe/store/actions/fetchSafe'\r\nimport fetchTransactions from 'src/logic/safe/store/actions/transactions/fetchTransactions'\r\nimport { getLastTx, getNewTxNonce, shouldExecuteTransaction } from 'src/logic/safe/store/actions/utils'\r\nimport { AppReduxState } from 'src/store'\r\nimport { getErrorMessage } from 'src/test/utils/ethereumErrors'\r\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\r\n\r\nimport { Dispatch, DispatchReturn } from './types'\r\nimport { PayableTx } from 'src/types/contracts/types'\r\n\r\nimport { updateTransactionStatus } from 'src/logic/safe/store/actions/updateTransactionStatus'\r\nimport { Confirmation } from 'src/logic/safe/store/models/types/confirmation'\r\nimport { Operation } from 'src/logic/safe/store/models/types/gateway.d'\r\n\r\ninterface ProcessTransactionArgs {\r\n  approveAndExecute: boolean\r\n  notifiedTransaction: string\r\n  safeAddress: string\r\n  tx: {\r\n    id: string\r\n    confirmations: List<Confirmation>\r\n    origin: string // json.stringified url, name\r\n    to: string\r\n    value: string\r\n    data: string\r\n    operation: Operation\r\n    nonce: number\r\n    safeTxGas: number\r\n    safeTxHash: string\r\n    baseGas: number\r\n    gasPrice: string\r\n    gasToken: string\r\n    refundReceiver: string\r\n  }\r\n  userAddress: string\r\n  ethParameters?: Pick<TxParameters, 'ethNonce' | 'ethGasLimit' | 'ethGasPriceInGWei'>\r\n  thresholdReached: boolean\r\n}\r\n\r\ntype ProcessTransactionAction = ThunkAction<Promise<void | string>, AppReduxState, DispatchReturn, AnyAction>\r\n\r\nexport const processTransaction = ({\r\n  approveAndExecute,\r\n  notifiedTransaction,\r\n  safeAddress,\r\n  tx,\r\n  userAddress,\r\n  ethParameters,\r\n  thresholdReached,\r\n}: ProcessTransactionArgs): ProcessTransactionAction => async (\r\n  dispatch: Dispatch,\r\n  getState: () => AppReduxState,\r\n): Promise<DispatchReturn> => {\r\n  const state = getState()\r\n\r\n  const { account: from, hardwareWallet, smartContractWallet } = providerSelector(state)\r\n  const safeInstance = getGnosisSafeInstanceAt(safeAddress)\r\n\r\n  const lastTx = await getLastTx(safeAddress)\r\n  const nonce = await getNewTxNonce(lastTx, safeInstance)\r\n  const isExecution = approveAndExecute || (await shouldExecuteTransaction(safeInstance, nonce, lastTx))\r\n  const safeVersion = await getCurrentSafeVersion(safeInstance)\r\n\r\n  const preApprovingOwner = approveAndExecute && !thresholdReached ? userAddress : undefined\r\n  let sigs = generateSignaturesFromTxConfirmations(tx.confirmations, preApprovingOwner)\r\n\r\n  if (!sigs) {\r\n    sigs = getPreValidatedSignatures(from)\r\n  }\r\n\r\n  const notificationsQueue = getNotificationsFromTxType(notifiedTransaction, tx.origin)\r\n  const beforeExecutionKey = dispatch(enqueueSnackbar(notificationsQueue.beforeExecution))\r\n\r\n  let txHash\r\n  let transaction\r\n  const txArgs = {\r\n    ...tx, // merge the previous tx with new data\r\n    safeInstance,\r\n    to: tx.to,\r\n    valueInWei: tx.value,\r\n    data: tx.data ?? EMPTY_DATA,\r\n    operation: tx.operation,\r\n    nonce: tx.nonce,\r\n    safeTxGas: tx.safeTxGas,\r\n    baseGas: tx.baseGas,\r\n    gasPrice: tx.gasPrice || '0',\r\n    gasToken: tx.gasToken,\r\n    refundReceiver: tx.refundReceiver,\r\n    sender: from,\r\n    sigs,\r\n  }\r\n\r\n  try {\r\n    if (checkIfOffChainSignatureIsPossible(isExecution, smartContractWallet, safeVersion)) {\r\n      const signature = await tryOffChainSigning(tx.safeTxHash, { ...txArgs, safeAddress }, hardwareWallet, safeVersion)\r\n\r\n      if (signature) {\r\n        dispatch(closeSnackbarAction({ key: beforeExecutionKey }))\r\n\r\n        dispatch(updateTransactionStatus({ txStatus: 'PENDING', safeAddress, nonce: tx.nonce, id: tx.id }))\r\n        await saveTxToHistory({ ...txArgs, signature })\r\n\r\n        dispatch(fetchTransactions(safeAddress))\r\n        return\r\n      }\r\n    }\r\n\r\n    transaction = isExecution ? getExecutionTransaction(txArgs) : getApprovalTransaction(safeInstance, tx.safeTxHash)\r\n\r\n    const sendParams: PayableTx = {\r\n      from,\r\n      value: 0,\r\n      gas: ethParameters?.ethGasLimit,\r\n      gasPrice: ethParameters?.ethGasPriceInGWei,\r\n      nonce: ethParameters?.ethNonce,\r\n    }\r\n\r\n    await transaction\r\n      .send(sendParams)\r\n      .once('transactionHash', async (hash: string) => {\r\n        txHash = hash\r\n        dispatch(closeSnackbarAction({ key: beforeExecutionKey }))\r\n\r\n        dispatch(\r\n          updateTransactionStatus({\r\n            txStatus: 'PENDING',\r\n            safeAddress,\r\n            nonce: tx.nonce,\r\n            // if we provide the tx ID that sole tx will have the _pending_ status.\r\n            // if not, all the txs that share the same nonce will have the _pending_ status.\r\n            id: tx.id,\r\n          }),\r\n        )\r\n\r\n        try {\r\n          await saveTxToHistory({ ...txArgs, txHash })\r\n\r\n          // store the pending transaction's nonce\r\n          isExecution && aboutToExecuteTx.setNonce(txArgs.nonce)\r\n\r\n          dispatch(fetchTransactions(safeAddress))\r\n        } catch (e) {\r\n          console.error(e)\r\n        }\r\n      })\r\n      .on('error', (error) => {\r\n        dispatch(\r\n          updateTransactionStatus({\r\n            txStatus: 'PENDING_FAILED',\r\n            safeAddress,\r\n            nonce: tx.nonce,\r\n            id: tx.id,\r\n          }),\r\n        )\r\n\r\n        console.error('Processing transaction error: ', error)\r\n      })\r\n      .then(async (receipt) => {\r\n        dispatch(fetchTransactions(safeAddress))\r\n\r\n        if (isExecution) {\r\n          dispatch(fetchSafe(safeAddress))\r\n        }\r\n\r\n        return receipt.transactionHash\r\n      })\r\n  } catch (err) {\r\n    const errorMsg = err.message\r\n      ? `${notificationsQueue.afterExecutionError.message} - ${err.message}`\r\n      : notificationsQueue.afterExecutionError.message\r\n\r\n    dispatch(closeSnackbarAction({ key: beforeExecutionKey }))\r\n\r\n    dispatch(\r\n      updateTransactionStatus({\r\n        txStatus: 'PENDING_FAILED',\r\n        safeAddress,\r\n        nonce: tx.nonce,\r\n        id: tx.id,\r\n      }),\r\n    )\r\n    dispatch(enqueueSnackbar({ key: err.code, message: errorMsg, options: { persist: true, variant: 'error' } }))\r\n\r\n    if (txHash) {\r\n      const executeData = safeInstance.methods.approveHash(txHash).encodeABI()\r\n      const errMsg = await getErrorMessage(safeInstance.options.address, 0, executeData, from)\r\n      console.error(`Error executing the TX: ${errMsg}`)\r\n    }\r\n  }\r\n\r\n  return txHash\r\n}\r\n","import IconButton from '@material-ui/core/IconButton'\r\nimport Close from '@material-ui/icons/Close'\r\nimport React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { useStyles } from './style'\r\n\r\nimport Modal, { ButtonStatus, Modal as GenericModal } from 'src/components/Modal'\r\nimport Block from 'src/components/layout/Block'\r\nimport Bold from 'src/components/layout/Bold'\r\nimport Hairline from 'src/components/layout/Hairline'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Row from 'src/components/layout/Row'\r\nimport { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions'\r\nimport { EMPTY_DATA } from 'src/logic/wallets/ethTransactions'\r\nimport { createTransaction } from 'src/logic/safe/store/actions/createTransaction'\r\n\r\nimport { safeParamAddressFromStateSelector } from 'src/logic/safe/store/selectors'\r\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { EstimationStatus, useEstimateTransactionGas } from 'src/logic/hooks/useEstimateTransactionGas'\r\nimport { TransactionFees } from 'src/components/TransactionsFees'\r\nimport { TxParametersDetail } from 'src/routes/safe/components/Transactions/helpers/TxParametersDetail'\r\nimport { EditableTxParameters } from 'src/routes/safe/components/Transactions/helpers/EditableTxParameters'\r\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\r\nimport { ParametersStatus } from 'src/routes/safe/components/Transactions/helpers/utils'\r\n\r\ntype Props = {\r\n  isOpen: boolean\r\n  onClose: () => void\r\n  gwTransaction: Transaction\r\n}\r\n\r\nexport const RejectTxModal = ({ isOpen, onClose, gwTransaction }: Props): React.ReactElement => {\r\n  const dispatch = useDispatch()\r\n  const safeAddress = useSelector(safeParamAddressFromStateSelector)\r\n  const classes = useStyles()\r\n\r\n  const {\r\n    gasCostFormatted,\r\n    txEstimationExecutionStatus,\r\n    isExecution,\r\n    isOffChainSignature,\r\n    isCreation,\r\n    gasLimit,\r\n    gasPriceFormatted,\r\n  } = useEstimateTransactionGas({\r\n    txData: EMPTY_DATA,\r\n    txRecipient: safeAddress,\r\n  })\r\n\r\n  const origin = gwTransaction.safeAppInfo\r\n    ? JSON.stringify({ name: gwTransaction.safeAppInfo.name, url: gwTransaction.safeAppInfo.url })\r\n    : ''\r\n\r\n  const nonce = gwTransaction.executionInfo?.nonce ?? 0\r\n\r\n  const sendReplacementTransaction = (txParameters: TxParameters) => {\r\n    dispatch(\r\n      createTransaction({\r\n        safeAddress,\r\n        to: safeAddress,\r\n        valueInWei: '0',\r\n        txNonce: nonce,\r\n        origin,\r\n        safeTxGas: txParameters.safeTxGas ? Number(txParameters.safeTxGas) : undefined,\r\n        ethParameters: txParameters,\r\n        notifiedTransaction: TX_NOTIFICATION_TYPES.CANCELLATION_TX,\r\n        navigateToTransactionsTab: false,\r\n      }),\r\n    )\r\n    onClose()\r\n  }\r\n\r\n  const getParametersStatus = (): ParametersStatus => {\r\n    return 'CANCEL_TRANSACTION'\r\n  }\r\n\r\n  let confirmButtonStatus: ButtonStatus = ButtonStatus.READY\r\n  let confirmButtonText = 'Reject transaction'\r\n  if (txEstimationExecutionStatus === EstimationStatus.LOADING) {\r\n    confirmButtonStatus = ButtonStatus.LOADING\r\n    confirmButtonText = 'Estimating'\r\n  }\r\n\r\n  return (\r\n    <Modal description=\"Reject transaction\" handleClose={onClose} open={isOpen} title=\"Reject Transaction\">\r\n      <EditableTxParameters\r\n        isOffChainSignature={isOffChainSignature}\r\n        isExecution={isExecution}\r\n        ethGasLimit={gasLimit}\r\n        ethGasPrice={gasPriceFormatted}\r\n        safeTxGas={'0'}\r\n        safeNonce={nonce.toString()}\r\n        parametersStatus={getParametersStatus()}\r\n      >\r\n        {(txParameters, toggleEditMode) => {\r\n          return (\r\n            <>\r\n              <Row align=\"center\" className={classes.heading} grow>\r\n                <Paragraph className={classes.headingText} noMargin weight=\"bolder\">\r\n                  Reject transaction\r\n                </Paragraph>\r\n                <IconButton disableRipple onClick={onClose}>\r\n                  <Close className={classes.closeIcon} />\r\n                </IconButton>\r\n              </Row>\r\n              <Hairline />\r\n              <Block className={classes.container}>\r\n                <Row>\r\n                  <Paragraph>\r\n                    This action will reject this transaction. A separate transaction will be performed to submit the\r\n                    rejection.\r\n                  </Paragraph>\r\n                  <Paragraph color=\"medium\" size=\"sm\">\r\n                    Transaction nonce:\r\n                    <br />\r\n                    <Bold className={classes.nonceNumber}>{nonce}</Bold>\r\n                  </Paragraph>\r\n                </Row>\r\n                {/* Tx Parameters */}\r\n                <TxParametersDetail\r\n                  txParameters={txParameters}\r\n                  onEdit={toggleEditMode}\r\n                  parametersStatus={getParametersStatus()}\r\n                  isTransactionCreation={isCreation}\r\n                  isTransactionExecution={isExecution}\r\n                  isOffChainSignature={isOffChainSignature}\r\n                />\r\n              </Block>\r\n\r\n              {txEstimationExecutionStatus === EstimationStatus.LOADING ? null : (\r\n                <Block className={classes.gasCostsContainer}>\r\n                  <TransactionFees\r\n                    gasCostFormatted={gasCostFormatted}\r\n                    isExecution={isExecution}\r\n                    isCreation={isCreation}\r\n                    isOffChainSignature={isOffChainSignature}\r\n                    txEstimationExecutionStatus={txEstimationExecutionStatus}\r\n                  />\r\n                </Block>\r\n              )}\r\n              <GenericModal.Footer withoutBorder={confirmButtonStatus !== ButtonStatus.LOADING}>\r\n                <GenericModal.Footer.Buttons\r\n                  cancelButtonProps={{ onClick: onClose, text: 'Close' }}\r\n                  confirmButtonProps={{\r\n                    onClick: () => sendReplacementTransaction(txParameters),\r\n                    color: 'error',\r\n                    type: 'submit',\r\n                    status: confirmButtonStatus,\r\n                    text: confirmButtonText,\r\n                  }}\r\n                />\r\n              </GenericModal.Footer>\r\n            </>\r\n          )\r\n        }}\r\n      </EditableTxParameters>\r\n    </Modal>\r\n  )\r\n}\r\n","import React, { ReactElement, useContext } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { ExpandedTxDetails, Transaction } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { getTransactionByAttribute } from 'src/logic/safe/store/selectors/gatewayTransactions'\r\nimport { useTransactionParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\r\nimport { AppReduxState } from 'src/store'\r\nimport { ApproveTxModal } from './modals/ApproveTxModal'\r\nimport { RejectTxModal } from './modals/RejectTxModal'\r\nimport { TransactionActionStateContext } from './TxActionProvider'\r\nimport { Overwrite } from 'src/types/helpers'\r\n\r\nexport const ActionModal = (): ReactElement | null => {\r\n  const { selectedAction, selectAction } = useContext(TransactionActionStateContext)\r\n  const txParameters = useTransactionParameters()\r\n\r\n  const transaction = useSelector((state: AppReduxState) =>\r\n    getTransactionByAttribute(state)({\r\n      attributeValue: selectedAction.transactionId,\r\n      attributeName: 'id',\r\n      txLocation: selectedAction.txLocation,\r\n    }),\r\n  )\r\n\r\n  const onClose = () => selectAction({ actionSelected: 'none', transactionId: '', txLocation: 'history' })\r\n\r\n  if (!transaction?.txDetails) {\r\n    return null\r\n  }\r\n\r\n  switch (selectedAction.actionSelected) {\r\n    case 'cancel':\r\n      return <RejectTxModal isOpen onClose={onClose} gwTransaction={transaction} />\r\n\r\n    case 'confirm':\r\n      return (\r\n        <ApproveTxModal\r\n          isOpen\r\n          onClose={onClose}\r\n          transaction={transaction as Overwrite<Transaction, { txDetails: ExpandedTxDetails }>}\r\n          txParameters={txParameters}\r\n        />\r\n      )\r\n\r\n    case 'execute':\r\n      return (\r\n        <ApproveTxModal\r\n          canExecute\r\n          isOpen\r\n          onClose={onClose}\r\n          transaction={transaction as Overwrite<Transaction, { txDetails: ExpandedTxDetails }>}\r\n          txParameters={txParameters}\r\n        />\r\n      )\r\n\r\n    case 'none':\r\n      return null\r\n  }\r\n}\r\n","import { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { loadPagedQueuedTransactions } from 'src/logic/safe/store/actions/transactions/fetchTransactions/loadGatewayTransactions'\r\nimport { addQueuedTransactions } from 'src/logic/safe/store/actions/transactions/gatewayTransactions'\r\nimport { safeParamAddressFromStateSelector } from 'src/logic/safe/store/selectors'\r\nimport { QueueTransactionsInfo, useQueueTransactions } from './useQueueTransactions'\r\n\r\ntype PagedQueuedTransactions = {\r\n  count: number\r\n  isLoading: boolean\r\n  transactions?: QueueTransactionsInfo\r\n  hasMore: boolean\r\n  next: () => Promise<void>\r\n}\r\n\r\nexport const usePagedQueuedTransactions = (): PagedQueuedTransactions => {\r\n  const transactions = useQueueTransactions()\r\n  const dispatch = useDispatch()\r\n  const safeAddress = useSelector(safeParamAddressFromStateSelector)\r\n  const [hasMore, setHasMore] = useState(true)\r\n\r\n  const nextPage = async () => {\r\n    const results = await loadPagedQueuedTransactions(safeAddress)\r\n\r\n    if (!results) {\r\n      setHasMore(false)\r\n      return\r\n    }\r\n\r\n    const { values, next } = results\r\n\r\n    if (next === null) {\r\n      setHasMore(false)\r\n    }\r\n\r\n    if (values) {\r\n      dispatch(addQueuedTransactions({ safeAddress, values }))\r\n    } else {\r\n      setHasMore(false)\r\n    }\r\n  }\r\n\r\n  let count\r\n  if (transactions) {\r\n    count = transactions.next.count + transactions.queue.count\r\n  }\r\n\r\n  const isLoading = typeof transactions === 'undefined' || typeof count === 'undefined'\r\n\r\n  return { count, isLoading, transactions, hasMore, next: nextPage }\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { TransactionDetails } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { nextTransactions, queuedTransactions } from 'src/logic/safe/store/selectors/gatewayTransactions'\r\n\r\nexport type QueueTransactionsInfo = {\r\n  next: TransactionDetails\r\n  queue: TransactionDetails\r\n}\r\n\r\n/**\r\n * Get transactions (next and queue) from nextTransactions and queuedTransactions selectors\r\n */\r\nexport const useQueueTransactions = (): QueueTransactionsInfo | undefined => {\r\n  const nextTxs = useSelector(nextTransactions)\r\n  const queuedTxs = useSelector(queuedTransactions)\r\n  const [txsCount, setTxsCount] = useState<{ next: number; queued: number } | undefined>()\r\n\r\n  useEffect(() => {\r\n    const next = nextTxs\r\n      ? Object.entries(nextTxs).reduce((acc, [, transactions]) => (acc += transactions.length), 0)\r\n      : 0\r\n    const queued = queuedTxs\r\n      ? Object.entries(queuedTxs).reduce((acc, [, transactions]) => (acc += transactions.length), 0)\r\n      : 0\r\n    setTxsCount({ next, queued })\r\n  }, [nextTxs, queuedTxs])\r\n\r\n  // no data loaded to the store yet\r\n  if ((!nextTxs && !queuedTxs) || typeof txsCount === 'undefined') {\r\n    return\r\n  }\r\n\r\n  return {\r\n    next: {\r\n      count: txsCount.next,\r\n      transactions: nextTxs ? Object.entries(nextTxs) : [],\r\n    },\r\n    queue: {\r\n      count: txsCount.queued,\r\n      transactions: queuedTxs ? Object.entries(queuedTxs) : [],\r\n    },\r\n  }\r\n}\r\n","import React, { ReactElement } from 'react'\r\n\r\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { useAssetInfo } from './hooks/useAssetInfo'\r\nimport { TransactionActions } from './hooks/useTransactionActions'\r\nimport { useTransactionStatus } from './hooks/useTransactionStatus'\r\nimport { useTransactionType } from './hooks/useTransactionType'\r\nimport { TxCollapsed } from './TxCollapsed'\r\n\r\nexport type CalculatedVotes = { votes: string; submitted: number; required: number }\r\n\r\nconst calculateVotes = (executionInfo: Transaction['executionInfo']): CalculatedVotes | undefined => {\r\n  if (!executionInfo) {\r\n    return\r\n  }\r\n\r\n  const submitted = executionInfo.confirmationsSubmitted\r\n  const required = executionInfo.confirmationsRequired\r\n\r\n  return {\r\n    votes: `${submitted} out of ${required}`,\r\n    submitted,\r\n    required,\r\n  }\r\n}\r\n\r\ntype TxQueuedCollapsedProps = {\r\n  isGrouped?: boolean\r\n  transaction: Transaction\r\n  actions?: TransactionActions\r\n}\r\n\r\nexport const TxQueueCollapsed = ({ isGrouped = false, transaction, actions }: TxQueuedCollapsedProps): ReactElement => {\r\n  const nonce = transaction.executionInfo?.nonce\r\n  const type = useTransactionType(transaction)\r\n  const info = useAssetInfo(transaction.txInfo)\r\n  const votes = calculateVotes(transaction.executionInfo)\r\n  const status = useTransactionStatus(transaction)\r\n\r\n  return (\r\n    <TxCollapsed\r\n      transaction={transaction}\r\n      isGrouped={isGrouped}\r\n      nonce={nonce}\r\n      type={type}\r\n      info={info}\r\n      time={transaction.timestamp}\r\n      votes={votes}\r\n      actions={actions}\r\n      status={status}\r\n    />\r\n  )\r\n}\r\n","import { AccordionDetails } from '@gnosis.pm/safe-react-components'\r\nimport React, { ReactElement, useContext, useEffect, useState } from 'react'\r\n\r\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { useTransactionActions } from 'src/routes/safe/components/Transactions/TxList/hooks/useTransactionActions'\r\nimport { NoPaddingAccordion, StyledAccordionSummary } from './styled'\r\nimport { TxDetails } from './TxDetails'\r\nimport { TxHoverContext } from './TxHoverProvider'\r\nimport { TxQueueCollapsed } from './TxQueueCollapsed'\r\n\r\ntype TxQueueRowProps = {\r\n  isGrouped?: boolean\r\n  transaction: Transaction\r\n}\r\n\r\nexport const TxQueueRow = ({ isGrouped = false, transaction }: TxQueueRowProps): ReactElement => {\r\n  const { activeHover } = useContext(TxHoverContext)\r\n  const actions = useTransactionActions(transaction)\r\n  const [tx, setTx] = useState<Transaction>(transaction)\r\n\r\n  useEffect(() => {\r\n    if (activeHover && activeHover !== transaction.id) {\r\n      setTx((currTx) => ({ ...currTx, txStatus: 'WILL_BE_REPLACED' }))\r\n      return\r\n    }\r\n\r\n    setTx(transaction)\r\n  }, [activeHover, transaction])\r\n\r\n  return (\r\n    <NoPaddingAccordion\r\n      TransitionProps={{\r\n        mountOnEnter: false,\r\n        unmountOnExit: true,\r\n        appear: true,\r\n      }}\r\n    >\r\n      <StyledAccordionSummary>\r\n        <TxQueueCollapsed isGrouped={isGrouped} transaction={tx} actions={actions} />\r\n      </StyledAccordionSummary>\r\n      <AccordionDetails>\r\n        <TxDetails transaction={tx} actions={actions} />\r\n      </AccordionDetails>\r\n    </NoPaddingAccordion>\r\n  )\r\n}\r\n","import { Icon, Link, Text } from '@gnosis.pm/safe-react-components'\r\nimport React, { Fragment, ReactElement, useContext } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { Transaction, TransactionDetails } from 'src/logic/safe/store/models/types/gateway.d'\r\nimport { sameString } from 'src/utils/strings'\r\nimport { safeNonceSelector } from 'src/logic/safe/store/selectors'\r\n\r\nimport {\r\n  DisclaimerContainer,\r\n  GroupedTransactions,\r\n  GroupedTransactionsCard,\r\n  SubTitle,\r\n  StyledTransactions,\r\n  StyledTransactionsGroup,\r\n  AlignItemsWithMargin,\r\n} from './styled'\r\nimport { TxHoverProvider } from './TxHoverProvider'\r\nimport { TxLocationContext } from './TxLocationProvider'\r\nimport { TxQueueRow } from './TxQueueRow'\r\nimport { TxsInfiniteScrollContext } from './TxsInfiniteScroll'\r\n\r\nconst TreeView = ({ firstElement }: { firstElement: boolean }): ReactElement => {\r\n  return <p className=\"tree-lines\">{firstElement ? <span className=\"first-node\" /> : null}</p>\r\n}\r\n\r\nconst Disclaimer = ({ nonce }: { nonce: string }): ReactElement => {\r\n  return (\r\n    <DisclaimerContainer className=\"disclaimer-container\">\r\n      <Text size=\"xl\" className=\"nonce\">\r\n        {nonce}\r\n      </Text>\r\n      <AlignItemsWithMargin className=\"disclaimer\">\r\n        <Text as=\"span\" size=\"xl\">\r\n          These transactions conflict as they use the same nonce. Executing one will automatically replace the other(s).{' '}\r\n        </Text>\r\n        <Link\r\n          href=\"https://help.gnosis-safe.io/en/articles/4730252-why-are-transactions-with-the-same-nonce-conflicting-with-each-other\"\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n          title=\"Why are transactions with the same nonce conflicting with each other?\"\r\n        >\r\n          <AlignItemsWithMargin>\r\n            <Text size=\"xl\" as=\"span\" color=\"primary\">\r\n              Learn more\r\n            </Text>\r\n            <Icon size=\"sm\" type=\"externalLink\" color=\"primary\" />\r\n          </AlignItemsWithMargin>\r\n        </Link>\r\n      </AlignItemsWithMargin>\r\n    </DisclaimerContainer>\r\n  )\r\n}\r\n\r\ntype QueueTransactionProps = {\r\n  nonce: string\r\n  transactions: Transaction[]\r\n}\r\n\r\nconst QueueTransaction = ({ nonce, transactions }: QueueTransactionProps): ReactElement =>\r\n  transactions.length > 1 ? (\r\n    <GroupedTransactionsCard>\r\n      <TxHoverProvider>\r\n        <Disclaimer nonce={nonce} />\r\n        <GroupedTransactions>\r\n          {transactions.map((transaction, index) => (\r\n            <Fragment key={`${nonce}-${transaction.id}`}>\r\n              <TreeView firstElement={!index} />\r\n              <TxQueueRow isGrouped transaction={transaction} />\r\n            </Fragment>\r\n          ))}\r\n        </GroupedTransactions>\r\n      </TxHoverProvider>\r\n    </GroupedTransactionsCard>\r\n  ) : (\r\n    <TxQueueRow transaction={transactions[0]} />\r\n  )\r\n\r\ntype QueueTxListProps = {\r\n  transactions: TransactionDetails['transactions']\r\n}\r\n\r\nexport const QueueTxList = ({ transactions }: QueueTxListProps): ReactElement => {\r\n  const { txLocation } = useContext(TxLocationContext)\r\n  const nonce = useSelector(safeNonceSelector)\r\n  const title =\r\n    txLocation === 'queued.next'\r\n      ? 'NEXT TRANSACTION'\r\n      : `QUEUE - Transaction with nonce ${nonce} needs to be executed first`\r\n\r\n  const { lastItemId, setLastItemId } = useContext(TxsInfiniteScrollContext)\r\n  if (transactions.length) {\r\n    const [, lastTransactionsGroup] = transactions[transactions.length - 1]\r\n    const lastTransaction = lastTransactionsGroup[lastTransactionsGroup.length - 1]\r\n\r\n    if (txLocation === 'queued.queued' && !sameString(lastItemId, lastTransaction.id)) {\r\n      setLastItemId(lastTransaction.id)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <StyledTransactionsGroup>\r\n      <SubTitle size=\"lg\">{title}</SubTitle>\r\n      <StyledTransactions>\r\n        {transactions.map(([nonce, txs]) => (\r\n          <QueueTransaction key={nonce} nonce={nonce} transactions={txs} />\r\n        ))}\r\n      </StyledTransactions>\r\n    </StyledTransactionsGroup>\r\n  )\r\n}\r\n","import { Loader, Title } from '@gnosis.pm/safe-react-components'\r\nimport React, { ReactElement } from 'react'\r\n\r\nimport Img from 'src/components/layout/Img'\r\nimport { ActionModal } from './ActionModal'\r\nimport NoTransactionsImage from './assets/no-transactions.svg'\r\nimport { usePagedQueuedTransactions } from './hooks/usePagedQueuedTransactions'\r\nimport { QueueTxList } from './QueueTxList'\r\nimport { Centered, NoTransactions } from './styled'\r\nimport { TxActionProvider } from './TxActionProvider'\r\nimport { TxsInfiniteScroll } from './TxsInfiniteScroll'\r\nimport { TxLocationContext } from './TxLocationProvider'\r\n\r\nexport const QueueTransactions = (): ReactElement => {\r\n  const { count, isLoading, hasMore, next, transactions } = usePagedQueuedTransactions()\r\n\r\n  if (count === 0 && isLoading) {\r\n    return (\r\n      <Centered>\r\n        <Loader size=\"md\" />\r\n      </Centered>\r\n    )\r\n  }\r\n\r\n  // `loading` is, actually `!transactions`\r\n  // added the `transaction` verification to prevent `Object is possibly 'undefined'` error\r\n  if (count === 0 || !transactions) {\r\n    return (\r\n      <NoTransactions>\r\n        <Img alt=\"No Transactions yet\" src={NoTransactionsImage} />\r\n        <Title size=\"xs\">Queue transactions will appear here </Title>\r\n      </NoTransactions>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <TxActionProvider>\r\n      <TxsInfiniteScroll next={next} hasMore={hasMore} isLoading={isLoading}>\r\n        {/* Next list */}\r\n        <TxLocationContext.Provider value={{ txLocation: 'queued.next' }}>\r\n          {transactions.next.count !== 0 && <QueueTxList transactions={transactions.next.transactions} />}\r\n        </TxLocationContext.Provider>\r\n\r\n        {/* Queue list */}\r\n        <TxLocationContext.Provider value={{ txLocation: 'queued.queued' }}>\r\n          {transactions.queue.count !== 0 && <QueueTxList transactions={transactions.queue.transactions} />}\r\n        </TxLocationContext.Provider>\r\n      </TxsInfiniteScroll>\r\n      <ActionModal />\r\n    </TxActionProvider>\r\n  )\r\n}\r\n","import { Menu as MenuSrc, Tab } from '@gnosis.pm/safe-react-components'\r\nimport { Item } from '@gnosis.pm/safe-react-components/dist/navigation/Tab'\r\nimport React, { ReactElement, useState } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport { HistoryTransactions } from './HistoryTransactions'\r\nimport { QueueTransactions } from './QueueTransactions'\r\nimport { Breadcrumb, ContentWrapper, Wrapper } from './styled'\r\n\r\nconst Menu = styled(MenuSrc)`\r\n  justify-content: flex-start;\r\n`\r\n\r\nconst items: Item[] = [\r\n  { id: 'queue', label: 'Queue' },\r\n  { id: 'history', label: 'History' },\r\n]\r\n\r\nconst GatewayTransactions = (): ReactElement => {\r\n  const [tab, setTab] = useState(items[0].id)\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Menu>\r\n        <Breadcrumb iconSize=\"md\" iconType=\"transactionsInactive\" textSize=\"md\" text=\"TRANSACTIONS\" color=\"primary\" />\r\n      </Menu>\r\n      <Tab items={items} onChange={setTab} selectedTab={tab} />\r\n      <ContentWrapper>\r\n        {tab === 'queue' && <QueueTransactions />}\r\n        {tab === 'history' && <HistoryTransactions />}\r\n      </ContentWrapper>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default GatewayTransactions\r\n"],"sourceRoot":""}