{"version":3,"sources":["routes/safe/components/Balances/SendModal/screens/SendFunds/SpendingLimitRow.tsx","routes/safe/components/Balances/SendModal/screens/SendFunds/style.ts","routes/safe/components/Balances/SendModal/screens/SendFunds/index.tsx","components/forms/Field/index.tsx","components/forms/TextField/index.tsx","components/forms/GnoForm/index.tsx","routes/safe/components/Balances/utils/setTokenImgToPlaceholder.ts","components/layout/Bold/index.tsx","routes/safe/components/Balances/assets/token_placeholder.svg","assets/icons/qrcode.svg","components/Divider/index.tsx","components/ScanQRModal/style.ts","components/ScanQRModal/index.tsx","components/ScanQRModal/ScanQRWrapper/index.tsx","routes/safe/components/Balances/SendModal/SafeInfo/index.tsx","components/forms/SelectField/index.tsx","routes/safe/components/Balances/SendModal/screens/AddressBookInput/style.ts","routes/safe/components/Balances/SendModal/screens/AddressBookInput/index.tsx","../node_modules/@material-ui/core/esm/ListItemIcon/ListItemIcon.js","routes/safe/components/Balances/SendModal/screens/SendFunds/TokenSelectField/style.ts","routes/safe/components/Balances/SendModal/screens/SendFunds/TokenSelectField/index.tsx"],"names":["SpendingLimitRadioButtons","styled","RadioButtons","theme","colors","primary","SpendingLimitRow","tokenSpendingLimit","selectedToken","availableAmount","useMemo","fromTokenUnit","BigNumber","amount","minus","spent","toString","decimals","mutators","useForm","Row","margin","Col","between","style","flexDirection","size","Field","name","initialValue","input","value","onRadioChange","setTxType","options","label","symbol","styles","createStyles","heading","padding","md","lg","justifyContent","boxSizing","height","annotation","letterSpacing","color","secondaryText","marginRight","marginLeft","manage","fontSize","closeIcon","width","qrCodeBtn","cursor","formContainer","minHeight","buttonRow","gap","selectAddress","formMutators","setMax","args","state","utils","changeValue","onTokenChange","formState","values","setRecipient","useStyles","makeStyles","InputAdornmentChildSymbol","SendFunds","initialValues","onClose","onReview","recipientAddress","classes","tokens","useSelector","extendedSafeTokensSelector","addressBook","addressBookSelector","nativeCoin","getNetworkInfo","useState","defaultEntry","address","predefinedAddress","addressBookEntry","find","sameAddress","selectedEntry","setSelectedEntry","pristine","setPristine","isValidAddress","setIsValidAddress","addressErrorMsg","setAddressErrorMsg","useEffect","spendingLimits","safeSpendingLimitsSelector","currentUser","userAccountSelector","align","className","grow","data-testid","Paragraph","noMargin","weight","IconButton","disableRipple","onClick","Hairline","GnoForm","token","onSubmit","submitValues","recipientName","validation","tokenAddress","txType","isSpendingLimit","tokenDecimals","Number","getBalanceAndDecimalsFromToken","composeValidators","required","mustBeFloat","minMaxDecimalsLength","minValue","maxValue","spendingLimitAllowedBalance","balance","userSpendingLimits","filter","delegate","getSpendingLimitByTokenAddress","handleScan","closeQrModal","scannedAddress","startsWith","replace","scannedName","getNameFromAddressBook","addressErrorMessage","mustBeEthereumAddress","shouldDisableSubmitButton","setMaxAllowedAmount","maxAmount","tokenBalance","spendingLimitBalance","gt","Block","SafeInfo","Divider","withArrow","onKeyDown","e","sameString","key","role","tabIndex","hash","showAvatar","showCopyBtn","explorerUrl","getExplorerInfo","xs","AddressBookInput","fieldMutator","errorMsg","center","middle","ScanQRWrapper","TokenSelectField","isValid","ButtonLink","testId","component","TextField","inputAdornment","endAdornment","InputAdornment","position","placeholder","text","type","Modal","Footer","Buttons","cancelButtonProps","confirmButtonProps","disabled","valid","GnoField","props","overflowStyle","overflow","root","paddingTop","paddingBottom","lineHeight","onChange","restInput","meta","multiline","rows","rest","helperText","undefined","showError","touched","hasError","error","modifiedSinceLastSubmit","submitError","errorMessage","isInactiveAndPristineOrUntouched","active","isInvalidAndUntouched","disableUnderline","inputRoot","statusClasses","inputProps","autoComplete","inputRootProps","InputProps","stylesBasedOn","flex","children","decorators","subscription","render","handleSubmit","submitting","validating","form","validate","setImageToPlaceholder","currentTarget","onerror","src","TokenPlaceholder","Bold","this","React","Wrapper","div","StyledDivider","DividerSRC","maxHeight","loaderContainer","close","detailsContainer","backgroundColor","background","button","sm","ScanQRModal","isOpen","onScan","fileUploadModalOpen","setFileUploadModalOpen","setError","cameraBlocked","setCameraBlocked","scannerRef","openImageDialog","current","onFileScannedResolve","successData","console","description","handleClose","open","title","layout","legacyMode","onError","err","data","ref","facingMode","Button","minWidth","variant","qrModalOpen","setQrModalOpen","alt","QRIcon","StyledBlock","border","safeSelector","safeAddress","ethBalance","safeName","safeNameSelector","SelectInput","disableError","formControlProps","renderValue","dirtySinceLastSubmit","htmlFor","useTextFieldLabelStyle","borderRadius","useTextFieldInputStyle","chainId","getNetworkId","BaseAddressBookInput","addressBookEntries","setValidationText","validationText","updateAddressInfo","addressEntry","validateAddress","filteredEntries","filterAddressEntries","inputValue","length","onInputChange","_","reason","a","normalizedValue","trimSpaces","isFeatureEnabled","FEATURES","DOMAIN_LOOKUP","isValidEnsName","isValidCryptoDomainName","getAddressFromDomain","logError","Errors","_101","message","validatedAddress","labelStyles","inputStyles","Autocomplete","openOnFocus","filterOptions","freeSolo","id","renderInput","params","autoFocus","fullWidth","InputLabelProps","shrink","getOptionLabel","renderOption","display","flexGrow","ContractsAddressBookInput","setFilteredEntries","filterContractAddressBookEntries","filteredADBK","filterContractAddresses","onSetSelectedEntry","mustBeEthereumContractAddress","contractAddressErrorMessage","ListItemIcon","other","_objectWithoutProperties","context","ListContext","_extends","clsx","alignItems","alignItemsFlexStart","withStyles","palette","action","flexShrink","marginTop","useSelectedTokenStyles","container","tokenData","tokenImage","useSelectStyles","selectMenu","paddingRight","SelectedToken","MenuItem","Img","logoUri","ListItemText","secondary","formatAmount","SelectField","displayEmpty","map"],"mappings":"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","file":"static/js/33.1f8734e6.chunk.js","sourcesContent":["import { RadioButtons, Text } from '@gnosis.pm/safe-react-components'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport React, { ReactElement, useMemo } from 'react'\r\nimport { useForm } from 'react-final-form'\r\nimport styled from 'styled-components'\r\n\r\nimport Field from 'src/components/forms/Field'\r\nimport Col from 'src/components/layout/Col'\r\nimport Row from 'src/components/layout/Row'\r\nimport { SpendingLimit } from 'src/logic/safe/store/models/safe'\r\nimport { Token } from 'src/logic/tokens/store/model/token'\r\nimport { fromTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\r\n\r\n// TODO: propose refactor in safe-react-components based on this requirements\r\nconst SpendingLimitRadioButtons = styled(RadioButtons)`\r\n  & .MuiRadio-colorPrimary.Mui-checked {\r\n    color: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\ninterface SpendingLimitRowProps {\r\n  tokenSpendingLimit: SpendingLimit\r\n  selectedToken: Token\r\n}\r\n\r\nexport const SpendingLimitRow = ({ tokenSpendingLimit, selectedToken }: SpendingLimitRowProps): ReactElement => {\r\n  const availableAmount = useMemo(() => {\r\n    return fromTokenUnit(\r\n      new BigNumber(tokenSpendingLimit.amount).minus(tokenSpendingLimit.spent).toString(),\r\n      selectedToken.decimals,\r\n    )\r\n  }, [selectedToken.decimals, tokenSpendingLimit.amount, tokenSpendingLimit.spent])\r\n  const { mutators } = useForm()\r\n\r\n  return (\r\n    <Row margin=\"sm\">\r\n      <Col between=\"lg\" style={{ flexDirection: 'column' }}>\r\n        <Text size=\"lg\">Send as</Text>\r\n        <Field name=\"txType\" initialValue=\"multiSig\">\r\n          {({ input: { name, value } }) => (\r\n            <SpendingLimitRadioButtons\r\n              name={name}\r\n              value={value || 'multiSig'}\r\n              onRadioChange={mutators.setTxType}\r\n              options={[\r\n                { label: 'Multisig transaction', value: 'multiSig' },\r\n                {\r\n                  label: `Spending limit transaction (${availableAmount} ${selectedToken.symbol})`,\r\n                  value: 'spendingLimit',\r\n                },\r\n              ]}\r\n            />\r\n          )}\r\n        </Field>\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\n","import { lg, md, secondaryText } from 'src/theme/variables'\r\nimport { createStyles } from '@material-ui/core'\r\n\r\nexport const styles = createStyles({\r\n  heading: {\r\n    padding: `${md} ${lg}`,\r\n    justifyContent: 'flex-start',\r\n    boxSizing: 'border-box',\r\n    height: '74px',\r\n  },\r\n  annotation: {\r\n    letterSpacing: '-1px',\r\n    color: secondaryText,\r\n    marginRight: 'auto',\r\n    marginLeft: '20px',\r\n  },\r\n  manage: {\r\n    fontSize: lg,\r\n  },\r\n  closeIcon: {\r\n    height: '35px',\r\n    width: '35px',\r\n  },\r\n  qrCodeBtn: {\r\n    cursor: 'pointer',\r\n  },\r\n  formContainer: {\r\n    padding: `${md} ${lg}`,\r\n    minHeight: '216px',\r\n  },\r\n  buttonRow: {\r\n    height: '84px',\r\n    justifyContent: 'center',\r\n    gap: '16px',\r\n  },\r\n  selectAddress: {\r\n    cursor: 'pointer',\r\n  },\r\n})\r\n","import IconButton from '@material-ui/core/IconButton'\r\nimport InputAdornment from '@material-ui/core/InputAdornment'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Close from '@material-ui/icons/Close'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport React, { ReactElement, useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { getExplorerInfo } from 'src/config'\r\nimport Field from 'src/components/forms/Field'\r\nimport GnoForm from 'src/components/forms/GnoForm'\r\nimport TextField from 'src/components/forms/TextField'\r\nimport {\r\n  composeValidators,\r\n  maxValue,\r\n  minValue,\r\n  minMaxDecimalsLength,\r\n  mustBeFloat,\r\n  mustBeEthereumAddress,\r\n  required,\r\n} from 'src/components/forms/validator'\r\nimport Block from 'src/components/layout/Block'\r\nimport ButtonLink from 'src/components/layout/ButtonLink'\r\nimport Col from 'src/components/layout/Col'\r\nimport Hairline from 'src/components/layout/Hairline'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Row from 'src/components/layout/Row'\r\nimport { ScanQRWrapper } from 'src/components/ScanQRModal/ScanQRWrapper'\r\nimport { addressBookSelector } from 'src/logic/addressBook/store/selectors'\r\nimport { getNameFromAddressBook } from 'src/logic/addressBook/utils'\r\nimport { sameAddress } from 'src/logic/wallets/ethAddresses'\r\nimport { SpendingLimit } from 'src/logic/safe/store/models/safe'\r\nimport { userAccountSelector } from 'src/logic/wallets/store/selectors'\r\n\r\nimport SafeInfo from 'src/routes/safe/components/Balances/SendModal/SafeInfo'\r\nimport { AddressBookInput } from 'src/routes/safe/components/Balances/SendModal/screens/AddressBookInput'\r\nimport { SpendingLimitRow } from 'src/routes/safe/components/Balances/SendModal/screens/SendFunds/SpendingLimitRow'\r\nimport TokenSelectField from 'src/routes/safe/components/Balances/SendModal/screens/SendFunds/TokenSelectField'\r\nimport { fromTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\r\nimport { extendedSafeTokensSelector } from 'src/routes/safe/container/selector'\r\nimport { safeSpendingLimitsSelector } from 'src/logic/safe/store/selectors'\r\nimport { sameString } from 'src/utils/strings'\r\n\r\nimport { styles } from './style'\r\nimport { EthHashInfo } from '@gnosis.pm/safe-react-components'\r\nimport { spendingLimitAllowedBalance, getSpendingLimitByTokenAddress } from 'src/logic/safe/utils/spendingLimits'\r\nimport { getBalanceAndDecimalsFromToken } from 'src/logic/tokens/utils/tokenHelpers'\r\nimport { getNetworkInfo } from 'src/config'\r\nimport Divider from 'src/components/Divider'\r\nimport { Modal } from 'src/components/Modal'\r\n\r\nconst formMutators = {\r\n  setMax: (args, state, utils) => {\r\n    utils.changeValue(state, 'amount', () => args[0])\r\n  },\r\n  onTokenChange: (args, state, utils) => {\r\n    utils.changeValue(state, 'amount', () => state.formState.values.amount)\r\n  },\r\n  setRecipient: (args, state, utils) => {\r\n    utils.changeValue(state, 'recipientAddress', () => args[0])\r\n  },\r\n  setTxType: (args, state, utils) => {\r\n    utils.changeValue(state, 'txType', () => args[0])\r\n  },\r\n}\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\nexport type SendFundsTx = {\r\n  amount?: string\r\n  recipientAddress?: string\r\n  name?: string\r\n  token?: string\r\n  txType?: string\r\n  tokenSpendingLimit?: SpendingLimit\r\n}\r\n\r\ntype SendFundsProps = {\r\n  initialValues: SendFundsTx\r\n  onClose: () => void\r\n  onReview: (txInfo: unknown) => void\r\n  recipientAddress?: string\r\n  selectedToken?: string\r\n  amount?: string\r\n}\r\n\r\nconst InputAdornmentChildSymbol = ({ symbol }: { symbol?: string }): ReactElement => {\r\n  return <>{symbol}</>\r\n}\r\n\r\nconst SendFunds = ({\r\n  initialValues,\r\n  onClose,\r\n  onReview,\r\n  recipientAddress,\r\n  selectedToken = '',\r\n  amount,\r\n}: SendFundsProps): ReactElement => {\r\n  const classes = useStyles()\r\n  const tokens = useSelector(extendedSafeTokensSelector)\r\n  const addressBook = useSelector(addressBookSelector)\r\n  const { nativeCoin } = getNetworkInfo()\r\n  const [selectedEntry, setSelectedEntry] = useState<{ address: string; name: string } | null>(() => {\r\n    const defaultEntry = { address: recipientAddress || '', name: '' }\r\n\r\n    // if there's nothing to lookup for, we return the default entry\r\n    if (!initialValues?.recipientAddress && !recipientAddress) {\r\n      return defaultEntry\r\n    }\r\n\r\n    // if there's something to lookup for, `initialValues` has precedence over `recipientAddress`\r\n    const predefinedAddress = initialValues?.recipientAddress ?? recipientAddress\r\n    const addressBookEntry = addressBook.find(({ address }) => {\r\n      return sameAddress(predefinedAddress, address)\r\n    })\r\n\r\n    // if found in the Address Book, then we return the entry\r\n    if (addressBookEntry) {\r\n      return addressBookEntry\r\n    }\r\n\r\n    // otherwise we return the default entry\r\n    return defaultEntry\r\n  })\r\n  const [pristine, setPristine] = useState(true)\r\n  const [isValidAddress, setIsValidAddress] = useState(false)\r\n  const [addressErrorMsg, setAddressErrorMsg] = useState('')\r\n\r\n  useEffect(() => {\r\n    if (selectedEntry === null && pristine) {\r\n      setPristine(false)\r\n    }\r\n  }, [selectedEntry, pristine])\r\n\r\n  let tokenSpendingLimit\r\n  const handleSubmit = (values) => {\r\n    const submitValues = { ...values }\r\n    // If the input wasn't modified, there was no mutation of the recipientAddress\r\n    if (!values.recipientAddress) {\r\n      submitValues.recipientAddress = selectedEntry?.address\r\n    }\r\n    submitValues.recipientName = selectedEntry?.name\r\n    onReview({ ...submitValues, tokenSpendingLimit })\r\n  }\r\n\r\n  const spendingLimits = useSelector(safeSpendingLimitsSelector)\r\n  const currentUser = useSelector(userAccountSelector)\r\n\r\n  const sendFundsValidation = (values) => {\r\n    const { amount, token: tokenAddress, txType } = values ?? {}\r\n    if (!amount || !tokenAddress) {\r\n      return\r\n    }\r\n\r\n    const isSpendingLimit = tokenSpendingLimit && txType === 'spendingLimit'\r\n    const tokenDecimals =\r\n      Number(getBalanceAndDecimalsFromToken({ tokenAddress, tokens })?.decimals) || nativeCoin.decimals\r\n    const amountValidation = composeValidators(\r\n      required,\r\n      mustBeFloat,\r\n      minMaxDecimalsLength(1, tokenDecimals),\r\n      minValue(0, false),\r\n      maxValue(\r\n        isSpendingLimit\r\n          ? spendingLimitAllowedBalance({ tokenAddress, tokenSpendingLimit, tokens })\r\n          : getBalanceAndDecimalsFromToken({ tokenAddress, tokens })?.balance ?? 0,\r\n      ),\r\n    )(amount)\r\n\r\n    return {\r\n      amount: amountValidation,\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Row align=\"center\" className={classes.heading} grow data-testid=\"modal-title-send-funds\">\r\n        <Paragraph className={classes.manage} noMargin weight=\"bolder\">\r\n          Send funds\r\n        </Paragraph>\r\n        <Paragraph className={classes.annotation}>1 of 2</Paragraph>\r\n        <IconButton disableRipple onClick={onClose}>\r\n          <Close className={classes.closeIcon} />\r\n        </IconButton>\r\n      </Row>\r\n      <Hairline />\r\n      <GnoForm\r\n        formMutators={formMutators}\r\n        initialValues={{\r\n          amount: initialValues?.amount || amount,\r\n          recipientAddress: initialValues.recipientAddress || recipientAddress,\r\n          token: initialValues?.token || selectedToken,\r\n        }}\r\n        onSubmit={handleSubmit}\r\n        validation={sendFundsValidation}\r\n      >\r\n        {(...args) => {\r\n          const formState = args[2]\r\n          const mutators = args[3]\r\n          const { token: tokenAddress, txType } = formState.values\r\n          const selectedToken = tokens?.find((token) => token.address === tokenAddress)\r\n          const userSpendingLimits = spendingLimits?.filter(({ delegate }) => sameAddress(delegate, currentUser))\r\n\r\n          tokenSpendingLimit = getSpendingLimitByTokenAddress({\r\n            spendingLimits: userSpendingLimits,\r\n            tokenAddress: selectedToken?.address,\r\n          })\r\n\r\n          const handleScan = (value, closeQrModal) => {\r\n            let scannedAddress = value\r\n\r\n            if (scannedAddress.startsWith('ethereum:')) {\r\n              scannedAddress = scannedAddress.replace('ethereum:', '')\r\n            }\r\n            const scannedName = addressBook ? getNameFromAddressBook(addressBook, scannedAddress) : ''\r\n            const addressErrorMessage = mustBeEthereumAddress(scannedAddress)\r\n            if (!addressErrorMessage) {\r\n              mutators.setRecipient(scannedAddress)\r\n              setSelectedEntry({\r\n                name: scannedName || '',\r\n                address: scannedAddress,\r\n              })\r\n            } else setAddressErrorMsg(addressErrorMessage)\r\n\r\n            closeQrModal()\r\n          }\r\n\r\n          let shouldDisableSubmitButton = !isValidAddress\r\n          if (selectedEntry) {\r\n            shouldDisableSubmitButton = !selectedEntry.address\r\n          }\r\n\r\n          const setMaxAllowedAmount = () => {\r\n            const isSpendingLimit = tokenSpendingLimit && txType === 'spendingLimit'\r\n            let maxAmount = selectedToken?.balance.tokenBalance ?? 0\r\n\r\n            if (isSpendingLimit) {\r\n              const spendingLimitBalance = fromTokenUnit(\r\n                new BigNumber(tokenSpendingLimit.amount).minus(tokenSpendingLimit.spent).toString(),\r\n                selectedToken?.decimals ?? 0,\r\n              )\r\n\r\n              maxAmount = new BigNumber(maxAmount).gt(spendingLimitBalance) ? spendingLimitBalance : maxAmount\r\n            }\r\n\r\n            mutators.setMax(maxAmount)\r\n          }\r\n\r\n          return (\r\n            <>\r\n              <Block className={classes.formContainer}>\r\n                <SafeInfo />\r\n                <Divider withArrow />\r\n                {selectedEntry && selectedEntry.address ? (\r\n                  <div\r\n                    onKeyDown={(e) => {\r\n                      if (sameString(e.key, 'Tab')) {\r\n                        return\r\n                      }\r\n                      setSelectedEntry({ address: '', name: '' })\r\n                    }}\r\n                    onClick={() => {\r\n                      setSelectedEntry({ address: '', name: '' })\r\n                    }}\r\n                    role=\"listbox\"\r\n                    tabIndex={0}\r\n                  >\r\n                    <Row margin=\"xs\">\r\n                      <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                        Recipient\r\n                      </Paragraph>\r\n                    </Row>\r\n                    <Row align=\"center\" margin=\"md\">\r\n                      <EthHashInfo\r\n                        hash={selectedEntry.address}\r\n                        name={selectedEntry.name}\r\n                        showAvatar\r\n                        showCopyBtn\r\n                        explorerUrl={getExplorerInfo(selectedEntry.address)}\r\n                      />\r\n                    </Row>\r\n                  </div>\r\n                ) : (\r\n                  <Row margin=\"md\">\r\n                    <Col xs={11}>\r\n                      <AddressBookInput\r\n                        fieldMutator={mutators.setRecipient}\r\n                        pristine={pristine}\r\n                        errorMsg={addressErrorMsg}\r\n                        setIsValidAddress={setIsValidAddress}\r\n                        setSelectedEntry={setSelectedEntry}\r\n                      />\r\n                    </Col>\r\n                    <Col center=\"xs\" className={classes} middle=\"xs\" xs={1}>\r\n                      <ScanQRWrapper handleScan={handleScan} />\r\n                    </Col>\r\n                  </Row>\r\n                )}\r\n                <Row margin=\"sm\">\r\n                  <Col>\r\n                    <TokenSelectField\r\n                      initialValue={selectedToken?.address}\r\n                      isValid={!!selectedToken?.address}\r\n                      tokens={tokens}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                {tokenSpendingLimit && selectedToken && (\r\n                  <SpendingLimitRow selectedToken={selectedToken} tokenSpendingLimit={tokenSpendingLimit} />\r\n                )}\r\n                <Row margin=\"xs\">\r\n                  <Col between=\"lg\">\r\n                    <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                      Amount\r\n                    </Paragraph>\r\n                    <ButtonLink onClick={setMaxAllowedAmount} weight=\"bold\" testId=\"send-max-btn\">\r\n                      Send max\r\n                    </ButtonLink>\r\n                  </Col>\r\n                </Row>\r\n                <Row margin=\"md\">\r\n                  <Col>\r\n                    <Field\r\n                      component={TextField}\r\n                      inputAdornment={{\r\n                        endAdornment: (\r\n                          <InputAdornment position=\"end\">\r\n                            <InputAdornmentChildSymbol symbol={selectedToken?.symbol} />\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                      name=\"amount\"\r\n                      placeholder=\"Amount*\"\r\n                      text=\"Amount*\"\r\n                      type=\"text\"\r\n                      testId=\"amount-input\"\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n              </Block>\r\n              <Modal.Footer>\r\n                <Modal.Footer.Buttons\r\n                  cancelButtonProps={{ onClick: onClose }}\r\n                  confirmButtonProps={{\r\n                    disabled: !formState.valid || shouldDisableSubmitButton,\r\n                    testId: 'review-tx-btn',\r\n                    text: 'Review',\r\n                  }}\r\n                />\r\n              </Modal.Footer>\r\n            </>\r\n          )\r\n        }}\r\n      </GnoForm>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SendFunds\r\n","import React from 'react'\r\nimport { Field } from 'react-final-form'\r\n\r\n// $FlowFixMe\r\nconst GnoField = ({ ...props }: any) => <Field {...props} />\r\n\r\nexport default GnoField\r\n","import MuiTextField from '@material-ui/core/TextField'\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles'\r\nimport React from 'react'\r\n\r\nimport { lg } from 'src/theme/variables'\r\n\r\n// Neded for solving a fix in Windows browsers\r\nconst overflowStyle = {\r\n  overflow: 'hidden',\r\n  width: '100%',\r\n}\r\n\r\nconst styles = () =>\r\n  createStyles({\r\n    root: {\r\n      paddingTop: lg,\r\n      paddingBottom: '12px',\r\n      lineHeight: 0,\r\n    },\r\n  })\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\ntype Props = {\r\n  input: {\r\n    name: string\r\n    onChange?: () => void\r\n    value: string\r\n    placeholder: string\r\n    type: string\r\n  }\r\n  meta: {\r\n    touched?: boolean\r\n    pristine?: boolean\r\n    valid?: boolean\r\n    error?: string\r\n    modifiedSinceLastSubmit?: boolean\r\n    submitError?: boolean\r\n    active?: boolean\r\n  }\r\n  inputAdornment?: { endAdornment: React.ReactElement } | undefined\r\n  multiline: boolean\r\n  rows?: string\r\n  testId: string\r\n  text: string\r\n  disabled?: boolean\r\n  rowsMax?: number\r\n  className?: string\r\n}\r\n\r\nconst TextField = (props: Props): React.ReactElement => {\r\n  const {\r\n    input: { name, onChange, value, ...restInput },\r\n    inputAdornment,\r\n    meta,\r\n    multiline,\r\n    rows,\r\n    testId,\r\n    text,\r\n    ...rest\r\n  } = props\r\n  const classes = useStyles()\r\n  const helperText = value ? text : undefined\r\n  const showError = (meta.touched || !meta.pristine) && !meta.valid\r\n  const hasError = !!meta.error || (!meta.modifiedSinceLastSubmit && !!meta.submitError)\r\n  const errorMessage = meta.error || meta.submitError\r\n  const isInactiveAndPristineOrUntouched = !meta.active && (meta.pristine || !meta.touched)\r\n  const isInvalidAndUntouched = typeof meta.error === 'undefined' ? true : !meta.touched\r\n\r\n  const disableUnderline = isInactiveAndPristineOrUntouched && isInvalidAndUntouched\r\n\r\n  const inputRoot = helperText ? classes.root : ''\r\n  const statusClasses = meta.valid ? 'isValid' : hasError && showError ? 'isInvalid' : ''\r\n  const inputProps = {\r\n    ...restInput,\r\n    autoComplete: 'off',\r\n    'data-testid': testId,\r\n  }\r\n  const inputRootProps = {\r\n    ...inputAdornment,\r\n    className: `${inputRoot} ${statusClasses}`,\r\n    disableUnderline: disableUnderline,\r\n  }\r\n\r\n  return (\r\n    <MuiTextField\r\n      error={hasError && showError}\r\n      helperText={hasError && showError ? errorMessage : helperText || ' '}\r\n      inputProps={inputProps} // blank in order to force to have helper text\r\n      InputProps={inputRootProps}\r\n      multiline={multiline}\r\n      name={name}\r\n      onChange={onChange}\r\n      rows={rows}\r\n      style={overflowStyle}\r\n      value={value}\r\n      {...rest}\r\n    />\r\n  )\r\n}\r\n\r\nexport default TextField\r\n","import * as React from 'react'\r\nimport { Form } from 'react-final-form'\r\n\r\nconst stylesBasedOn = (padding) => ({\r\n  padding: `0 ${padding}%`,\r\n  flexDirection: 'column',\r\n  flex: '1 0 auto',\r\n})\r\n\r\nconst GnoForm = ({\r\n  children,\r\n  decorators,\r\n  formMutators,\r\n  initialValues,\r\n  onSubmit,\r\n  padding = 0,\r\n  subscription,\r\n  testId = '',\r\n  validation,\r\n}: any) => (\r\n  <Form\r\n    decorators={decorators}\r\n    initialValues={initialValues}\r\n    mutators={formMutators}\r\n    onSubmit={onSubmit}\r\n    render={({ handleSubmit, ...rest }) => (\r\n      <form data-testid={testId} onSubmit={handleSubmit} style={stylesBasedOn(padding) as any}>\r\n        {children(rest.submitting, rest.validating, rest, rest.form.mutators)}\r\n      </form>\r\n    )}\r\n    subscription={subscription}\r\n    validate={validation}\r\n  />\r\n)\r\n\r\nexport default GnoForm\r\n","import { SyntheticEvent } from 'react'\r\n\r\nimport TokenPlaceholder from 'src/routes/safe/components/Balances/assets/token_placeholder.svg'\r\n\r\nexport const setImageToPlaceholder = (error: SyntheticEvent<HTMLImageElement, Event>): void => {\r\n  error.currentTarget.onerror = null\r\n  error.currentTarget.src = TokenPlaceholder\r\n}\r\n","import * as React from 'react'\r\n\r\nclass Bold extends React.PureComponent<any> {\r\n  render() {\r\n    const { children, ...props } = this.props\r\n\r\n    return <b {...props}>{children}</b>\r\n  }\r\n}\r\n\r\nexport default Bold\r\n","export default __webpack_public_path__ + \"static/media/token_placeholder.c1abe466.svg\";","export default __webpack_public_path__ + \"static/media/qrcode.f0b048aa.svg\";","import React, { ReactElement } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Icon, Divider as DividerSRC } from '@gnosis.pm/safe-react-components'\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 8px 0;\r\n\r\n  svg {\r\n    margin: 0 12px 0 4px;\r\n  }\r\n`\r\nconst StyledDivider = styled(DividerSRC)`\r\n  width: 100%;\r\n`\r\n\r\ntype Props = {\r\n  withArrow?: boolean\r\n}\r\n\r\nconst Divider = ({ withArrow }: Props): ReactElement => (\r\n  <Wrapper>\r\n    {withArrow && <Icon type=\"arrowDown\" size=\"md\" />}\r\n    <StyledDivider />\r\n  </Wrapper>\r\n)\r\n\r\nexport default Divider\r\n","import { background, lg, secondaryText, sm } from 'src/theme/variables'\r\nimport { createStyles } from '@material-ui/core'\r\n\r\nexport const styles = createStyles({\r\n  heading: {\r\n    padding: lg,\r\n    justifyContent: 'space-between',\r\n    maxHeight: '75px',\r\n    boxSizing: 'border-box',\r\n  },\r\n  loaderContainer: {\r\n    width: '100%',\r\n    height: '100%',\r\n  },\r\n  close: {\r\n    height: '25px',\r\n    width: '25px',\r\n    color: secondaryText,\r\n  },\r\n  detailsContainer: {\r\n    backgroundColor: background,\r\n    maxHeight: '450px',\r\n  },\r\n  buttonRow: {\r\n    height: '84px',\r\n    justifyContent: 'center',\r\n  },\r\n  button: {\r\n    '&:last-child': {\r\n      marginLeft: sm,\r\n    },\r\n  },\r\n})\r\n","import IconButton from '@material-ui/core/IconButton'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Close from '@material-ui/icons/Close'\r\nimport * as React from 'react'\r\nimport QrReader from 'react-qr-reader'\r\n\r\nimport { styles } from './style'\r\n\r\nimport Modal from 'src/components/Modal'\r\nimport Block from 'src/components/layout/Block'\r\nimport Button from 'src/components/layout/Button'\r\nimport Col from 'src/components/layout/Col'\r\nimport Hairline from 'src/components/layout/Hairline'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Row from 'src/components/layout/Row'\r\nimport { useEffect, useState } from 'react'\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\ntype Props = {\r\n  isOpen: boolean\r\n  onClose: () => void\r\n  onScan: (value: string) => void\r\n}\r\n\r\nexport const ScanQRModal = ({ isOpen, onClose, onScan }: Props): React.ReactElement => {\r\n  const classes = useStyles()\r\n  const [fileUploadModalOpen, setFileUploadModalOpen] = useState<boolean>(false)\r\n  const [error, setError] = useState<string | null>(null)\r\n  const [cameraBlocked, setCameraBlocked] = useState<boolean>(false)\r\n  const scannerRef: any = React.createRef()\r\n  const openImageDialog = React.useCallback(() => {\r\n    scannerRef.current.openImageDialog()\r\n  }, [scannerRef])\r\n\r\n  useEffect(() => {\r\n    if (!fileUploadModalOpen && cameraBlocked && !error) {\r\n      setFileUploadModalOpen(true)\r\n      openImageDialog()\r\n    }\r\n  }, [cameraBlocked, openImageDialog, fileUploadModalOpen, setFileUploadModalOpen, error])\r\n\r\n  const onFileScannedResolve = (error: Error | null, successData: string | null) => {\r\n    if (error) {\r\n      console.error('QR code error', error)\r\n\r\n      if (error.name === 'NotAllowedError' || error.name === 'PermissionDismissedError') {\r\n        setCameraBlocked(true)\r\n        setFileUploadModalOpen(false)\r\n      } else {\r\n        setError('The QR could not be read')\r\n      }\r\n      return\r\n    }\r\n\r\n    if (successData) {\r\n      onScan(successData)\r\n    } else if (cameraBlocked) {\r\n      setError('The QR could not be read')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal description=\"Receive Tokens Form\" handleClose={onClose} open={isOpen} title=\"Receive Tokens\">\r\n      <Row align=\"center\" className={classes.heading} grow>\r\n        <Paragraph noMargin size=\"xl\">\r\n          Scan QR\r\n        </Paragraph>\r\n        <IconButton disableRipple onClick={onClose}>\r\n          <Close className={classes.close} />\r\n        </IconButton>\r\n      </Row>\r\n      <Hairline />\r\n      <Col className={classes.detailsContainer} layout=\"column\" middle=\"xs\">\r\n        {error && (\r\n          <Block padding=\"md\" margin=\"md\">\r\n            {error}\r\n          </Block>\r\n        )}\r\n        <QrReader\r\n          legacyMode={cameraBlocked}\r\n          onError={(err: Error) => onFileScannedResolve(err, null)}\r\n          onScan={(data: string) => onFileScannedResolve(null, data)}\r\n          ref={scannerRef}\r\n          style={{ width: '400px', height: '400px' }}\r\n          facingMode=\"user\"\r\n        />\r\n      </Col>\r\n      <Hairline />\r\n      <Row align=\"center\" className={classes.buttonRow}>\r\n        <Button className={classes.button} color=\"secondary\" minWidth={154} onClick={onClose}>\r\n          Close\r\n        </Button>\r\n        <Button\r\n          className={classes.button}\r\n          color=\"primary\"\r\n          minWidth={154}\r\n          onClick={() => {\r\n            setCameraBlocked(true)\r\n            setError(null)\r\n            setFileUploadModalOpen(false)\r\n          }}\r\n          variant=\"contained\"\r\n        >\r\n          Upload an image\r\n        </Button>\r\n      </Row>\r\n    </Modal>\r\n  )\r\n}\r\n","import { makeStyles } from '@material-ui/core/styles'\r\nimport React, { ReactElement, useState } from 'react'\r\n\r\nimport QRIcon from 'src/assets/icons/qrcode.svg'\r\nimport { ScanQRModal } from 'src/components/ScanQRModal'\r\nimport Img from 'src/components/layout/Img'\r\n\r\nconst useStyles = makeStyles({\r\n  qrCodeBtn: {\r\n    cursor: 'pointer',\r\n  },\r\n})\r\n\r\ntype Props = {\r\n  handleScan: (dataResult: string, closeQrModal: () => void) => void\r\n}\r\n\r\nexport const ScanQRWrapper = ({ handleScan }: Props): ReactElement => {\r\n  const classes = useStyles()\r\n  const [qrModalOpen, setQrModalOpen] = useState(false)\r\n\r\n  const openQrModal = () => {\r\n    setQrModalOpen(true)\r\n  }\r\n\r\n  const closeQrModal = () => {\r\n    setQrModalOpen(false)\r\n  }\r\n\r\n  const onScanFinished = (value: string) => {\r\n    handleScan(value, closeQrModal)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Img\r\n        alt=\"Scan QR\"\r\n        className={classes.qrCodeBtn}\r\n        height={20}\r\n        onClick={() => openQrModal()}\r\n        role=\"button\"\r\n        src={QRIcon}\r\n        testId=\"qr-icon\"\r\n      />\r\n      {qrModalOpen && <ScanQRModal isOpen={qrModalOpen} onClose={closeQrModal} onScan={onScanFinished} />}\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { EthHashInfo } from '@gnosis.pm/safe-react-components'\r\nimport styled from 'styled-components'\r\n\r\nimport { getExplorerInfo, getNetworkInfo } from 'src/config'\r\nimport { safeNameSelector, safeSelector } from 'src/logic/safe/store/selectors'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Bold from 'src/components/layout/Bold'\r\nimport { border, xs } from 'src/theme/variables'\r\nimport Block from 'src/components/layout/Block'\r\n\r\nconst { nativeCoin } = getNetworkInfo()\r\n\r\nconst StyledBlock = styled(Block)`\r\n  font-size: 12px;\r\n  line-height: 1.08;\r\n  letter-spacing: -0.5px;\r\n  background-color: ${border};\r\n  width: fit-content;\r\n  padding: 5px 10px;\r\n  margin-top: ${xs};\r\n  margin-left: 40px;\r\n  border-radius: 3px;\r\n`\r\n\r\nconst SafeInfo = (): React.ReactElement => {\r\n  const { address: safeAddress = '', ethBalance } = useSelector(safeSelector) || {}\r\n  const safeName = useSelector((state) => safeNameSelector(state, safeAddress))\r\n\r\n  return (\r\n    <>\r\n      <EthHashInfo\r\n        hash={safeAddress}\r\n        name={safeName}\r\n        explorerUrl={getExplorerInfo(safeAddress)}\r\n        showAvatar\r\n        showCopyBtn\r\n      />\r\n      {ethBalance && (\r\n        <StyledBlock>\r\n          <Paragraph noMargin>\r\n            Balance: <Bold data-testid=\"current-eth-balance\">{`${ethBalance} ${nativeCoin.symbol}`}</Bold>\r\n          </Paragraph>\r\n        </StyledBlock>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SafeInfo\r\n","import FormControl from '@material-ui/core/FormControl'\r\nimport FormHelperText from '@material-ui/core/FormHelperText'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport Select from '@material-ui/core/Select'\r\nimport React from 'react'\r\n\r\nconst style = {\r\n  minWidth: '100%',\r\n}\r\n\r\nconst SelectInput = ({\r\n  classes,\r\n  disableError,\r\n  formControlProps,\r\n  input: { name, onChange, value, ...restInput },\r\n  label,\r\n  meta,\r\n  renderValue,\r\n  ...rest\r\n}) => {\r\n  const showError = ((meta.submitError && !meta.dirtySinceLastSubmit) || meta.error) && meta.touched && !disableError\r\n  const inputProps = {\r\n    ...restInput,\r\n    name,\r\n  }\r\n\r\n  return (\r\n    <FormControl {...formControlProps} error={showError} style={style}>\r\n      <InputLabel htmlFor={name}>{label}</InputLabel>\r\n      <Select\r\n        classes={classes}\r\n        inputProps={inputProps}\r\n        onChange={onChange}\r\n        renderValue={renderValue}\r\n        value={value}\r\n        {...rest}\r\n      />\r\n      {showError && <FormHelperText>{meta.error || meta.submitError}</FormHelperText>}\r\n    </FormControl>\r\n  )\r\n}\r\n\r\nexport default SelectInput\r\n","import { createStyles, makeStyles } from '@material-ui/core'\r\n\r\nexport const useTextFieldLabelStyle = makeStyles(\r\n  createStyles({\r\n    root: {\r\n      overflow: 'hidden',\r\n      borderRadius: 4,\r\n      fontSize: '15px',\r\n      width: '500px',\r\n    },\r\n  }),\r\n)\r\n\r\nexport const useTextFieldInputStyle = makeStyles(\r\n  createStyles({\r\n    root: {\r\n      fontSize: '14px',\r\n      width: '420px',\r\n    },\r\n  }),\r\n)\r\n","import { EthHashInfo } from '@gnosis.pm/safe-react-components'\r\nimport MuiTextField from '@material-ui/core/TextField'\r\nimport Autocomplete, { AutocompleteProps } from '@material-ui/lab/Autocomplete'\r\nimport React, { Dispatch, ReactElement, SetStateAction, useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { mustBeEthereumAddress, mustBeEthereumContractAddress } from 'src/components/forms/validator'\r\nimport { getNetworkId, isFeatureEnabled } from 'src/config'\r\nimport { FEATURES } from 'src/config/networks/network.d'\r\nimport { AddressBookEntry } from 'src/logic/addressBook/model/addressBook'\r\nimport { addressBookSelector } from 'src/logic/addressBook/store/selectors'\r\nimport { filterContractAddressBookEntries, filterAddressEntries } from 'src/logic/addressBook/utils'\r\nimport { isValidEnsName, isValidCryptoDomainName } from 'src/logic/wallets/ethAddresses'\r\nimport { getAddressFromDomain } from 'src/logic/wallets/getWeb3'\r\nimport {\r\n  useTextFieldInputStyle,\r\n  useTextFieldLabelStyle,\r\n} from 'src/routes/safe/components/Balances/SendModal/screens/AddressBookInput/style'\r\nimport { trimSpaces } from 'src/utils/strings'\r\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\r\n\r\nconst chainId = getNetworkId()\r\n\r\nexport interface AddressBookProps {\r\n  fieldMutator: (address: string) => void\r\n  label?: string\r\n  pristine?: boolean\r\n  recipientAddress?: string\r\n  errorMsg?: string\r\n  setIsValidAddress: (valid: boolean) => void\r\n  setSelectedEntry: Dispatch<SetStateAction<{ address: string; name: string }> | null>\r\n}\r\n\r\nexport interface BaseAddressBookInputProps extends AddressBookProps {\r\n  addressBookEntries: AddressBookEntry[]\r\n  setSelectedEntry: (args: { address: string; name: string } | null) => void\r\n  setValidationText: Dispatch<SetStateAction<string | undefined>>\r\n  validationText: string | undefined\r\n}\r\n\r\nconst BaseAddressBookInput = ({\r\n  addressBookEntries,\r\n  fieldMutator,\r\n  label = 'Recipient',\r\n  setIsValidAddress,\r\n  setSelectedEntry,\r\n  setValidationText,\r\n  validationText,\r\n}: BaseAddressBookInputProps): ReactElement => {\r\n  const updateAddressInfo = (addressEntry: AddressBookEntry): void => {\r\n    setSelectedEntry(addressEntry)\r\n    fieldMutator(addressEntry.address)\r\n  }\r\n\r\n  const validateAddress = (address: string): AddressBookEntry | string | undefined => {\r\n    const addressErrorMessage = mustBeEthereumAddress(address)\r\n    setIsValidAddress(!addressErrorMessage)\r\n\r\n    if (addressErrorMessage) {\r\n      setValidationText(addressErrorMessage)\r\n      return\r\n    }\r\n\r\n    const filteredEntries = filterAddressEntries(addressBookEntries, { inputValue: address })\r\n    return filteredEntries.length === 1 ? filteredEntries[0] : address\r\n  }\r\n\r\n  const onChange: AutocompleteProps<AddressBookEntry, false, false, true>['onChange'] = (_, value, reason) => {\r\n    switch (reason) {\r\n      case 'select-option': {\r\n        const { address, name, chainId } = value as AddressBookEntry\r\n        updateAddressInfo({ address, name, chainId })\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  const onInputChange: AutocompleteProps<AddressBookEntry, false, false, true>['onInputChange'] = async (\r\n    _,\r\n    value,\r\n    reason,\r\n  ) => {\r\n    switch (reason) {\r\n      case 'input': {\r\n        const normalizedValue = trimSpaces(value)\r\n\r\n        if (!normalizedValue) {\r\n          break\r\n        }\r\n\r\n        // ENS-enabled resolve/validation\r\n        if (\r\n          isFeatureEnabled(FEATURES.DOMAIN_LOOKUP) &&\r\n          (isValidEnsName(normalizedValue) || isValidCryptoDomainName(normalizedValue))\r\n        ) {\r\n          let address = ''\r\n          try {\r\n            address = await getAddressFromDomain(normalizedValue)\r\n          } catch (err) {\r\n            logError(Errors._101, err.message)\r\n          }\r\n\r\n          const validatedAddress = validateAddress(address)\r\n\r\n          if (!validatedAddress) {\r\n            fieldMutator('')\r\n            break\r\n          }\r\n\r\n          const newEntry =\r\n            typeof validatedAddress === 'string'\r\n              ? {\r\n                  address,\r\n                  name: normalizedValue,\r\n                  chainId,\r\n                }\r\n              : validatedAddress\r\n\r\n          updateAddressInfo(newEntry)\r\n          break\r\n        }\r\n\r\n        // ETH address validation\r\n        const validatedAddress = validateAddress(normalizedValue)\r\n\r\n        if (!validatedAddress) {\r\n          fieldMutator('')\r\n          break\r\n        }\r\n\r\n        const newEntry =\r\n          typeof validatedAddress === 'string'\r\n            ? {\r\n                address: validatedAddress,\r\n                name: '',\r\n                chainId,\r\n              }\r\n            : validatedAddress\r\n\r\n        updateAddressInfo(newEntry)\r\n\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  const labelStyles = useTextFieldLabelStyle()\r\n  const inputStyles = useTextFieldInputStyle()\r\n\r\n  return (\r\n    <Autocomplete<AddressBookEntry, false, false, true>\r\n      closeIcon={null}\r\n      openOnFocus={false}\r\n      filterOptions={filterAddressEntries}\r\n      freeSolo\r\n      onChange={onChange}\r\n      onInputChange={onInputChange}\r\n      options={addressBookEntries}\r\n      id=\"address-book-input\"\r\n      renderInput={(params) => (\r\n        <MuiTextField\r\n          {...params}\r\n          autoFocus={true}\r\n          error={!!validationText}\r\n          fullWidth\r\n          variant=\"filled\"\r\n          label={validationText ? validationText : label}\r\n          InputLabelProps={{ shrink: true, required: true, classes: labelStyles }}\r\n          InputProps={{ ...params.InputProps, classes: inputStyles }}\r\n        />\r\n      )}\r\n      getOptionLabel={({ address }) => address}\r\n      renderOption={({ address, name }) => <EthHashInfo hash={address} name={name} showAvatar />}\r\n      role=\"listbox\"\r\n      style={{ display: 'flex', flexGrow: 1 }}\r\n    />\r\n  )\r\n}\r\n\r\nexport const AddressBookInput = (props: AddressBookProps): ReactElement => {\r\n  const addressBookEntries = useSelector(addressBookSelector)\r\n  const [validationText, setValidationText] = useState<string>('')\r\n\r\n  useEffect(() => {\r\n    if (props.errorMsg) {\r\n      setValidationText(props.errorMsg)\r\n    }\r\n  }, [props.errorMsg])\r\n\r\n  return (\r\n    <BaseAddressBookInput\r\n      addressBookEntries={addressBookEntries}\r\n      setValidationText={setValidationText}\r\n      validationText={validationText}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport const ContractsAddressBookInput = ({\r\n  setIsValidAddress,\r\n  setSelectedEntry,\r\n  ...props\r\n}: AddressBookProps): ReactElement => {\r\n  const addressBookEntries = useSelector(addressBookSelector)\r\n  const [filteredEntries, setFilteredEntries] = useState<AddressBookEntry[]>([])\r\n  const [validationText, setValidationText] = useState<string>('')\r\n\r\n  useEffect(() => {\r\n    const filterContractAddresses = async (): Promise<void> => {\r\n      const filteredADBK = await filterContractAddressBookEntries(addressBookEntries)\r\n      setFilteredEntries(filteredADBK)\r\n    }\r\n    filterContractAddresses()\r\n  }, [addressBookEntries])\r\n\r\n  const onSetSelectedEntry = async (selectedEntry) => {\r\n    if (selectedEntry?.address) {\r\n      // verify if `address` is a contract\r\n      const contractAddressErrorMessage = await mustBeEthereumContractAddress(selectedEntry.address)\r\n      setIsValidAddress(!contractAddressErrorMessage)\r\n      setValidationText(contractAddressErrorMessage ?? '')\r\n      setSelectedEntry(selectedEntry)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <BaseAddressBookInput\r\n      addressBookEntries={filteredEntries}\r\n      setIsValidAddress={setIsValidAddress}\r\n      setSelectedEntry={onSetSelectedEntry}\r\n      setValidationText={setValidationText}\r\n      validationText={validationText}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListContext from '../List/ListContext';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      minWidth: 56,\n      color: theme.palette.action.active,\n      flexShrink: 0,\n      display: 'inline-flex'\n    },\n\n    /* Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`. */\n    alignItemsFlexStart: {\n      marginTop: 8\n    }\n  };\n};\n/**\n * A simple wrapper to apply `List` styles to an `Icon` or `SvgIcon`.\n */\n\nvar ListItemIcon = /*#__PURE__*/React.forwardRef(function ListItemIcon(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  var context = React.useContext(ListContext);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, context.alignItems === 'flex-start' && classes.alignItemsFlexStart),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemIcon.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component, normally `Icon`, `SvgIcon`,\n   * or a `@material-ui/icons` SVG icon element.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemIcon'\n})(ListItemIcon);","import { createStyles, makeStyles } from '@material-ui/core'\r\n\r\nimport { sm } from 'src/theme/variables'\r\n\r\nexport const useSelectedTokenStyles = makeStyles(\r\n  createStyles({\r\n    container: {\r\n      minHeight: '55px',\r\n      padding: 0,\r\n      width: '100%',\r\n    },\r\n    tokenData: {\r\n      padding: 0,\r\n      margin: 0,\r\n      lineHeight: '14px',\r\n    },\r\n    tokenImage: {\r\n      marginRight: sm,\r\n    },\r\n  }),\r\n)\r\n\r\nexport const useSelectStyles = makeStyles(\r\n  createStyles({\r\n    selectMenu: {\r\n      paddingRight: 0,\r\n    },\r\n  }),\r\n)\r\n","import { Text } from '@gnosis.pm/safe-react-components'\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport { List } from 'immutable'\r\nimport React, { ReactElement } from 'react'\r\n\r\nimport Field from 'src/components/forms/Field'\r\nimport SelectField from 'src/components/forms/SelectField'\r\nimport { required } from 'src/components/forms/validator'\r\nimport Img from 'src/components/layout/Img'\r\nimport { formatAmount } from 'src/logic/tokens/utils/formatAmount'\r\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\r\nimport { Token } from 'src/logic/tokens/store/model/token'\r\n\r\nimport { useSelectStyles, useSelectedTokenStyles } from './style'\r\n\r\ninterface SelectTokenProps {\r\n  tokenAddress: string\r\n  tokens: List<Token>\r\n}\r\n\r\nconst SelectedToken = ({ tokenAddress, tokens }: SelectTokenProps): ReactElement => {\r\n  const classes = useSelectedTokenStyles()\r\n  const token = tokens.find(({ address }) => address === tokenAddress)\r\n\r\n  return (\r\n    <MenuItem className={classes.container}>\r\n      {token ? (\r\n        <>\r\n          <ListItemIcon className={classes.tokenImage}>\r\n            <Img alt={token.name} height={28} onError={setImageToPlaceholder} src={token.logoUri} />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            className={classes.tokenData}\r\n            primary={token.name}\r\n            secondary={`${formatAmount(token.balance?.tokenBalance.toString() ?? '0')} ${token.symbol}`}\r\n          />\r\n        </>\r\n      ) : (\r\n        <Text color=\"placeHolder\" size=\"xl\">\r\n          Select an asset*\r\n        </Text>\r\n      )}\r\n    </MenuItem>\r\n  )\r\n}\r\n\r\ninterface TokenSelectFieldProps {\r\n  initialValue?: string\r\n  isValid?: boolean\r\n  tokens: List<Token>\r\n}\r\n\r\nconst TokenSelectField = ({ initialValue, isValid = true, tokens }: TokenSelectFieldProps): ReactElement => {\r\n  const classes = useSelectStyles()\r\n\r\n  return (\r\n    <Field\r\n      classes={{ selectMenu: classes.selectMenu }}\r\n      className={isValid ? 'isValid' : 'isInvalid'}\r\n      component={SelectField}\r\n      displayEmpty\r\n      initialValue={initialValue}\r\n      name=\"token\"\r\n      renderValue={(tokenAddress) => <SelectedToken tokenAddress={tokenAddress} tokens={tokens} />}\r\n      validate={required}\r\n    >\r\n      {tokens.map((token) => (\r\n        <MenuItem key={token.address} value={token.address}>\r\n          <ListItemIcon>\r\n            <Img alt={token.name} height={28} onError={setImageToPlaceholder} src={token.logoUri} />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            primary={token.name}\r\n            secondary={`${formatAmount(token.balance?.tokenBalance.toString() ?? '0')} ${token.symbol}`}\r\n            data-testid={`select-token-${token.name}`}\r\n          />\r\n        </MenuItem>\r\n      ))}\r\n    </Field>\r\n  )\r\n}\r\n\r\nexport default TokenSelectField\r\n"],"sourceRoot":""}