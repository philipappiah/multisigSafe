{"version":3,"sources":["logic/collectibles/utils/index.ts","routes/safe/components/Balances/SendModal/screens/ReviewCollectible/style.ts","routes/safe/components/Balances/SendModal/screens/ReviewCollectible/index.tsx","routes/safe/components/Balances/utils/setTokenImgToPlaceholder.ts","components/layout/Bold/index.tsx","routes/safe/components/Balances/assets/token_placeholder.svg","components/Divider/index.tsx","routes/safe/components/Balances/SendModal/SafeInfo/index.tsx","logic/collectibles/store/selectors/index.ts","logic/tokens/store/actions/fetchTokens.ts"],"names":["CK_ADDRESS","ETHEREUM_NETWORK","MAINNET","RINKEBY","SAFE_TRANSFER_FROM_WITHOUT_DATA_HASH","generateERC721TransferTxData","tx","safeAddress","a","Error","contractAddress","assetAddress","methodToCall","sameAddress","getNetworkId","transferParams","recipientAddress","nftTokenId","includes","getERC721TokenContract","NFTTokenContract","getStandardTokenContract","at","tokenInstance","contract","methods","encodeABI","styles","createStyles","heading","padding","md","lg","justifyContent","boxSizing","maxHeight","annotation","letterSpacing","color","secondaryText","marginRight","marginLeft","headingText","fontSize","closeIcon","height","width","container","amount","sm","buttonRow","gap","gasCostsContainer","backgroundColor","background","useStyles","makeStyles","ReviewCollectible","onClose","onPrev","classes","shortener","textShortener","dispatch","useDispatch","useSelector","safeParamAddressFromStateSelector","nftTokens","nftTokensSelector","useState","manualSafeTxGas","setManualSafeTxGas","manualGasPrice","setManualGasPrice","manualGasLimit","setManualGasLimit","txToken","find","tokenId","data","setData","useEstimateTransactionGas","txData","txRecipient","safeTxGas","gasLimit","gasEstimation","gasPriceFormatted","gasCostFormatted","txEstimationExecutionStatus","isExecution","isOffChainSignature","isCreation","useEstimationStatus","buttonStatus","useEffect","isCurrent","console","error","message","calculateERC721TransferData","EditableTxParameters","ethGasLimit","ethGasPrice","toString","closeEditModalCallback","txParameters","oldGasPrice","Number","newGasPrice","oldSafeTxGas","newSafeTxGas","toggleEditMode","Row","align","className","grow","Paragraph","noMargin","weight","IconButton","disableRipple","onClick","Hairline","Block","SafeInfo","Divider","withArrow","margin","size","style","Col","xs","hash","name","recipientName","showAvatar","showCopyBtn","explorerUrl","getExplorerInfo","charsStart","charsEnd","assetName","Img","alt","onError","setImageToPlaceholder","src","image","TxParametersDetail","onEdit","isTransactionCreation","isTransactionExecution","Modal","Footer","withoutBorder","ButtonStatus","LOADING","Buttons","cancelButtonProps","text","confirmButtonProps","createTransaction","to","valueInWei","txNonce","safeNonce","undefined","ethParameters","notifiedTransaction","TX_NOTIFICATION_TYPES","STANDARD_TX","submitTx","type","status","EstimationStatus","testId","currentTarget","onerror","TokenPlaceholder","Bold","this","props","children","React","Wrapper","styled","div","StyledDivider","DividerSRC","nativeCoin","getNetworkInfo","StyledBlock","border","safeSelector","address","ethBalance","safeName","state","safeNameSelector","data-testid","symbol","nftAssets","NFT_ASSETS_REDUCER_ID","nftAssetsSelector","createSelector","assets","NFT_TOKENS_REDUCER_ID","tokens","nftAssetsToListSelector","Object","values","nftAssetsAddressFromNftTokensSelector","userNftTokens","addresses","map","nftToken","uniqueAddresses","Set","Array","from","orderedNFTAssets","sort","b","localeCompare","nftAssetsFromNftTokensSelector","nftAssetsFromNftTokens","filter","createStandardTokenContract","web3","getWeb3","StandardToken","erc20Token","setProvider","currentProvider","createHumanFriendlyTokenContract","HumanFriendlyToken","humanErc20Token","createERC721TokenContract","ERC721","erc721Token","getHumanFriendlyToken","ensureOnce","fetchTokens","getState","currentSavedTokens","tokensSelector","fetchErc20AndErc721AssetsList","resp","tokenList","results","logError","Errors","_600","erc20Tokens","token","toLowerCase","length","List","makeToken","addTokens"],"mappings":"wYAUaA,GAAU,mBACpBC,IAAiBC,QAAU,8CADP,cAEpBD,IAAiBE,QAAU,8CAFP,GAMVC,EAAuC,WAuBvCC,EAA4B,uCAAG,WAC1CC,EACAC,GAF0C,uBAAAC,EAAA,yDAIrCD,EAJqC,sBAKlC,IAAIE,MAAM,qEALwB,UAhBOC,EAwBOJ,EAAGK,aAArDC,EAvBFC,YAAYH,EAAiBV,EAAWc,gBAGnC,WAGH,KAAN,OAAYV,GAkBRW,EAAiB,CAACT,EAAGU,iBAAkBV,EAAGW,aAG1CL,EAAaM,SAASd,GAZgB,wBAcxCW,EAAc,CAAIR,GAAJ,mBAAoBQ,IAdM,SAefI,cAfe,OAexCC,EAfwC,gDAkBfC,cAlBe,QAkBxCD,EAlBwC,gCAqBdA,EAAiBE,GAAGhB,EAAGK,cArBT,eAqBpCY,EArBoC,0BAuBnC,EAAAA,EAAcC,SAASC,SAAQb,GAA/B,oBAAgDG,IAAgBW,aAvB7B,kCAhBM,IAAChB,IAgBP,OAAH,wD,gBCpC5BiB,EAASC,YAAa,CACjCC,QAAS,CACPC,QAAQ,GAAD,OAAKC,KAAL,YAAWC,MAClBC,eAAgB,aAChBC,UAAW,aACXC,UAAW,QAEbC,WAAY,CACVC,cAAe,OACfC,MAAOC,gBACPC,YAAa,OACbC,WAAY,QAEdC,YAAa,CACXC,SAAUX,MAEZY,UAAW,CACTC,OAAQ,OACRC,MAAO,QAETC,UAAW,CACTjB,QAAQ,GAAD,OAAKC,KAAL,YAAWC,OAEpBgB,OAAQ,CACNP,WAAYQ,MAEdC,UAAW,CACTL,OAAQ,OACRZ,eAAgB,SAChBkB,IAAK,QAEPC,kBAAmB,CACjBC,gBAAiBC,aACjBxB,QAAQ,KAAD,OAAOE,S,mECHZuB,EAAYC,YAAW7B,GA4Md8B,UA5LW,SAAC,GAAwD,IAAtDC,EAAqD,EAArDA,QAASC,EAA4C,EAA5CA,OAAQrD,EAAoC,EAApCA,GACtCsD,EAAUL,IACVM,EAAYC,cACZC,EAAWC,cACXzD,EAAc0D,YAAYC,KAC1BC,EAAYF,YAAYG,KALkD,EAMlCC,mBAAS,GANyB,mBAMzEC,EANyE,KAMxDC,EANwD,OAOpCF,qBAPoC,mBAOzEG,EAPyE,KAOzDC,EAPyD,OAQpCJ,qBARoC,mBAQzEK,EARyE,KAQzDC,EARyD,KAU1EC,EAAUT,EAAUU,MACxB,gBAAGlE,EAAH,EAAGA,aAAcmE,EAAjB,EAAiBA,QAAjB,OAA+BnE,IAAiBL,EAAGK,cAAgBmE,IAAYxE,EAAGW,cAXJ,GAaxDoD,mBAAS,IAb+C,qBAazEU,GAbyE,MAanEC,GAbmE,SAwB5EC,YAA0B,CAC5BC,OAAQH,GACRI,YAAa7E,EAAGK,aAChByE,UAAWd,EACXE,iBACAE,mBAbAW,GAhB8E,GAgB9EA,SACAC,GAjB8E,GAiB9EA,cACAC,GAlB8E,GAkB9EA,kBACAC,GAnB8E,GAmB9EA,iBACAC,GApB8E,GAoB9EA,4BACAC,GArB8E,GAqB9EA,YACAC,GAtB8E,GAsB9EA,oBACAC,GAvB8E,GAuB9EA,WAvB8E,GAgCzDC,YAAoBJ,IAApCK,GAhCyE,qBAkChFC,qBAAU,WACR,IAAIC,GAAY,EAchB,OAZiC,uCAAG,4BAAAxF,EAAA,+EAEXH,EAA6BC,EAAIC,GAFtB,OAE1B2E,EAF0B,OAG5Bc,GACFhB,GAAQE,GAJsB,gDAOhCe,QAAQC,MAAM,0CAA2C,KAAMC,SAP/B,yDAAH,oDAUjCC,GAEO,WACLJ,GAAY,KAEb,CAACzF,EAAaD,IA8CjB,OACE,kBAAC+F,EAAA,EAAD,CACEV,oBAAqBA,GACrBD,YAAaA,GACbY,YAAajB,GACbkB,YAAahB,GACbH,UAAWE,GAAckB,WACzBC,uBA1B2B,SAACC,GAC9B,IAAMC,EAAcC,OAAOrB,IACrBsB,EAAcD,OAAOF,EAAaH,aAClCO,EAAeF,OAAOtB,IACtByB,EAAeH,OAAOF,EAAatB,WAErCyB,GAAeF,IAAgBE,GACjCpC,EAAkBiC,EAAaH,aAG7BG,EAAaJ,aAAejB,KAAaqB,EAAaJ,aACxD3B,EAAkB+B,EAAaJ,aAG7BS,GAAgBD,IAAiBC,GACnCxC,EAAmBwC,MAalB,SAACL,EAAcM,GAAf,OACC,oCACE,kBAACC,EAAA,EAAD,CAAKC,MAAM,SAASC,UAAWvD,EAAQ/B,QAASuF,MAAI,GAClD,kBAACC,EAAA,EAAD,CAAWF,UAAWvD,EAAQlB,YAAa4E,UAAQ,EAACC,OAAO,UAA3D,oBAGA,kBAACF,EAAA,EAAD,CAAWF,UAAWvD,EAAQxB,YAA9B,UACA,kBAACoF,EAAA,EAAD,CAAYC,eAAa,EAACC,QAAShE,GACjC,kBAAC,IAAD,CAAOyD,UAAWvD,EAAQhB,cAG9B,kBAAC+E,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAOT,UAAWvD,EAAQb,WACxB,kBAAC8E,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAASC,WAAS,IAClB,kBAACd,EAAA,EAAD,CAAKe,OAAO,MACV,kBAACX,EAAA,EAAD,CAAW/E,MAAM,WAAWgF,UAAQ,EAACW,KAAK,KAAKC,MAAO,CAAE7F,cAAe,WAAvE,cAIF,kBAAC4E,EAAA,EAAD,CAAKC,MAAM,SAASc,OAAO,MACzB,kBAACG,EAAA,EAAD,CAAKC,GAAI,IACP,kBAAC,cAAD,CACEC,KAAM/H,EAAGU,iBACTsH,KAAMhI,EAAGiI,cACTC,YAAU,EACVC,aAAW,EACXC,YAAaC,YAAgBrI,EAAGU,sBAItC,kBAACiG,EAAA,EAAD,CAAKe,OAAO,MACV,kBAACX,EAAA,EAAD,CAAW/E,MAAM,WAAWgF,UAAQ,EAACW,KAAK,KAAKC,MAAO,CAAE7F,cAAe,WACpEyB,YAAc,CAAE8E,WAAY,GAAIC,SAAU,GAA1C/E,CAA+CxD,EAAGwI,aAGtDlE,GACC,kBAACqC,EAAA,EAAD,CAAKC,MAAM,SAASc,OAAO,MACzB,kBAACe,EAAA,EAAD,CAAKC,IAAKpE,EAAQ0D,KAAMzF,OAAQ,GAAIoG,QAASC,IAAuBC,IAAKvE,EAAQwE,QACjF,kBAAC/B,EAAA,EAAD,CAAWF,UAAWvD,EAAQZ,OAAQsE,UAAQ,EAACW,KAAK,MACjDpE,EAAUe,EAAQ0D,MADrB,eACwCzE,EAAUe,EAAQE,SAD1D,MAOJ,kBAACuE,EAAA,EAAD,CACE3C,aAAcA,EACd4C,OAAQtC,EACRuC,sBAAuB3D,GACvB4D,uBAAwB9D,GACxBC,oBAAqBA,MAGzB,yBAAKwB,UAAWvD,EAAQR,mBACtB,kBAAC,IAAD,CACEoC,iBAAkBA,GAClBE,YAAaA,GACbE,WAAYA,GACZD,oBAAqBA,GACrBF,4BAA6BA,MAGjC,kBAACgE,EAAA,EAAMC,OAAP,CAAcC,cAAe7D,KAAiB8D,IAAaC,SACzD,kBAACJ,EAAA,EAAMC,OAAOI,QAAd,CACEC,kBAAmB,CAAErC,QAAS/D,EAAQqG,KAAM,QAC5CC,mBAAoB,CAClBvC,QAAS,kBAxHN,SAAChB,GAChB,IACMnG,EACFwD,EACEmG,YAAkB,CAChB3J,cACA4J,GAAI7J,EAAGK,aACPyJ,WAAY,IACZlF,OAAQH,GACRsF,QAAS3D,EAAa4D,UACtBlF,UAAWsB,EAAatB,UAAYwB,OAAOF,EAAatB,gBAAamF,EACrEC,cAAe9D,EACf+D,oBAAqBC,IAAsBC,eAI/C1E,QAAQC,MAAM,sFAEhB,MAAOA,GACPD,QAAQC,MAAM,qCAAsCA,GAlBtD,QAoBExC,KAmGyBkH,CAASlE,IACxBmE,KAAM,SACNC,OAAQhF,GACRkE,KAAMvE,KAAgCsF,IAAiBlB,QAAU,kBAAeU,EAChFS,OAAQ,0B,kFC/NX9B,EAAwB,SAAChD,GACpCA,EAAM+E,cAAcC,QAAU,KAC9BhF,EAAM+E,cAAc9B,IAAMgC,K,2FCJtBC,E,4JACJ,WAAU,IAAD,EACwBC,KAAKC,MAA5BC,EADD,EACCA,SAAaD,EADd,4BAGP,OAAO,oBAAOA,EAAQC,O,GAJPC,iBAQJJ,O,kCCVA,QAA0B,+C,kFCInCK,EAAUC,UAAOC,IAAV,mIASPC,EAAgBF,kBAAOG,UAAPH,CAAH,4CAeJ5D,IAPC,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OACd,kBAAC0D,EAAD,KACG1D,GAAa,kBAAC,OAAD,CAAM8C,KAAK,YAAY5C,KAAK,OAC1C,kBAAC2D,EAAD,S,0ICZIE,EAAeC,cAAfD,WAEFE,EAAcN,kBAAO9D,IAAP8D,CAAH,wOAIKO,SAGN7D,MA6BDP,IAxBE,WAA2B,IAAD,EACS5D,YAAYiI,MAAiB,GADtC,IACjCC,QAAS5L,OADwB,MACV,GADU,EACN6L,EADM,EACNA,WAC7BC,EAAWpI,aAAY,SAACqI,GAAD,OAAWC,YAAiBD,EAAO/L,MAEhE,OACE,oCACE,kBAAC,cAAD,CACE8H,KAAM9H,EACN+H,KAAM+D,EACN3D,YAAaC,YAAgBpI,GAC7BiI,YAAU,EACVC,aAAW,IAEZ2D,GACC,kBAACJ,EAAD,KACE,kBAAC,IAAD,CAAW1E,UAAQ,GAAnB,YACW,kBAAC,IAAD,CAAMkF,cAAY,uBAAlB,UAA4CJ,EAA5C,YAA0DN,EAAWW,c,kCC1C1F,6JAKaC,EAAY,SAACJ,GAAD,OAAqCA,EAAMK,MAGvDC,EAAoBC,YAAeH,GAAW,SAACI,GAAD,OAAYA,KAE1D1I,EAAoByI,aAJR,SAACP,GAAD,OAAqCA,EAAMS,QAIT,SAACC,GAAD,OAAYA,KAEjEC,EAA0BJ,YAAeH,GAAW,SAACI,GACzD,OAAOA,EAASI,OAAOC,OAAOL,GAAU,MAGpCM,EAAwCP,YAAezI,GAAmB,SAACiJ,GAC/E,IAAMC,EAAYD,EAAcE,KAAI,SAACC,GAAD,OAAcA,EAAS7M,gBACrD8M,EAAkB,IAAIC,IAAIJ,GAChC,OAAOK,MAAMC,KAAKH,MAGPI,EAAmBhB,YAAezI,GAAmB,SAACiJ,GAAD,OAChEA,EAAcS,MAAK,SAACtN,EAAGuN,GAAJ,OAAUvN,EAAE8H,KAAK0F,cAAcD,EAAEzF,YAGzC2F,EAAiCpB,YAC5CI,EACAG,GACA,SAACV,EAAWwB,GACV,OAAOxB,EACJoB,MAAK,SAACtN,EAAGuN,GAAJ,OAAUvN,EAAE8H,KAAK0F,cAAcD,EAAEzF,SACtC6F,QAAO,gBAAGhC,EAAH,EAAGA,QAAH,OAAiB+B,EAAuBhN,SAASiL,U,4TCfzDiC,EAA2B,uCAAG,8BAAA5N,EAAA,6DAC5B6N,EAAOC,cADqB,SAET9M,IAAS+M,GAFA,cAE5BC,EAF4B,QAGvBC,YAAYJ,EAAKK,iBAHM,kBAI3BF,GAJ2B,2CAAH,qDAO3BG,EAAgC,uCAAG,8BAAAnO,EAAA,6DACjC6N,EAAOC,cAD0B,SAET9M,IAASoN,GAFA,cAEjCC,EAFiC,QAGvBJ,YAAYJ,EAAKK,iBAHM,kBAKhCG,GALgC,2CAAH,qDAQhCC,EAAyB,uCAAG,8BAAAtO,EAAA,6DAC1B6N,EAAOC,cADmB,SAEN9M,IAASuN,GAFH,cAE1BC,EAF0B,QAGpBP,YAAYJ,EAAKK,iBAHG,kBAIzBM,GAJyB,2CAAH,qDAOlBC,EAAwBC,YAAWP,GAEnCtN,EAA2B6N,YAAWd,GAEtCjN,EAAyB+N,YAAWJ,GASpCK,EAAc,yDAAM,WAC/BpL,EACAqL,GAF+B,uBAAA5O,EAAA,6DAIzB6O,EAAqBC,YAAeF,KAJX,kBAQVG,cARU,OAQvBC,EARuB,OAS7BC,EAAYD,EAAKzK,KAAK2K,QATO,uDAW7BC,YAASC,IAAOC,KAAM,KAAE1J,SAXK,8BAezB2J,EAAcL,EAAUtB,QAAO,SAAC4B,GAAD,MAAwC,UAA7BA,EAAMlF,KAAKmF,kBAErC,OAAlBX,QAAkB,IAAlBA,OAAA,EAAAA,EAAoBpH,QAAS6H,EAAYG,OAjBd,mDAqBzBjD,EAASkD,YAAKJ,EAAYvC,KAAI,SAACwC,GAAD,OAAWI,YAAUJ,OAEzDhM,EAASqM,YAAUpD,IAvBY,yDAAN,0D","file":"static/js/35.85a2133b.chunk.js","sourcesContent":["import { getNetworkId } from 'src/config'\r\nimport { ETHEREUM_NETWORK } from 'src/config/networks/network.d'\r\nimport { getERC721TokenContract, getStandardTokenContract } from 'src/logic/tokens/store/actions/fetchTokens'\r\nimport { sameAddress } from 'src/logic/wallets/ethAddresses'\r\nimport { CollectibleTx } from 'src/routes/safe/components/Balances/SendModal/screens/ReviewCollectible'\r\n\r\n// CryptoKitties Contract Addresses by network\r\n// This is an exception made for a popular NFT that's not ERC721 standard-compatible,\r\n//  so we can allow the user to transfer the assets by using `transferFrom` instead of\r\n//  the standard `safeTransferFrom` method.\r\nexport const CK_ADDRESS = {\r\n  [ETHEREUM_NETWORK.MAINNET]: '0x06012c8cf97bead5deae237070f9587f8e7a266d',\r\n  [ETHEREUM_NETWORK.RINKEBY]: '0x16baf0de678e52367adc69fd067e5edd1d33e3bf',\r\n}\r\n\r\n// safeTransferFrom(address,address,uint256)\r\nexport const SAFE_TRANSFER_FROM_WITHOUT_DATA_HASH = '42842e0e'\r\n\r\n/**\r\n * Returns a method identifier based on the asset specified and the current network\r\n * @param {string} contractAddress\r\n * @returns string\r\n */\r\nexport const getTransferMethodByContractAddress = (contractAddress: string): string => {\r\n  if (sameAddress(contractAddress, CK_ADDRESS[getNetworkId()])) {\r\n    // on mainnet `transferFrom` seems to work fine but we can assure that `transfer` will work on both networks\r\n    // so that's the reason why we're falling back to `transfer` for CryptoKitties\r\n    return 'transfer'\r\n  }\r\n\r\n  return `0x${SAFE_TRANSFER_FROM_WITHOUT_DATA_HASH}`\r\n}\r\n\r\n/**\r\n * Builds the encodedABI data for the transfer of an NFT token\r\n * @param {CollectibleTx} tx\r\n * @param {string} safeAddress\r\n * @returns Promise<string>\r\n */\r\nexport const generateERC721TransferTxData = async (\r\n  tx: CollectibleTx,\r\n  safeAddress: string | undefined,\r\n): Promise<string> => {\r\n  if (!safeAddress) {\r\n    throw new Error('Failed to build NFT transfer tx data. SafeAddress is not defined.')\r\n  }\r\n\r\n  const methodToCall = getTransferMethodByContractAddress(tx.assetAddress)\r\n  let transferParams = [tx.recipientAddress, tx.nftTokenId]\r\n  let NFTTokenContract\r\n\r\n  if (methodToCall.includes(SAFE_TRANSFER_FROM_WITHOUT_DATA_HASH)) {\r\n    // we add the `from` param for the `safeTransferFrom` method call\r\n    transferParams = [safeAddress, ...transferParams]\r\n    NFTTokenContract = await getERC721TokenContract()\r\n  } else {\r\n    // we fallback to an ERC20 Token contract whose ABI implements the `transfer` method\r\n    NFTTokenContract = await getStandardTokenContract()\r\n  }\r\n\r\n  const tokenInstance = await NFTTokenContract.at(tx.assetAddress)\r\n\r\n  return tokenInstance.contract.methods[methodToCall](...transferParams).encodeABI()\r\n}\r\n","import { background, lg, md, secondaryText, sm } from 'src/theme/variables'\r\nimport { createStyles } from '@material-ui/core'\r\n\r\nexport const styles = createStyles({\r\n  heading: {\r\n    padding: `${md} ${lg}`,\r\n    justifyContent: 'flex-start',\r\n    boxSizing: 'border-box',\r\n    maxHeight: '74px',\r\n  },\r\n  annotation: {\r\n    letterSpacing: '-1px',\r\n    color: secondaryText,\r\n    marginRight: 'auto',\r\n    marginLeft: '20px',\r\n  },\r\n  headingText: {\r\n    fontSize: lg,\r\n  },\r\n  closeIcon: {\r\n    height: '35px',\r\n    width: '35px',\r\n  },\r\n  container: {\r\n    padding: `${md} ${lg}`,\r\n  },\r\n  amount: {\r\n    marginLeft: sm,\r\n  },\r\n  buttonRow: {\r\n    height: '84px',\r\n    justifyContent: 'center',\r\n    gap: '16px',\r\n  },\r\n  gasCostsContainer: {\r\n    backgroundColor: background,\r\n    padding: `0 ${lg}`,\r\n  },\r\n})\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Close from '@material-ui/icons/Close'\r\n\r\nimport { getExplorerInfo } from 'src/config'\r\nimport Divider from 'src/components/Divider'\r\nimport Block from 'src/components/layout/Block'\r\nimport Col from 'src/components/layout/Col'\r\nimport Hairline from 'src/components/layout/Hairline'\r\nimport Img from 'src/components/layout/Img'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Row from 'src/components/layout/Row'\r\nimport { nftTokensSelector } from 'src/logic/collectibles/store/selectors'\r\nimport { createTransaction } from 'src/logic/safe/store/actions/createTransaction'\r\nimport { safeParamAddressFromStateSelector } from 'src/logic/safe/store/selectors'\r\nimport { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions'\r\nimport SafeInfo from 'src/routes/safe/components/Balances/SendModal/SafeInfo'\r\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\r\nimport { textShortener } from 'src/utils/strings'\r\nimport { generateERC721TransferTxData } from 'src/logic/collectibles/utils'\r\n\r\nimport { styles } from './style'\r\nimport { EthHashInfo } from '@gnosis.pm/safe-react-components'\r\nimport { EstimationStatus, useEstimateTransactionGas } from 'src/logic/hooks/useEstimateTransactionGas'\r\nimport { useEstimationStatus } from 'src/logic/hooks/useEstimationStatus'\r\nimport { ButtonStatus, Modal } from 'src/components/Modal'\r\nimport { TransactionFees } from 'src/components/TransactionsFees'\r\nimport { EditableTxParameters } from 'src/routes/safe/components/Transactions/helpers/EditableTxParameters'\r\nimport { TxParametersDetail } from 'src/routes/safe/components/Transactions/helpers/TxParametersDetail'\r\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\nexport type CollectibleTx = {\r\n  recipientAddress: string\r\n  recipientName?: string\r\n  assetAddress: string\r\n  assetName: string\r\n  nftTokenId: string\r\n}\r\n\r\ntype Props = {\r\n  onClose: () => void\r\n  onPrev: () => void\r\n  tx: CollectibleTx\r\n}\r\n\r\nconst ReviewCollectible = ({ onClose, onPrev, tx }: Props): React.ReactElement => {\r\n  const classes = useStyles()\r\n  const shortener = textShortener()\r\n  const dispatch = useDispatch()\r\n  const safeAddress = useSelector(safeParamAddressFromStateSelector)\r\n  const nftTokens = useSelector(nftTokensSelector)\r\n  const [manualSafeTxGas, setManualSafeTxGas] = useState(0)\r\n  const [manualGasPrice, setManualGasPrice] = useState<string | undefined>()\r\n  const [manualGasLimit, setManualGasLimit] = useState<string | undefined>()\r\n\r\n  const txToken = nftTokens.find(\r\n    ({ assetAddress, tokenId }) => assetAddress === tx.assetAddress && tokenId === tx.nftTokenId,\r\n  )\r\n  const [data, setData] = useState('')\r\n\r\n  const {\r\n    gasLimit,\r\n    gasEstimation,\r\n    gasPriceFormatted,\r\n    gasCostFormatted,\r\n    txEstimationExecutionStatus,\r\n    isExecution,\r\n    isOffChainSignature,\r\n    isCreation,\r\n  } = useEstimateTransactionGas({\r\n    txData: data,\r\n    txRecipient: tx.assetAddress,\r\n    safeTxGas: manualSafeTxGas,\r\n    manualGasPrice,\r\n    manualGasLimit,\r\n  })\r\n\r\n  const [buttonStatus] = useEstimationStatus(txEstimationExecutionStatus)\r\n\r\n  useEffect(() => {\r\n    let isCurrent = true\r\n\r\n    const calculateERC721TransferData = async () => {\r\n      try {\r\n        const txData = await generateERC721TransferTxData(tx, safeAddress)\r\n        if (isCurrent) {\r\n          setData(txData)\r\n        }\r\n      } catch (error) {\r\n        console.error('Error calculating ERC721 transfer data:', error.message)\r\n      }\r\n    }\r\n    calculateERC721TransferData()\r\n\r\n    return () => {\r\n      isCurrent = false\r\n    }\r\n  }, [safeAddress, tx])\r\n\r\n  const submitTx = (txParameters: TxParameters) => {\r\n    try {\r\n      if (safeAddress) {\r\n        dispatch(\r\n          createTransaction({\r\n            safeAddress,\r\n            to: tx.assetAddress,\r\n            valueInWei: '0',\r\n            txData: data,\r\n            txNonce: txParameters.safeNonce,\r\n            safeTxGas: txParameters.safeTxGas ? Number(txParameters.safeTxGas) : undefined,\r\n            ethParameters: txParameters,\r\n            notifiedTransaction: TX_NOTIFICATION_TYPES.STANDARD_TX,\r\n          }),\r\n        )\r\n      } else {\r\n        console.error('There was an error trying to submit the transaction, the safeAddress was not found')\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating sendCollectible Tx:', error)\r\n    } finally {\r\n      onClose()\r\n    }\r\n  }\r\n\r\n  const closeEditModalCallback = (txParameters: TxParameters) => {\r\n    const oldGasPrice = Number(gasPriceFormatted)\r\n    const newGasPrice = Number(txParameters.ethGasPrice)\r\n    const oldSafeTxGas = Number(gasEstimation)\r\n    const newSafeTxGas = Number(txParameters.safeTxGas)\r\n\r\n    if (newGasPrice && oldGasPrice !== newGasPrice) {\r\n      setManualGasPrice(txParameters.ethGasPrice)\r\n    }\r\n\r\n    if (txParameters.ethGasLimit && gasLimit !== txParameters.ethGasLimit) {\r\n      setManualGasLimit(txParameters.ethGasLimit)\r\n    }\r\n\r\n    if (newSafeTxGas && oldSafeTxGas !== newSafeTxGas) {\r\n      setManualSafeTxGas(newSafeTxGas)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <EditableTxParameters\r\n      isOffChainSignature={isOffChainSignature}\r\n      isExecution={isExecution}\r\n      ethGasLimit={gasLimit}\r\n      ethGasPrice={gasPriceFormatted}\r\n      safeTxGas={gasEstimation.toString()}\r\n      closeEditModalCallback={closeEditModalCallback}\r\n    >\r\n      {(txParameters, toggleEditMode) => (\r\n        <>\r\n          <Row align=\"center\" className={classes.heading} grow>\r\n            <Paragraph className={classes.headingText} noMargin weight=\"bolder\">\r\n              Send collectible\r\n            </Paragraph>\r\n            <Paragraph className={classes.annotation}>2 of 2</Paragraph>\r\n            <IconButton disableRipple onClick={onClose}>\r\n              <Close className={classes.closeIcon} />\r\n            </IconButton>\r\n          </Row>\r\n          <Hairline />\r\n          <Block className={classes.container}>\r\n            <SafeInfo />\r\n            <Divider withArrow />\r\n            <Row margin=\"xs\">\r\n              <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                Recipient\r\n              </Paragraph>\r\n            </Row>\r\n            <Row align=\"center\" margin=\"md\">\r\n              <Col xs={12}>\r\n                <EthHashInfo\r\n                  hash={tx.recipientAddress}\r\n                  name={tx.recipientName}\r\n                  showAvatar\r\n                  showCopyBtn\r\n                  explorerUrl={getExplorerInfo(tx.recipientAddress)}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row margin=\"xs\">\r\n              <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                {textShortener({ charsStart: 40, charsEnd: 0 })(tx.assetName)}\r\n              </Paragraph>\r\n            </Row>\r\n            {txToken && (\r\n              <Row align=\"center\" margin=\"md\">\r\n                <Img alt={txToken.name} height={28} onError={setImageToPlaceholder} src={txToken.image} />\r\n                <Paragraph className={classes.amount} noMargin size=\"md\">\r\n                  {shortener(txToken.name)} (Token ID: {shortener(txToken.tokenId as string)})\r\n                </Paragraph>\r\n              </Row>\r\n            )}\r\n\r\n            {/* Tx Parameters */}\r\n            <TxParametersDetail\r\n              txParameters={txParameters}\r\n              onEdit={toggleEditMode}\r\n              isTransactionCreation={isCreation}\r\n              isTransactionExecution={isExecution}\r\n              isOffChainSignature={isOffChainSignature}\r\n            />\r\n          </Block>\r\n          <div className={classes.gasCostsContainer}>\r\n            <TransactionFees\r\n              gasCostFormatted={gasCostFormatted}\r\n              isExecution={isExecution}\r\n              isCreation={isCreation}\r\n              isOffChainSignature={isOffChainSignature}\r\n              txEstimationExecutionStatus={txEstimationExecutionStatus}\r\n            />\r\n          </div>\r\n          <Modal.Footer withoutBorder={buttonStatus !== ButtonStatus.LOADING}>\r\n            <Modal.Footer.Buttons\r\n              cancelButtonProps={{ onClick: onPrev, text: 'Back' }}\r\n              confirmButtonProps={{\r\n                onClick: () => submitTx(txParameters),\r\n                type: 'submit',\r\n                status: buttonStatus,\r\n                text: txEstimationExecutionStatus === EstimationStatus.LOADING ? 'Estimating' : undefined,\r\n                testId: 'submit-tx-btn',\r\n              }}\r\n            />\r\n          </Modal.Footer>\r\n        </>\r\n      )}\r\n    </EditableTxParameters>\r\n  )\r\n}\r\n\r\nexport default ReviewCollectible\r\n","import { SyntheticEvent } from 'react'\r\n\r\nimport TokenPlaceholder from 'src/routes/safe/components/Balances/assets/token_placeholder.svg'\r\n\r\nexport const setImageToPlaceholder = (error: SyntheticEvent<HTMLImageElement, Event>): void => {\r\n  error.currentTarget.onerror = null\r\n  error.currentTarget.src = TokenPlaceholder\r\n}\r\n","import * as React from 'react'\r\n\r\nclass Bold extends React.PureComponent<any> {\r\n  render() {\r\n    const { children, ...props } = this.props\r\n\r\n    return <b {...props}>{children}</b>\r\n  }\r\n}\r\n\r\nexport default Bold\r\n","export default __webpack_public_path__ + \"static/media/token_placeholder.c1abe466.svg\";","import React, { ReactElement } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Icon, Divider as DividerSRC } from '@gnosis.pm/safe-react-components'\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 8px 0;\r\n\r\n  svg {\r\n    margin: 0 12px 0 4px;\r\n  }\r\n`\r\nconst StyledDivider = styled(DividerSRC)`\r\n  width: 100%;\r\n`\r\n\r\ntype Props = {\r\n  withArrow?: boolean\r\n}\r\n\r\nconst Divider = ({ withArrow }: Props): ReactElement => (\r\n  <Wrapper>\r\n    {withArrow && <Icon type=\"arrowDown\" size=\"md\" />}\r\n    <StyledDivider />\r\n  </Wrapper>\r\n)\r\n\r\nexport default Divider\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { EthHashInfo } from '@gnosis.pm/safe-react-components'\r\nimport styled from 'styled-components'\r\n\r\nimport { getExplorerInfo, getNetworkInfo } from 'src/config'\r\nimport { safeNameSelector, safeSelector } from 'src/logic/safe/store/selectors'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Bold from 'src/components/layout/Bold'\r\nimport { border, xs } from 'src/theme/variables'\r\nimport Block from 'src/components/layout/Block'\r\n\r\nconst { nativeCoin } = getNetworkInfo()\r\n\r\nconst StyledBlock = styled(Block)`\r\n  font-size: 12px;\r\n  line-height: 1.08;\r\n  letter-spacing: -0.5px;\r\n  background-color: ${border};\r\n  width: fit-content;\r\n  padding: 5px 10px;\r\n  margin-top: ${xs};\r\n  margin-left: 40px;\r\n  border-radius: 3px;\r\n`\r\n\r\nconst SafeInfo = (): React.ReactElement => {\r\n  const { address: safeAddress = '', ethBalance } = useSelector(safeSelector) || {}\r\n  const safeName = useSelector((state) => safeNameSelector(state, safeAddress))\r\n\r\n  return (\r\n    <>\r\n      <EthHashInfo\r\n        hash={safeAddress}\r\n        name={safeName}\r\n        explorerUrl={getExplorerInfo(safeAddress)}\r\n        showAvatar\r\n        showCopyBtn\r\n      />\r\n      {ethBalance && (\r\n        <StyledBlock>\r\n          <Paragraph noMargin>\r\n            Balance: <Bold data-testid=\"current-eth-balance\">{`${ethBalance} ${nativeCoin.symbol}`}</Bold>\r\n          </Paragraph>\r\n        </StyledBlock>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SafeInfo\r\n","import { createSelector } from 'reselect'\r\nimport { NFTAsset, NFTAssets, NFTToken, NFTTokens } from 'src/logic/collectibles/sources/collectibles.d'\r\n\r\nimport { AppReduxState } from 'src/store'\r\nimport { NFT_ASSETS_REDUCER_ID, NFT_TOKENS_REDUCER_ID } from 'src/logic/collectibles/store/reducer/collectibles'\r\nexport const nftAssets = (state: AppReduxState): NFTAssets => state[NFT_ASSETS_REDUCER_ID]\r\nexport const nftTokens = (state: AppReduxState): NFTTokens => state[NFT_TOKENS_REDUCER_ID]\r\n\r\nexport const nftAssetsSelector = createSelector(nftAssets, (assets) => assets)\r\n\r\nexport const nftTokensSelector = createSelector(nftTokens, (tokens) => tokens)\r\n\r\nconst nftAssetsToListSelector = createSelector(nftAssets, (assets): NFTAsset[] => {\r\n  return assets ? Object.values(assets) : []\r\n})\r\n\r\nconst nftAssetsAddressFromNftTokensSelector = createSelector(nftTokensSelector, (userNftTokens): string[] => {\r\n  const addresses = userNftTokens.map((nftToken) => nftToken.assetAddress)\r\n  const uniqueAddresses = new Set(addresses)\r\n  return Array.from(uniqueAddresses)\r\n})\r\n\r\nexport const orderedNFTAssets = createSelector(nftTokensSelector, (userNftTokens): NFTToken[] =>\r\n  userNftTokens.sort((a, b) => a.name.localeCompare(b.name)),\r\n)\r\n\r\nexport const nftAssetsFromNftTokensSelector = createSelector(\r\n  nftAssetsToListSelector,\r\n  nftAssetsAddressFromNftTokensSelector,\r\n  (nftAssets, nftAssetsFromNftTokens): NFTAsset[] => {\r\n    return nftAssets\r\n      .sort((a, b) => a.name.localeCompare(b.name))\r\n      .filter(({ address }) => nftAssetsFromNftTokens.includes(address))\r\n  },\r\n)\r\n","import StandardToken from '@gnosis.pm/util-contracts/build/contracts/GnosisStandardToken.json'\r\nimport HumanFriendlyToken from '@gnosis.pm/util-contracts/build/contracts/HumanFriendlyToken.json'\r\nimport ERC721 from '@openzeppelin/contracts/build/contracts/ERC721.json'\r\nimport { List } from 'immutable'\r\nimport contract from '@truffle/contract/index.js'\r\nimport { addTokens } from 'src/logic/tokens/store/actions/addTokens'\r\nimport { fetchErc20AndErc721AssetsList } from 'src/logic/tokens/api'\r\nimport { makeToken } from 'src/logic/tokens/store/model/token'\r\nimport { tokensSelector } from 'src/logic/tokens/store/selectors'\r\nimport { getWeb3 } from 'src/logic/wallets/getWeb3'\r\nimport { AppReduxState } from 'src/store'\r\nimport { ensureOnce } from 'src/utils/singleton'\r\nimport { ThunkDispatch } from 'redux-thunk'\r\nimport { AnyAction } from 'redux'\r\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\r\nimport { TokenResult } from '../../api/fetchErc20AndErc721AssetsList'\r\n\r\nconst createStandardTokenContract = async () => {\r\n  const web3 = getWeb3()\r\n  const erc20Token = await contract(StandardToken)\r\n  erc20Token.setProvider(web3.currentProvider)\r\n  return erc20Token\r\n}\r\n\r\nconst createHumanFriendlyTokenContract = async () => {\r\n  const web3 = getWeb3()\r\n  const humanErc20Token = await contract(HumanFriendlyToken)\r\n  humanErc20Token.setProvider(web3.currentProvider)\r\n\r\n  return humanErc20Token\r\n}\r\n\r\nconst createERC721TokenContract = async () => {\r\n  const web3 = getWeb3()\r\n  const erc721Token = await contract(ERC721)\r\n  erc721Token.setProvider(web3.currentProvider)\r\n  return erc721Token\r\n}\r\n\r\nexport const getHumanFriendlyToken = ensureOnce(createHumanFriendlyTokenContract)\r\n\r\nexport const getStandardTokenContract = ensureOnce(createStandardTokenContract)\r\n\r\nexport const getERC721TokenContract = ensureOnce(createERC721TokenContract)\r\n\r\nexport const containsMethodByHash = async (contractAddress: string, methodHash: string): Promise<boolean> => {\r\n  const web3 = getWeb3()\r\n  const byteCode = await web3.eth.getCode(contractAddress)\r\n\r\n  return byteCode.indexOf(methodHash.replace('0x', '')) !== -1\r\n}\r\n\r\nexport const fetchTokens = () => async (\r\n  dispatch: ThunkDispatch<AppReduxState, undefined, AnyAction>,\r\n  getState: () => AppReduxState,\r\n): Promise<void> => {\r\n  const currentSavedTokens = tokensSelector(getState())\r\n\r\n  let tokenList: TokenResult[]\r\n  try {\r\n    const resp = await fetchErc20AndErc721AssetsList()\r\n    tokenList = resp.data.results\r\n  } catch (e) {\r\n    logError(Errors._600, e.message)\r\n    return\r\n  }\r\n\r\n  const erc20Tokens = tokenList.filter((token) => token.type.toLowerCase() === 'erc20')\r\n\r\n  if (currentSavedTokens?.size === erc20Tokens.length) {\r\n    return\r\n  }\r\n\r\n  const tokens = List(erc20Tokens.map((token) => makeToken(token)))\r\n\r\n  dispatch(addTokens(tokens))\r\n}\r\n"],"sourceRoot":""}