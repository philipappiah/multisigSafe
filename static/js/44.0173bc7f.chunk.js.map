{"version":3,"sources":["routes/safe/components/Balances/SendModal/screens/ContractInteraction/ReviewCustomTx/style.ts","routes/safe/components/Balances/SendModal/screens/ContractInteraction/ReviewCustomTx/index.tsx","routes/safe/components/Balances/utils/setTokenImgToPlaceholder.ts","components/layout/Bold/index.tsx","routes/safe/components/Balances/assets/token_placeholder.svg","components/Divider/index.tsx","routes/safe/components/Balances/SendModal/SafeInfo/index.tsx"],"names":["styles","createStyles","heading","padding","md","lg","justifyContent","boxSizing","maxHeight","annotation","letterSpacing","color","secondaryText","marginRight","marginLeft","headingText","fontSize","closeIcon","height","width","container","value","sm","outerData","borderRadius","border","minHeight","data","wordBreak","overflow","fontFamily","fontStretch","lineHeight","buttonRow","gap","gasCostsContainer","backgroundColor","background","useStyles","makeStyles","nativeCoin","getNetworkInfo","ReviewCustomTx","onClose","onPrev","tx","classes","dispatch","useDispatch","safeAddress","useSelector","safeParamAddressFromStateSelector","useEstimateTransactionGas","txRecipient","contractAddress","txData","trim","txAmount","toTokenUnit","decimals","gasLimit","gasEstimation","gasPriceFormatted","gasCostFormatted","txEstimationExecutionStatus","isExecution","isCreation","isOffChainSignature","useEstimationStatus","buttonStatus","EditableTxParameters","ethGasLimit","ethGasPrice","safeTxGas","toString","txParameters","toggleEditMode","Row","align","className","grow","Paragraph","noMargin","weight","IconButton","disableRipple","onClick","Hairline","Block","SafeInfo","Divider","withArrow","margin","size","style","Col","xs","hash","showAvatar","showCopyBtn","explorerUrl","getExplorerInfo","Img","alt","onError","setImageToPlaceholder","src","getEthAsToken","logoUri","name","TxParametersDetail","onEdit","isTransactionCreation","isTransactionExecution","EstimationStatus","LOADING","Modal","Footer","withoutBorder","ButtonStatus","Buttons","cancelButtonProps","text","confirmButtonProps","txValue","createTransaction","to","valueInWei","txNonce","safeNonce","Number","undefined","ethParameters","notifiedTransaction","TX_NOTIFICATION_TYPES","STANDARD_TX","console","error","submitTx","status","testId","currentTarget","onerror","TokenPlaceholder","Bold","this","props","children","React","Wrapper","styled","div","StyledDivider","DividerSRC","type","StyledBlock","safeSelector","address","ethBalance","safeName","state","safeNameSelector","data-testid","symbol"],"mappings":"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","file":"static/js/44.0173bc7f.chunk.js","sourcesContent":["import { background, border, lg, md, secondaryText, sm } from 'src/theme/variables'\r\nimport { createStyles } from '@material-ui/core'\r\n\r\nexport const styles = createStyles({\r\n  heading: {\r\n    padding: `${md} ${lg}`,\r\n    justifyContent: 'flex-start',\r\n    boxSizing: 'border-box',\r\n    maxHeight: '74px',\r\n  },\r\n  annotation: {\r\n    letterSpacing: '-1px',\r\n    color: secondaryText,\r\n    marginRight: 'auto',\r\n    marginLeft: '20px',\r\n  },\r\n  headingText: {\r\n    fontSize: lg,\r\n  },\r\n  closeIcon: {\r\n    height: '35px',\r\n    width: '35px',\r\n  },\r\n  container: {\r\n    padding: `${md} ${lg}`,\r\n  },\r\n  value: {\r\n    marginLeft: sm,\r\n  },\r\n  outerData: {\r\n    borderRadius: '5px',\r\n    border: `1px solid ${border}`,\r\n    padding: '11px',\r\n    minHeight: '21px',\r\n  },\r\n  data: {\r\n    wordBreak: 'break-all',\r\n    overflow: 'auto',\r\n    fontSize: '14px',\r\n    fontFamily: 'Averta',\r\n    maxHeight: '100px',\r\n    letterSpacing: 'normal',\r\n    fontStretch: 'normal',\r\n    lineHeight: '1.43',\r\n  },\r\n  buttonRow: {\r\n    height: '84px',\r\n    justifyContent: 'center',\r\n    gap: '16px',\r\n  },\r\n  gasCostsContainer: {\r\n    backgroundColor: background,\r\n    padding: `${sm} ${lg}`,\r\n  },\r\n})\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Close from '@material-ui/icons/Close'\r\nimport { EthHashInfo } from '@gnosis.pm/safe-react-components'\r\n\r\nimport { getExplorerInfo, getNetworkInfo } from 'src/config'\r\nimport { toTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\r\nimport Divider from 'src/components/Divider'\r\nimport Block from 'src/components/layout/Block'\r\nimport Col from 'src/components/layout/Col'\r\nimport Hairline from 'src/components/layout/Hairline'\r\nimport Img from 'src/components/layout/Img'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Row from 'src/components/layout/Row'\r\nimport { createTransaction } from 'src/logic/safe/store/actions/createTransaction'\r\nimport { safeParamAddressFromStateSelector } from 'src/logic/safe/store/selectors'\r\nimport { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions'\r\nimport { getEthAsToken } from 'src/logic/tokens/utils/tokenHelpers'\r\nimport SafeInfo from 'src/routes/safe/components/Balances/SendModal/SafeInfo'\r\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\r\nimport { TxParametersDetail } from 'src/routes/safe/components/Transactions/helpers/TxParametersDetail'\r\nimport { useEstimateTransactionGas, EstimationStatus } from 'src/logic/hooks/useEstimateTransactionGas'\r\nimport { useEstimationStatus } from 'src/logic/hooks/useEstimationStatus'\r\nimport { ButtonStatus, Modal } from 'src/components/Modal'\r\nimport { TransactionFees } from 'src/components/TransactionsFees'\r\nimport { EditableTxParameters } from 'src/routes/safe/components/Transactions/helpers/EditableTxParameters'\r\n\r\nimport { styles } from './style'\r\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\r\n\r\nexport type CustomTx = {\r\n  contractAddress?: string\r\n  data?: string\r\n  value?: string\r\n}\r\n\r\ntype Props = {\r\n  onClose: () => void\r\n  onPrev: () => void\r\n  tx: CustomTx\r\n}\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\nconst { nativeCoin } = getNetworkInfo()\r\n\r\nconst ReviewCustomTx = ({ onClose, onPrev, tx }: Props): React.ReactElement => {\r\n  const classes = useStyles()\r\n  const dispatch = useDispatch()\r\n  const safeAddress = useSelector(safeParamAddressFromStateSelector)\r\n\r\n  const {\r\n    gasLimit,\r\n    gasEstimation,\r\n    gasPriceFormatted,\r\n    gasCostFormatted,\r\n    txEstimationExecutionStatus,\r\n    isExecution,\r\n    isCreation,\r\n    isOffChainSignature,\r\n  } = useEstimateTransactionGas({\r\n    txRecipient: tx.contractAddress as string,\r\n    txData: tx.data ? tx.data.trim() : '',\r\n    txAmount: tx.value ? toTokenUnit(tx.value, nativeCoin.decimals) : '0',\r\n  })\r\n\r\n  const [buttonStatus] = useEstimationStatus(txEstimationExecutionStatus)\r\n\r\n  const submitTx = (txParameters: TxParameters) => {\r\n    const txRecipient = tx.contractAddress\r\n    const txData = tx.data ? tx.data.trim() : ''\r\n    const txValue = tx.value ? toTokenUnit(tx.value, nativeCoin.decimals) : '0'\r\n\r\n    if (safeAddress) {\r\n      dispatch(\r\n        createTransaction({\r\n          safeAddress: safeAddress,\r\n          to: txRecipient as string,\r\n          valueInWei: txValue,\r\n          txData,\r\n          txNonce: txParameters.safeNonce,\r\n          safeTxGas: txParameters.safeTxGas ? Number(txParameters.safeTxGas) : undefined,\r\n          ethParameters: txParameters,\r\n          notifiedTransaction: TX_NOTIFICATION_TYPES.STANDARD_TX,\r\n        }),\r\n      )\r\n    } else {\r\n      console.error('There was an error trying to submit the transaction, the safeAddress was not found')\r\n    }\r\n    onClose()\r\n  }\r\n\r\n  return (\r\n    <EditableTxParameters\r\n      isOffChainSignature={isOffChainSignature}\r\n      isExecution={isExecution}\r\n      ethGasLimit={gasLimit}\r\n      ethGasPrice={gasPriceFormatted}\r\n      safeTxGas={gasEstimation.toString()}\r\n    >\r\n      {(txParameters, toggleEditMode) => (\r\n        <>\r\n          <Row align=\"center\" className={classes.heading} grow>\r\n            <Paragraph className={classes.headingText} noMargin weight=\"bolder\">\r\n              Contract interaction\r\n            </Paragraph>\r\n            <Paragraph className={classes.annotation}>2 of 2</Paragraph>\r\n            <IconButton disableRipple onClick={onClose}>\r\n              <Close className={classes.closeIcon} />\r\n            </IconButton>\r\n          </Row>\r\n          <Hairline />\r\n          <Block className={classes.container}>\r\n            <SafeInfo />\r\n            <Divider withArrow />\r\n            <Row margin=\"xs\">\r\n              <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                Recipient\r\n              </Paragraph>\r\n            </Row>\r\n\r\n            <Row align=\"center\" margin=\"md\">\r\n              <Col xs={12}>\r\n                <EthHashInfo\r\n                  hash={tx.contractAddress as string}\r\n                  showAvatar\r\n                  showCopyBtn\r\n                  explorerUrl={getExplorerInfo(tx.contractAddress as string)}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row margin=\"xs\">\r\n              <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                Value\r\n              </Paragraph>\r\n            </Row>\r\n            <Row align=\"center\" margin=\"md\">\r\n              <Img alt=\"Ether\" height={28} onError={setImageToPlaceholder} src={getEthAsToken('0').logoUri} />\r\n              <Paragraph className={classes.value} noMargin size=\"md\">\r\n                {tx.value || 0}\r\n                {' ' + nativeCoin.name}\r\n              </Paragraph>\r\n            </Row>\r\n            <Row margin=\"xs\">\r\n              <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                Data (hex encoded)\r\n              </Paragraph>\r\n            </Row>\r\n            <Row align=\"center\" margin=\"md\">\r\n              <Col className={classes.outerData}>\r\n                <Row className={classes.data} size=\"md\">\r\n                  {tx.data}\r\n                </Row>\r\n              </Col>\r\n            </Row>\r\n\r\n            {/* Tx Parameters */}\r\n            <TxParametersDetail\r\n              txParameters={txParameters}\r\n              onEdit={toggleEditMode}\r\n              isTransactionCreation={isCreation}\r\n              isTransactionExecution={isExecution}\r\n              isOffChainSignature={isOffChainSignature}\r\n            />\r\n          </Block>\r\n          {txEstimationExecutionStatus === EstimationStatus.LOADING ? null : (\r\n            <Block className={classes.gasCostsContainer}>\r\n              <TransactionFees\r\n                gasCostFormatted={gasCostFormatted}\r\n                isExecution={isExecution}\r\n                isCreation={isCreation}\r\n                isOffChainSignature={isOffChainSignature}\r\n                txEstimationExecutionStatus={txEstimationExecutionStatus}\r\n              />\r\n            </Block>\r\n          )}\r\n          <Modal.Footer withoutBorder={buttonStatus !== ButtonStatus.LOADING}>\r\n            <Modal.Footer.Buttons\r\n              cancelButtonProps={{ onClick: onPrev, text: 'Back' }}\r\n              confirmButtonProps={{\r\n                onClick: () => submitTx(txParameters),\r\n                status: buttonStatus,\r\n                text: txEstimationExecutionStatus === EstimationStatus.LOADING ? 'Estimating' : undefined,\r\n                testId: 'submit-tx-btn',\r\n              }}\r\n            />\r\n          </Modal.Footer>\r\n        </>\r\n      )}\r\n    </EditableTxParameters>\r\n  )\r\n}\r\n\r\nexport default ReviewCustomTx\r\n","import { SyntheticEvent } from 'react'\r\n\r\nimport TokenPlaceholder from 'src/routes/safe/components/Balances/assets/token_placeholder.svg'\r\n\r\nexport const setImageToPlaceholder = (error: SyntheticEvent<HTMLImageElement, Event>): void => {\r\n  error.currentTarget.onerror = null\r\n  error.currentTarget.src = TokenPlaceholder\r\n}\r\n","import * as React from 'react'\r\n\r\nclass Bold extends React.PureComponent<any> {\r\n  render() {\r\n    const { children, ...props } = this.props\r\n\r\n    return <b {...props}>{children}</b>\r\n  }\r\n}\r\n\r\nexport default Bold\r\n","export default __webpack_public_path__ + \"static/media/token_placeholder.c1abe466.svg\";","import React, { ReactElement } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Icon, Divider as DividerSRC } from '@gnosis.pm/safe-react-components'\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 8px 0;\r\n\r\n  svg {\r\n    margin: 0 12px 0 4px;\r\n  }\r\n`\r\nconst StyledDivider = styled(DividerSRC)`\r\n  width: 100%;\r\n`\r\n\r\ntype Props = {\r\n  withArrow?: boolean\r\n}\r\n\r\nconst Divider = ({ withArrow }: Props): ReactElement => (\r\n  <Wrapper>\r\n    {withArrow && <Icon type=\"arrowDown\" size=\"md\" />}\r\n    <StyledDivider />\r\n  </Wrapper>\r\n)\r\n\r\nexport default Divider\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { EthHashInfo } from '@gnosis.pm/safe-react-components'\r\nimport styled from 'styled-components'\r\n\r\nimport { getExplorerInfo, getNetworkInfo } from 'src/config'\r\nimport { safeNameSelector, safeSelector } from 'src/logic/safe/store/selectors'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Bold from 'src/components/layout/Bold'\r\nimport { border, xs } from 'src/theme/variables'\r\nimport Block from 'src/components/layout/Block'\r\n\r\nconst { nativeCoin } = getNetworkInfo()\r\n\r\nconst StyledBlock = styled(Block)`\r\n  font-size: 12px;\r\n  line-height: 1.08;\r\n  letter-spacing: -0.5px;\r\n  background-color: ${border};\r\n  width: fit-content;\r\n  padding: 5px 10px;\r\n  margin-top: ${xs};\r\n  margin-left: 40px;\r\n  border-radius: 3px;\r\n`\r\n\r\nconst SafeInfo = (): React.ReactElement => {\r\n  const { address: safeAddress = '', ethBalance } = useSelector(safeSelector) || {}\r\n  const safeName = useSelector((state) => safeNameSelector(state, safeAddress))\r\n\r\n  return (\r\n    <>\r\n      <EthHashInfo\r\n        hash={safeAddress}\r\n        name={safeName}\r\n        explorerUrl={getExplorerInfo(safeAddress)}\r\n        showAvatar\r\n        showCopyBtn\r\n      />\r\n      {ethBalance && (\r\n        <StyledBlock>\r\n          <Paragraph noMargin>\r\n            Balance: <Bold data-testid=\"current-eth-balance\">{`${ethBalance} ${nativeCoin.symbol}`}</Bold>\r\n          </Paragraph>\r\n        </StyledBlock>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SafeInfo\r\n"],"sourceRoot":""}