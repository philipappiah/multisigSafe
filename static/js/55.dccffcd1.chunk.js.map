{"version":3,"sources":["logic/collectibles/store/selectors/index.ts","../node_modules/@material-ui/core/esm/Card/Card.js","routes/safe/components/Balances/Collectibles/components/Item.tsx","routes/safe/components/Balances/Collectibles/index.tsx"],"names":["nftAssets","state","NFT_ASSETS_REDUCER_ID","nftAssetsSelector","createSelector","assets","nftTokensSelector","NFT_TOKENS_REDUCER_ID","tokens","nftAssetsToListSelector","Object","values","nftAssetsAddressFromNftTokensSelector","userNftTokens","addresses","map","nftToken","assetAddress","uniqueAddresses","Set","Array","from","orderedNFTAssets","sort","a","b","name","localeCompare","nftAssetsFromNftTokensSelector","nftAssetsFromNftTokens","filter","address","includes","Card","React","props","ref","classes","className","_props$raised","raised","other","_objectWithoutProperties","Paper","_extends","clsx","root","elevation","withStyles","overflow","useStyles","makeStyles","item","backgroundColor","borderRadius","boxShadow","boxSizing","cursor","granted","display","flexDirection","flexGrow","minHeight","minWidth","position","opacity","mainContent","zIndex","extraContent","alignItems","bottom","justifyContent","left","right","top","transition","image","backgroundPosition","backgroundRepeat","backgroundSize","height","width","textContainer","color","fontColor","flexShrink","fontSize","lineHeight","padding","title","fontWeight","margin","maxWidth","textOverflow","whiteSpace","text","buttonIcon","marginRight","sm","sendButton","xs","Item","data","onSend","useSelector","grantedSelector","style","backgroundImage","description","cn","Button","onClick","size","variant","createStyles","cardInner","cardOuter","gridRow","columnGap","gridTemplateColumns","marginBottom","rowGap","screenXs","screenSm","titleImg","titleText","titleFiller","marginLeft","noData","lg","textAlign","Collectibles","trackEvent","useAnalytics","useState","selectedToken","setSelectedToken","sendNFTsModalOpen","setSendNFTsModalOpen","nftTokens","useEffect","category","SAFE_NAVIGATION_EVENT","action","length","Paragraph","nftAsset","Fragment","key","slug","tokenId","handleItemSend","SendModal","activeScreenType","isOpen","onClose"],"mappings":"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","file":"static/js/55.dccffcd1.chunk.js","sourcesContent":["import { createSelector } from 'reselect'\r\nimport { NFTAsset, NFTAssets, NFTToken, NFTTokens } from 'src/logic/collectibles/sources/collectibles.d'\r\n\r\nimport { AppReduxState } from 'src/store'\r\nimport { NFT_ASSETS_REDUCER_ID, NFT_TOKENS_REDUCER_ID } from 'src/logic/collectibles/store/reducer/collectibles'\r\nexport const nftAssets = (state: AppReduxState): NFTAssets => state[NFT_ASSETS_REDUCER_ID]\r\nexport const nftTokens = (state: AppReduxState): NFTTokens => state[NFT_TOKENS_REDUCER_ID]\r\n\r\nexport const nftAssetsSelector = createSelector(nftAssets, (assets) => assets)\r\n\r\nexport const nftTokensSelector = createSelector(nftTokens, (tokens) => tokens)\r\n\r\nconst nftAssetsToListSelector = createSelector(nftAssets, (assets): NFTAsset[] => {\r\n  return assets ? Object.values(assets) : []\r\n})\r\n\r\nconst nftAssetsAddressFromNftTokensSelector = createSelector(nftTokensSelector, (userNftTokens): string[] => {\r\n  const addresses = userNftTokens.map((nftToken) => nftToken.assetAddress)\r\n  const uniqueAddresses = new Set(addresses)\r\n  return Array.from(uniqueAddresses)\r\n})\r\n\r\nexport const orderedNFTAssets = createSelector(nftTokensSelector, (userNftTokens): NFTToken[] =>\r\n  userNftTokens.sort((a, b) => a.name.localeCompare(b.name)),\r\n)\r\n\r\nexport const nftAssetsFromNftTokensSelector = createSelector(\r\n  nftAssetsToListSelector,\r\n  nftAssetsAddressFromNftTokensSelector,\r\n  (nftAssets, nftAssetsFromNftTokens): NFTAsset[] => {\r\n    return nftAssets\r\n      .sort((a, b) => a.name.localeCompare(b.name))\r\n      .filter(({ address }) => nftAssetsFromNftTokens.includes(address))\r\n  },\r\n)\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Paper from '../Paper';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    overflow: 'hidden'\n  }\n};\nvar Card = /*#__PURE__*/React.forwardRef(function Card(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$raised = props.raised,\n      raised = _props$raised === void 0 ? false : _props$raised,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"raised\"]);\n\n  return /*#__PURE__*/React.createElement(Paper, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : 1,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the card will use raised styling.\n   */\n  raised: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCard'\n})(Card);","import { makeStyles } from '@material-ui/core/styles'\r\n// import CallMade from '@material-ui/icons/CallMade'\r\nimport cn from 'classnames'\r\nimport * as React from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport Button from 'src/components/layout/Button'\r\nimport { grantedSelector } from 'src/routes/safe/container/selector'\r\nimport { fontColor, sm, xs } from 'src/theme/variables'\r\n\r\nconst useStyles = makeStyles({\r\n  item: {\r\n    backgroundColor: '#fff',\r\n    borderRadius: '8px',\r\n    boxShadow: '0 0 10px 0 rgba(33, 48, 77, 0.10)',\r\n    boxSizing: 'border-box',\r\n    cursor: (props) => (props.granted ? 'pointer' : 'default'),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    flexGrow: '1',\r\n    minHeight: '250px',\r\n    minWidth: '0',\r\n    position: 'relative',\r\n\r\n    '&:hover .showOnHover': {\r\n      opacity: '1',\r\n    },\r\n    '&:active .showOnHover': {\r\n      opacity: '1',\r\n    },\r\n  },\r\n  mainContent: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    flexGrow: '1',\r\n    position: 'relative',\r\n    zIndex: '1',\r\n  },\r\n  extraContent: {\r\n    alignItems: 'center',\r\n    backgroundColor: 'rgba(255, 243, 226, 0.6)',\r\n    bottom: '0',\r\n    cursor: 'pointer',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    left: '0',\r\n    opacity: '0',\r\n    position: 'absolute',\r\n    right: '0',\r\n    top: '0',\r\n    transition: 'opacity 0.15s ease-out',\r\n    zIndex: '5',\r\n  },\r\n  image: {\r\n    backgroundColor: (props) => `#${props.backgroundColor}` || '#f0efee',\r\n    backgroundPosition: '50% 50%',\r\n    backgroundRepeat: 'no-repeat',\r\n    backgroundSize: 'contain',\r\n    borderRadius: '8px',\r\n    height: '178px',\r\n    flexGrow: '1',\r\n    width: '100%',\r\n  },\r\n  textContainer: {\r\n    boxSizing: 'border-box',\r\n    color: fontColor,\r\n    flexShrink: '0',\r\n    fontSize: '12px',\r\n    lineHeight: '1.4',\r\n    padding: '15px 22px 20px',\r\n  },\r\n  title: {\r\n    fontWeight: 'bold',\r\n    margin: '0',\r\n    maxWidth: '100%',\r\n    overflow: 'hidden',\r\n    textOverflow: 'ellipsis',\r\n    whiteSpace: 'nowrap',\r\n  },\r\n  text: {\r\n    margin: '0',\r\n    maxWidth: '100%',\r\n    overflow: 'hidden',\r\n    textOverflow: 'ellipsis',\r\n    whiteSpace: 'nowrap',\r\n  },\r\n  buttonIcon: {\r\n    fontSize: 16,\r\n    marginRight: sm,\r\n  },\r\n  sendButton: {\r\n    borderRadius: xs,\r\n    minWidth: '85px',\r\n\r\n    '& > span': {\r\n      fontSize: '14px',\r\n    },\r\n  },\r\n} as any)\r\n\r\nconst Item = ({ data, onSend }) => {\r\n  const granted = useSelector(grantedSelector)\r\n  const classes = useStyles({ backgroundColor: data.color, granted })\r\n\r\n  return (\r\n    <div className={classes.item}>\r\n      <div className={classes.mainContent}>\r\n        <div className={classes.image} style={{ backgroundImage: `url(${data.image})` }} />\r\n        <div className={classes.textContainer}>\r\n          {data.name && (\r\n            <h3 className={classes.title} title={data.name}>\r\n              {data.name}\r\n            </h3>\r\n          )}\r\n          {data.description && (\r\n            <p className={classes.text} title={data.description}>\r\n              {data.description}\r\n            </p>\r\n          )}\r\n        </div>\r\n      </div>\r\n      {granted && (\r\n        <div className={cn(classes.extraContent, 'showOnHover')}>\r\n          <Button className={classes.sendButton} color=\"primary\" onClick={onSend} size=\"small\" variant=\"contained\">\r\n            {/* <CallMade alt=\"Send\" className={classes.buttonIcon} />  */}\r\n            Send\r\n          </Button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Item\r\n","import React, { useEffect } from 'react'\r\nimport Card from '@material-ui/core/Card'\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport Item from './components/Item'\r\n\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport { nftAssetsFromNftTokensSelector, orderedNFTAssets } from 'src/logic/collectibles/store/selectors'\r\nimport SendModal from 'src/routes/safe/components/Balances/SendModal'\r\nimport { fontColor, lg, screenSm, screenXs } from 'src/theme/variables'\r\nimport { useAnalytics, SAFE_NAVIGATION_EVENT } from 'src/utils/googleAnalytics'\r\nimport { NFTToken } from 'src/logic/collectibles/sources/collectibles.d'\r\n\r\nconst useStyles = makeStyles(\r\n  createStyles({\r\n    cardInner: {\r\n      boxSizing: 'border-box',\r\n      maxWidth: '100%',\r\n      padding: '52px 54px',\r\n    },\r\n    cardOuter: {\r\n      boxShadow: '1px 2px 10px 0 rgba(212, 212, 211, 0.59)',\r\n    },\r\n    gridRow: {\r\n      boxSizing: 'border-box',\r\n      columnGap: '30px',\r\n      display: 'grid',\r\n      gridTemplateColumns: '1fr',\r\n      marginBottom: '45px',\r\n      maxWidth: '100%',\r\n      rowGap: '45px',\r\n\r\n      '&:last-child': {\r\n        marginBottom: '0',\r\n      },\r\n\r\n      [`@media (min-width: ${screenXs}px)`]: {\r\n        gridTemplateColumns: '1fr 1fr',\r\n      },\r\n\r\n      [`@media (min-width: ${screenSm}px)`]: {\r\n        gridTemplateColumns: '1fr 1fr 1fr 1fr',\r\n      },\r\n    },\r\n    title: {\r\n      alignItems: 'center',\r\n      display: 'flex',\r\n      margin: '0 0 18px',\r\n    },\r\n    titleImg: {\r\n      backgroundPosition: '50% 50%',\r\n      backgroundRepeat: 'no-repeat',\r\n      backgroundSize: 'contain',\r\n      borderRadius: '50%',\r\n      height: '45px',\r\n      margin: '0 10px 0 0',\r\n      width: '45px',\r\n    },\r\n    titleText: {\r\n      color: fontColor,\r\n      fontSize: '18px',\r\n      fontWeight: 'normal',\r\n      lineHeight: '1.2',\r\n      margin: '0',\r\n    },\r\n    titleFiller: {\r\n      backgroundColor: '#e8e7e6',\r\n      flexGrow: 1,\r\n      height: '2px',\r\n      marginLeft: '40px',\r\n    },\r\n    noData: {\r\n      fontSize: lg,\r\n      textAlign: 'center',\r\n    },\r\n  }),\r\n)\r\n\r\nconst Collectibles = (): React.ReactElement => {\r\n  const { trackEvent } = useAnalytics()\r\n  const classes = useStyles()\r\n  const [selectedToken, setSelectedToken] = React.useState<NFTToken | undefined>()\r\n  const [sendNFTsModalOpen, setSendNFTsModalOpen] = React.useState(false)\r\n\r\n  const nftTokens = useSelector(orderedNFTAssets)\r\n  const nftAssetsFromNftTokens = useSelector(nftAssetsFromNftTokensSelector)\r\n\r\n  useEffect(() => {\r\n    trackEvent({ category: SAFE_NAVIGATION_EVENT, action: 'Collectibles' })\r\n  }, [trackEvent])\r\n\r\n  const handleItemSend = (nftToken: NFTToken) => {\r\n    setSelectedToken(nftToken)\r\n    setSendNFTsModalOpen(true)\r\n  }\r\n\r\n  return (\r\n    <Card className={classes.cardOuter}>\r\n      <div className={classes.cardInner}>\r\n        {/* No collectibles */}\r\n        {nftAssetsFromNftTokens.length === 0 && (\r\n          <Paragraph className={classes.noData}>No collectibles available</Paragraph>\r\n        )}\r\n\r\n        {/* collectibles List*/}\r\n        {nftAssetsFromNftTokens.length > 0 &&\r\n          nftAssetsFromNftTokens.map((nftAsset) => {\r\n            return (\r\n              <React.Fragment key={nftAsset.slug}>\r\n                <div className={classes.title}>\r\n                  <div className={classes.titleImg} style={{ backgroundImage: `url(${nftAsset.image || ''})` }} />\r\n                  <h2 className={classes.titleText}>{nftAsset.name}</h2>\r\n                  <div className={classes.titleFiller} />\r\n                </div>\r\n                <div className={classes.gridRow}>\r\n                  {nftTokens\r\n                    .filter(({ assetAddress }) => nftAsset.address === assetAddress)\r\n                    .map((nftToken) => (\r\n                      <Item\r\n                        data={nftToken}\r\n                        key={`${nftAsset.slug}_${nftToken.tokenId}`}\r\n                        onSend={() => handleItemSend(nftToken)}\r\n                      />\r\n                    ))}\r\n                </div>\r\n              </React.Fragment>\r\n            )\r\n          })}\r\n      </div>\r\n      <SendModal\r\n        activeScreenType=\"sendCollectible\"\r\n        isOpen={sendNFTsModalOpen}\r\n        onClose={() => setSendNFTsModalOpen(false)}\r\n        selectedToken={selectedToken}\r\n      />\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default Collectibles\r\n"],"sourceRoot":""}