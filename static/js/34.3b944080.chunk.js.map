{"version":3,"sources":["components/WhenFieldChanges/index.tsx","routes/safe/components/Balances/SendModal/screens/SendCollectible/CollectibleSelectField/style.ts","routes/safe/components/Balances/SendModal/screens/SendCollectible/CollectibleSelectField/index.tsx","routes/safe/components/Balances/SendModal/screens/SendCollectible/style.ts","routes/safe/components/Balances/SendModal/screens/SendCollectible/TokenSelectField/style.ts","routes/safe/components/Balances/SendModal/screens/SendCollectible/TokenSelectField/index.tsx","routes/safe/components/Balances/SendModal/screens/SendCollectible/index.tsx","components/forms/Field/index.tsx","components/forms/GnoForm/index.tsx","routes/safe/components/Balances/utils/setTokenImgToPlaceholder.ts","components/layout/Bold/index.tsx","routes/safe/components/Balances/assets/token_placeholder.svg","assets/icons/qrcode.svg","components/Divider/index.tsx","components/ScanQRModal/style.ts","components/ScanQRModal/index.tsx","components/ScanQRModal/ScanQRWrapper/index.tsx","routes/safe/components/Balances/SendModal/SafeInfo/index.tsx","components/forms/SelectField/index.tsx","../node_modules/react-final-form-listeners/dist/react-final-form-listeners.es.js","routes/safe/components/Balances/SendModal/screens/AddressBookInput/style.ts","routes/safe/components/Balances/SendModal/screens/AddressBookInput/index.tsx","logic/collectibles/store/selectors/index.ts","../node_modules/@material-ui/core/esm/ListItemIcon/ListItemIcon.js"],"names":["WhenFieldChanges","field","set","to","name","subscription","onChange","input","selectedTokenStyles","createStyles","container","minHeight","padding","width","tokenData","margin","lineHeight","tokenImage","marginRight","sm","selectStyles","selectMenu","paddingRight","useSelectedCollectibleStyles","makeStyles","SelectedCollectible","tokenId","tokens","classes","token","find","id","shortener","textShortener","charsStart","charsEnd","MenuItem","className","ListItemIcon","Img","alt","description","height","onError","setImageToPlaceholder","src","image","ListItemText","primary","secondary","toString","Paragraph","color","size","style","opacity","weight","useCollectibleSelectFieldStyles","CollectibleSelectField","initialValue","Field","component","SelectField","disabled","length","renderValue","nftTokenId","validate","required","map","key","assetAddress","value","styles","heading","md","lg","justifyContent","boxSizing","annotation","letterSpacing","secondaryText","marginLeft","manage","fontSize","closeIcon","qrCodeBtn","cursor","formContainer","buttonRow","gap","useSelectedTokenStyles","SelectedToken","assets","asset","numberOfTokens","formatAmount","symbol","useTokenSelectFieldStyles","TokenSelectField","assetsAddresses","Object","keys","slug","formMutators","setMax","args","state","utils","changeValue","onTokenChange","setRecipient","useStyles","SendCollectible","initialValues","onClose","onNext","recipientAddress","selectedToken","nftAssets","useSelector","nftAssetsSelector","nftTokens","nftTokensSelector","addressBook","addressBookSelector","useState","defaultEntry","address","predefinedAddress","addressBookEntry","sameAddress","selectedEntry","setSelectedEntry","pristine","setPristine","isValidAddress","setIsValidAddress","React","useMemo","Row","align","grow","noMargin","IconButton","disableRipple","onClick","Hairline","GnoForm","onSubmit","values","recipientName","assetName","formState","mutators","selectedNFTTokens","filter","nftToken","handleScan","closeQrModal","scannedAddress","startsWith","replace","scannedName","getNameFromAddressBook","shouldDisableSubmitButton","Block","SafeInfo","Divider","withArrow","onKeyDown","e","sameString","role","tabIndex","Col","xs","hash","showAvatar","showCopyBtn","explorerUrl","getExplorerInfo","AddressBookInput","fieldMutator","center","middle","ScanQRWrapper","between","tokenAddress","Modal","Footer","Buttons","cancelButtonProps","confirmButtonProps","testId","text","GnoField","props","stylesBasedOn","flexDirection","flex","children","decorators","validation","render","handleSubmit","rest","data-testid","submitting","validating","form","error","currentTarget","onerror","TokenPlaceholder","Bold","this","Wrapper","styled","div","StyledDivider","DividerSRC","type","maxHeight","loaderContainer","close","detailsContainer","backgroundColor","background","button","ScanQRModal","isOpen","onScan","fileUploadModalOpen","setFileUploadModalOpen","setError","cameraBlocked","setCameraBlocked","scannerRef","openImageDialog","current","useEffect","onFileScannedResolve","successData","console","handleClose","open","title","layout","legacyMode","err","data","ref","facingMode","Button","minWidth","variant","qrModalOpen","setQrModalOpen","QRIcon","nativeCoin","getNetworkInfo","StyledBlock","border","safeSelector","safeAddress","ethBalance","safeName","safeNameSelector","SelectInput","disableError","formControlProps","restInput","label","meta","showError","submitError","dirtySinceLastSubmit","touched","inputProps","htmlFor","_extends","assign","target","i","arguments","source","prototype","hasOwnProperty","call","apply","_inheritsLoose","subClass","superClass","create","constructor","__proto__","Component","OnChangeState","_React$Component","_this","previous","_proto","componentDidUpdate","_this$props","setState","OnChange","_ref","createElement","allowNull","useTextFieldLabelStyle","root","overflow","borderRadius","useTextFieldInputStyle","chainId","getNetworkId","BaseAddressBookInput","addressBookEntries","setValidationText","validationText","updateAddressInfo","addressEntry","validateAddress","addressErrorMessage","mustBeEthereumAddress","filteredEntries","filterAddressEntries","inputValue","onInputChange","_","reason","a","normalizedValue","trimSpaces","isFeatureEnabled","FEATURES","DOMAIN_LOOKUP","isValidEnsName","isValidCryptoDomainName","getAddressFromDomain","logError","Errors","_101","message","validatedAddress","labelStyles","inputStyles","Autocomplete","openOnFocus","filterOptions","freeSolo","options","renderInput","params","autoFocus","fullWidth","InputLabelProps","shrink","InputProps","getOptionLabel","renderOption","display","flexGrow","errorMsg","ContractsAddressBookInput","setFilteredEntries","filterContractAddressBookEntries","filteredADBK","filterContractAddresses","onSetSelectedEntry","mustBeEthereumContractAddress","contractAddressErrorMessage","NFT_ASSETS_REDUCER_ID","createSelector","NFT_TOKENS_REDUCER_ID","nftAssetsToListSelector","nftAssetsAddressFromNftTokensSelector","userNftTokens","addresses","uniqueAddresses","Set","Array","from","orderedNFTAssets","sort","b","localeCompare","nftAssetsFromNftTokensSelector","nftAssetsFromNftTokens","includes","other","_objectWithoutProperties","context","ListContext","clsx","alignItems","alignItemsFlexStart","withStyles","theme","palette","action","active","flexShrink","marginTop"],"mappings":"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","file":"static/js/34.3b944080.chunk.js","sourcesContent":["import React from 'react'\r\nimport { OnChange } from 'react-final-form-listeners'\r\n\r\nimport GnoField from 'src/components/forms/Field'\r\n\r\nconst WhenFieldChanges = ({ field, set, to }) => (\r\n  <GnoField name={set} subscription={{}}>\r\n    {(\r\n      // No subscription. We only use Field to get to the change function\r\n      { input: { onChange } },\r\n    ) => (\r\n      <OnChange name={field}>\r\n        {() => {\r\n          onChange(to)\r\n        }}\r\n      </OnChange>\r\n    )}\r\n  </GnoField>\r\n)\r\nexport default WhenFieldChanges\r\n","import { sm } from 'src/theme/variables'\r\nimport { createStyles } from '@material-ui/core'\r\n\r\nexport const selectedTokenStyles = createStyles({\r\n  container: {\r\n    minHeight: '55px',\r\n    padding: 0,\r\n    width: '100%',\r\n  },\r\n  tokenData: {\r\n    padding: 0,\r\n    margin: 0,\r\n    lineHeight: '14px',\r\n  },\r\n  tokenImage: {\r\n    marginRight: sm,\r\n  },\r\n})\r\n\r\nexport const selectStyles = createStyles({\r\n  selectMenu: {\r\n    paddingRight: 0,\r\n  },\r\n  tokenImage: {\r\n    marginRight: sm,\r\n  },\r\n})\r\n","import ListItemIcon from '@material-ui/core/ListItemIcon'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport React from 'react'\r\n\r\nimport { selectStyles, selectedTokenStyles } from './style'\r\n\r\nimport Field from 'src/components/forms/Field'\r\nimport SelectField from 'src/components/forms/SelectField'\r\nimport { required } from 'src/components/forms/validator'\r\nimport Img from 'src/components/layout/Img'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\r\nimport { textShortener } from 'src/utils/strings'\r\nimport { NFTToken } from 'src/logic/collectibles/sources/collectibles.d'\r\n\r\nconst useSelectedCollectibleStyles = makeStyles(selectedTokenStyles)\r\n\r\ntype SelectedCollectibleProps = {\r\n  tokenId?: number | string\r\n  tokens: NFTToken[]\r\n}\r\n\r\nconst SelectedCollectible = ({ tokenId, tokens }: SelectedCollectibleProps): React.ReactElement => {\r\n  const classes = useSelectedCollectibleStyles()\r\n  const token = tokenId && tokens ? tokens.find(({ tokenId: id }) => tokenId === id) : null\r\n  const shortener = textShortener({ charsStart: 40, charsEnd: 0 })\r\n\r\n  return (\r\n    <MenuItem className={classes.container}>\r\n      {token ? (\r\n        <>\r\n          <ListItemIcon className={classes.tokenImage}>\r\n            <Img alt={token.description} height={28} onError={setImageToPlaceholder} src={token.image} />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            className={classes.tokenData}\r\n            primary={shortener(token.name)}\r\n            secondary={`token ID: ${shortener(token.tokenId.toString())}`}\r\n          />\r\n        </>\r\n      ) : (\r\n        <Paragraph color=\"disabled\" size=\"md\" style={{ opacity: 0.5 }} weight=\"light\">\r\n          Select a token*\r\n        </Paragraph>\r\n      )}\r\n    </MenuItem>\r\n  )\r\n}\r\n\r\nconst useCollectibleSelectFieldStyles = makeStyles(selectStyles)\r\n\r\ntype CollectibleSelectFieldProps = {\r\n  initialValue?: number | string\r\n  tokens: NFTToken[]\r\n}\r\n\r\nexport const CollectibleSelectField = ({ initialValue, tokens }: CollectibleSelectFieldProps): React.ReactElement => {\r\n  const classes = useCollectibleSelectFieldStyles()\r\n\r\n  return (\r\n    <Field\r\n      className={classes.selectMenu}\r\n      component={SelectField}\r\n      disabled={!tokens.length}\r\n      initialValue={initialValue}\r\n      name=\"nftTokenId\"\r\n      renderValue={(nftTokenId) => <SelectedCollectible tokenId={nftTokenId} tokens={tokens} />}\r\n      validate={required}\r\n    >\r\n      {tokens.map((token) => (\r\n        <MenuItem key={`${token.assetAddress}-${token.tokenId}`} value={token.tokenId}>\r\n          <ListItemIcon className={classes.tokenImage}>\r\n            <Img alt={token.name} height={28} onError={setImageToPlaceholder} src={token.image} />\r\n          </ListItemIcon>\r\n          <ListItemText primary={token.name} secondary={`token ID: ${token.tokenId}`} />\r\n        </MenuItem>\r\n      ))}\r\n    </Field>\r\n  )\r\n}\r\n","import { lg, md, secondaryText } from 'src/theme/variables'\r\nimport { createStyles } from '@material-ui/core'\r\n\r\nexport const styles = createStyles({\r\n  heading: {\r\n    padding: `${md} ${lg}`,\r\n    justifyContent: 'flex-start',\r\n    boxSizing: 'border-box',\r\n    height: '74px',\r\n  },\r\n  annotation: {\r\n    letterSpacing: '-1px',\r\n    color: secondaryText,\r\n    marginRight: 'auto',\r\n    marginLeft: '20px',\r\n  },\r\n  manage: {\r\n    fontSize: lg,\r\n  },\r\n  closeIcon: {\r\n    height: '35px',\r\n    width: '35px',\r\n  },\r\n  qrCodeBtn: {\r\n    cursor: 'pointer',\r\n  },\r\n  formContainer: {\r\n    padding: `${md} ${lg}`,\r\n  },\r\n  buttonRow: {\r\n    height: '84px',\r\n    justifyContent: 'center',\r\n    gap: '16px',\r\n  },\r\n})\r\n","import { sm } from 'src/theme/variables'\r\nimport { createStyles } from '@material-ui/core'\r\n\r\nexport const selectedTokenStyles = createStyles({\r\n  container: {\r\n    minHeight: '55px',\r\n    padding: 0,\r\n    width: '100%',\r\n  },\r\n  tokenData: {\r\n    padding: 0,\r\n    margin: 0,\r\n    lineHeight: '14px',\r\n  },\r\n  tokenImage: {\r\n    marginRight: sm,\r\n  },\r\n})\r\n\r\nexport const selectStyles = createStyles({\r\n  selectMenu: {\r\n    paddingRight: 0,\r\n  },\r\n  tokenImage: {\r\n    marginRight: sm,\r\n  },\r\n})\r\n","import ListItemIcon from '@material-ui/core/ListItemIcon'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport React from 'react'\r\n\r\nimport { selectStyles, selectedTokenStyles } from './style'\r\n\r\nimport Field from 'src/components/forms/Field'\r\nimport SelectField from 'src/components/forms/SelectField'\r\nimport { required } from 'src/components/forms/validator'\r\nimport Img from 'src/components/layout/Img'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport { formatAmount } from 'src/logic/tokens/utils/formatAmount'\r\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\r\nimport { textShortener } from 'src/utils/strings'\r\nimport { NFTAssets } from 'src/logic/collectibles/sources/collectibles.d'\r\n\r\nconst useSelectedTokenStyles = makeStyles(selectedTokenStyles)\r\n\r\ntype SelectedTokenProps = {\r\n  assetAddress?: string\r\n  assets: NFTAssets\r\n}\r\n\r\nconst SelectedToken = ({ assetAddress, assets }: SelectedTokenProps): React.ReactElement => {\r\n  const classes = useSelectedTokenStyles()\r\n  const asset = assetAddress ? assets[assetAddress] : null\r\n  const shortener = textShortener({ charsStart: 40, charsEnd: 0 })\r\n\r\n  return (\r\n    <MenuItem className={classes.container}>\r\n      {asset && asset.numberOfTokens ? (\r\n        <>\r\n          <ListItemIcon className={classes.tokenImage}>\r\n            <Img alt={asset.name} height={28} onError={setImageToPlaceholder} src={asset.image} />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            className={classes.tokenData}\r\n            primary={shortener(asset.name)}\r\n            secondary={`${formatAmount(asset.numberOfTokens.toString())} ${asset.symbol}`}\r\n          />\r\n        </>\r\n      ) : (\r\n        <Paragraph color=\"disabled\" size=\"md\" style={{ opacity: 0.5 }} weight=\"light\">\r\n          Select an asset*\r\n        </Paragraph>\r\n      )}\r\n    </MenuItem>\r\n  )\r\n}\r\n\r\nconst useTokenSelectFieldStyles = makeStyles(selectStyles)\r\n\r\ntype TokenSelectFieldProps = {\r\n  assets: NFTAssets\r\n  initialValue?: string\r\n}\r\n\r\nconst TokenSelectField = ({ assets, initialValue }: TokenSelectFieldProps): React.ReactElement => {\r\n  const classes = useTokenSelectFieldStyles()\r\n  const assetsAddresses = Object.keys(assets)\r\n\r\n  return (\r\n    <Field\r\n      className={classes.selectMenu}\r\n      component={SelectField}\r\n      disabled={!assetsAddresses.length}\r\n      initialValue={initialValue}\r\n      name=\"assetAddress\"\r\n      renderValue={(assetAddress) => <SelectedToken assetAddress={assetAddress} assets={assets} />}\r\n      validate={required}\r\n    >\r\n      {assetsAddresses.map((assetAddress) => {\r\n        const asset = assets[assetAddress]\r\n\r\n        return (\r\n          <MenuItem key={asset.slug} value={assetAddress}>\r\n            <ListItemIcon className={classes.tokenImage}>\r\n              <Img alt={asset.name} height={28} onError={setImageToPlaceholder} src={asset.image} />\r\n            </ListItemIcon>\r\n            <ListItemText\r\n              primary={asset.name}\r\n              secondary={`Count: ${formatAmount(asset.numberOfTokens.toString())} ${asset.symbol}`}\r\n            />\r\n          </MenuItem>\r\n        )\r\n      })}\r\n    </Field>\r\n  )\r\n}\r\n\r\nexport default TokenSelectField\r\n","import { EthHashInfo } from '@gnosis.pm/safe-react-components'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Close from '@material-ui/icons/Close'\r\nimport React, { useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport Divider from 'src/components/Divider'\r\nimport GnoForm from 'src/components/forms/GnoForm'\r\nimport Block from 'src/components/layout/Block'\r\nimport Col from 'src/components/layout/Col'\r\nimport Hairline from 'src/components/layout/Hairline'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Row from 'src/components/layout/Row'\r\nimport { ScanQRWrapper } from 'src/components/ScanQRModal/ScanQRWrapper'\r\nimport { Modal } from 'src/components/Modal'\r\nimport WhenFieldChanges from 'src/components/WhenFieldChanges'\r\nimport { addressBookSelector } from 'src/logic/addressBook/store/selectors'\r\nimport { getNameFromAddressBook } from 'src/logic/addressBook/utils'\r\nimport { nftAssetsSelector, nftTokensSelector } from 'src/logic/collectibles/store/selectors'\r\nimport { Erc721Transfer } from 'src/logic/safe/store/models/types/gateway'\r\nimport SafeInfo from 'src/routes/safe/components/Balances/SendModal/SafeInfo'\r\nimport { AddressBookInput } from 'src/routes/safe/components/Balances/SendModal/screens/AddressBookInput'\r\nimport { NFTToken } from 'src/logic/collectibles/sources/collectibles.d'\r\nimport { getExplorerInfo } from 'src/config'\r\nimport { sameAddress } from 'src/logic/wallets/ethAddresses'\r\nimport { sameString } from 'src/utils/strings'\r\n\r\nimport { CollectibleSelectField } from './CollectibleSelectField'\r\nimport { styles } from './style'\r\nimport TokenSelectField from './TokenSelectField'\r\n\r\nconst formMutators = {\r\n  setMax: (args, state, utils) => {\r\n    utils.changeValue(state, 'amount', () => args[0])\r\n  },\r\n  onTokenChange: (args, state, utils) => {\r\n    utils.changeValue(state, 'amount', () => '')\r\n  },\r\n  setRecipient: (args, state, utils) => {\r\n    utils.changeValue(state, 'recipientAddress', () => args[0])\r\n  },\r\n}\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\ntype SendCollectibleProps = {\r\n  initialValues: any\r\n  onClose: () => void\r\n  onNext: (txInfo: SendCollectibleTxInfo) => void\r\n  recipientAddress?: string\r\n  selectedToken?: NFTToken | Erc721Transfer\r\n}\r\n\r\nexport type SendCollectibleTxInfo = {\r\n  assetAddress: string\r\n  assetName: string\r\n  nftTokenId: string\r\n  recipientAddress?: string\r\n  recipientName?: string\r\n}\r\n\r\nconst SendCollectible = ({\r\n  initialValues,\r\n  onClose,\r\n  onNext,\r\n  recipientAddress,\r\n  selectedToken,\r\n}: SendCollectibleProps): React.ReactElement => {\r\n  const classes = useStyles()\r\n  const nftAssets = useSelector(nftAssetsSelector)\r\n  const nftTokens = useSelector(nftTokensSelector)\r\n  const addressBook = useSelector(addressBookSelector)\r\n  const [selectedEntry, setSelectedEntry] = useState<{ address: string; name: string } | null>(() => {\r\n    const defaultEntry = { address: recipientAddress || '', name: '' }\r\n\r\n    // if there's nothing to lookup for, we return the default entry\r\n    if (!initialValues?.recipientAddress && !recipientAddress) {\r\n      return defaultEntry\r\n    }\r\n\r\n    // if there's something to lookup for, `initialValues` has precedence over `recipientAddress`\r\n    const predefinedAddress = initialValues?.recipientAddress ?? recipientAddress\r\n    const addressBookEntry = addressBook.find(({ address }) => {\r\n      return sameAddress(predefinedAddress, address)\r\n    })\r\n\r\n    // if found in the Address Book, then we return the entry\r\n    if (addressBookEntry) {\r\n      return addressBookEntry\r\n    }\r\n\r\n    // otherwise we return the default entry\r\n    return defaultEntry\r\n  })\r\n  const [pristine, setPristine] = useState(true)\r\n  const [isValidAddress, setIsValidAddress] = useState(false)\r\n\r\n  React.useMemo(() => {\r\n    if (selectedEntry === null && pristine) {\r\n      setPristine(false)\r\n    }\r\n  }, [selectedEntry, pristine])\r\n\r\n  const handleSubmit = (values: SendCollectibleTxInfo) => {\r\n    // If the input wasn't modified, there was no mutation of the recipientAddress\r\n    if (!values.recipientAddress) {\r\n      values.recipientAddress = selectedEntry?.address\r\n    }\r\n    values.recipientName = selectedEntry?.name\r\n    values.assetName = nftAssets[values.assetAddress].name\r\n\r\n    onNext(values)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Row align=\"center\" className={classes.heading} grow>\r\n        <Paragraph className={classes.manage} noMargin weight=\"bolder\">\r\n          Send collectible\r\n        </Paragraph>\r\n        <Paragraph className={classes.annotation}>1 of 2</Paragraph>\r\n        <IconButton disableRipple onClick={onClose}>\r\n          <Close className={classes.closeIcon} />\r\n        </IconButton>\r\n      </Row>\r\n      <Hairline />\r\n      <GnoForm formMutators={formMutators} initialValues={initialValues} onSubmit={handleSubmit}>\r\n        {(...args) => {\r\n          const formState = args[2]\r\n          const mutators = args[3]\r\n          const { assetAddress } = formState.values\r\n          const selectedNFTTokens = nftTokens.filter((nftToken) => nftToken.assetAddress === assetAddress)\r\n\r\n          const handleScan = (value, closeQrModal) => {\r\n            let scannedAddress = value\r\n\r\n            if (scannedAddress.startsWith('ethereum:')) {\r\n              scannedAddress = scannedAddress.replace('ethereum:', '')\r\n            }\r\n            const scannedName = addressBook ? getNameFromAddressBook(addressBook, scannedAddress) : ''\r\n            mutators.setRecipient(scannedAddress)\r\n            setSelectedEntry({\r\n              name: scannedName ?? '',\r\n              address: scannedAddress,\r\n            })\r\n            closeQrModal()\r\n          }\r\n\r\n          let shouldDisableSubmitButton = !isValidAddress\r\n\r\n          if (selectedEntry) {\r\n            shouldDisableSubmitButton = !selectedEntry.address\r\n          }\r\n\r\n          return (\r\n            <>\r\n              <WhenFieldChanges field=\"assetAddress\" set=\"nftTokenId\" to={''} />\r\n              <Block className={classes.formContainer}>\r\n                <SafeInfo />\r\n                <Divider withArrow />\r\n                {selectedEntry && selectedEntry.address ? (\r\n                  <div\r\n                    onKeyDown={(e) => {\r\n                      if (sameString(e.key, 'Tab')) {\r\n                        return\r\n                      }\r\n                      setSelectedEntry({ address: '', name: '' })\r\n                    }}\r\n                    onClick={() => {\r\n                      setSelectedEntry({ address: '', name: '' })\r\n                    }}\r\n                    role=\"listbox\"\r\n                    tabIndex={0}\r\n                  >\r\n                    <Row margin=\"xs\">\r\n                      <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                        Recipient\r\n                      </Paragraph>\r\n                    </Row>\r\n                    <Row align=\"center\" margin=\"md\">\r\n                      <Col xs={12}>\r\n                        <EthHashInfo\r\n                          hash={selectedEntry.address}\r\n                          name={selectedEntry.name}\r\n                          showAvatar\r\n                          showCopyBtn\r\n                          explorerUrl={getExplorerInfo(selectedEntry.address)}\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                  </div>\r\n                ) : (\r\n                  <>\r\n                    <Row margin=\"md\">\r\n                      <Col xs={11}>\r\n                        <AddressBookInput\r\n                          fieldMutator={mutators.setRecipient}\r\n                          pristine={pristine}\r\n                          setIsValidAddress={setIsValidAddress}\r\n                          setSelectedEntry={setSelectedEntry}\r\n                        />\r\n                      </Col>\r\n                      <Col center=\"xs\" className={classes} middle=\"xs\" xs={1}>\r\n                        <ScanQRWrapper handleScan={handleScan} />\r\n                      </Col>\r\n                    </Row>\r\n                  </>\r\n                )}\r\n                <Row margin=\"xs\">\r\n                  <Col between=\"lg\">\r\n                    <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                      Collectible\r\n                    </Paragraph>\r\n                  </Col>\r\n                </Row>\r\n                <Row margin=\"sm\">\r\n                  <Col>\r\n                    <TokenSelectField\r\n                      assets={nftAssets}\r\n                      initialValue={\r\n                        (selectedToken as NFTToken)?.assetAddress ?? (selectedToken as Erc721Transfer)?.tokenAddress\r\n                      }\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row margin=\"xs\">\r\n                  <Col between=\"lg\">\r\n                    <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                      Token ID\r\n                    </Paragraph>\r\n                  </Col>\r\n                </Row>\r\n                <Row margin=\"md\">\r\n                  <Col>\r\n                    <CollectibleSelectField initialValue={selectedToken?.tokenId} tokens={selectedNFTTokens} />\r\n                  </Col>\r\n                </Row>\r\n              </Block>\r\n              <Modal.Footer>\r\n                <Modal.Footer.Buttons\r\n                  cancelButtonProps={{ onClick: onClose }}\r\n                  confirmButtonProps={{ disabled: shouldDisableSubmitButton, testId: 'review-tx-btn', text: 'Review' }}\r\n                />\r\n              </Modal.Footer>\r\n            </>\r\n          )\r\n        }}\r\n      </GnoForm>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SendCollectible\r\n","import React from 'react'\r\nimport { Field } from 'react-final-form'\r\n\r\n// $FlowFixMe\r\nconst GnoField = ({ ...props }: any) => <Field {...props} />\r\n\r\nexport default GnoField\r\n","import * as React from 'react'\r\nimport { Form } from 'react-final-form'\r\n\r\nconst stylesBasedOn = (padding) => ({\r\n  padding: `0 ${padding}%`,\r\n  flexDirection: 'column',\r\n  flex: '1 0 auto',\r\n})\r\n\r\nconst GnoForm = ({\r\n  children,\r\n  decorators,\r\n  formMutators,\r\n  initialValues,\r\n  onSubmit,\r\n  padding = 0,\r\n  subscription,\r\n  testId = '',\r\n  validation,\r\n}: any) => (\r\n  <Form\r\n    decorators={decorators}\r\n    initialValues={initialValues}\r\n    mutators={formMutators}\r\n    onSubmit={onSubmit}\r\n    render={({ handleSubmit, ...rest }) => (\r\n      <form data-testid={testId} onSubmit={handleSubmit} style={stylesBasedOn(padding) as any}>\r\n        {children(rest.submitting, rest.validating, rest, rest.form.mutators)}\r\n      </form>\r\n    )}\r\n    subscription={subscription}\r\n    validate={validation}\r\n  />\r\n)\r\n\r\nexport default GnoForm\r\n","import { SyntheticEvent } from 'react'\r\n\r\nimport TokenPlaceholder from 'src/routes/safe/components/Balances/assets/token_placeholder.svg'\r\n\r\nexport const setImageToPlaceholder = (error: SyntheticEvent<HTMLImageElement, Event>): void => {\r\n  error.currentTarget.onerror = null\r\n  error.currentTarget.src = TokenPlaceholder\r\n}\r\n","import * as React from 'react'\r\n\r\nclass Bold extends React.PureComponent<any> {\r\n  render() {\r\n    const { children, ...props } = this.props\r\n\r\n    return <b {...props}>{children}</b>\r\n  }\r\n}\r\n\r\nexport default Bold\r\n","export default __webpack_public_path__ + \"static/media/token_placeholder.c1abe466.svg\";","export default __webpack_public_path__ + \"static/media/qrcode.f0b048aa.svg\";","import React, { ReactElement } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Icon, Divider as DividerSRC } from '@gnosis.pm/safe-react-components'\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 8px 0;\r\n\r\n  svg {\r\n    margin: 0 12px 0 4px;\r\n  }\r\n`\r\nconst StyledDivider = styled(DividerSRC)`\r\n  width: 100%;\r\n`\r\n\r\ntype Props = {\r\n  withArrow?: boolean\r\n}\r\n\r\nconst Divider = ({ withArrow }: Props): ReactElement => (\r\n  <Wrapper>\r\n    {withArrow && <Icon type=\"arrowDown\" size=\"md\" />}\r\n    <StyledDivider />\r\n  </Wrapper>\r\n)\r\n\r\nexport default Divider\r\n","import { background, lg, secondaryText, sm } from 'src/theme/variables'\r\nimport { createStyles } from '@material-ui/core'\r\n\r\nexport const styles = createStyles({\r\n  heading: {\r\n    padding: lg,\r\n    justifyContent: 'space-between',\r\n    maxHeight: '75px',\r\n    boxSizing: 'border-box',\r\n  },\r\n  loaderContainer: {\r\n    width: '100%',\r\n    height: '100%',\r\n  },\r\n  close: {\r\n    height: '25px',\r\n    width: '25px',\r\n    color: secondaryText,\r\n  },\r\n  detailsContainer: {\r\n    backgroundColor: background,\r\n    maxHeight: '450px',\r\n  },\r\n  buttonRow: {\r\n    height: '84px',\r\n    justifyContent: 'center',\r\n  },\r\n  button: {\r\n    '&:last-child': {\r\n      marginLeft: sm,\r\n    },\r\n  },\r\n})\r\n","import IconButton from '@material-ui/core/IconButton'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Close from '@material-ui/icons/Close'\r\nimport * as React from 'react'\r\nimport QrReader from 'react-qr-reader'\r\n\r\nimport { styles } from './style'\r\n\r\nimport Modal from 'src/components/Modal'\r\nimport Block from 'src/components/layout/Block'\r\nimport Button from 'src/components/layout/Button'\r\nimport Col from 'src/components/layout/Col'\r\nimport Hairline from 'src/components/layout/Hairline'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Row from 'src/components/layout/Row'\r\nimport { useEffect, useState } from 'react'\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\ntype Props = {\r\n  isOpen: boolean\r\n  onClose: () => void\r\n  onScan: (value: string) => void\r\n}\r\n\r\nexport const ScanQRModal = ({ isOpen, onClose, onScan }: Props): React.ReactElement => {\r\n  const classes = useStyles()\r\n  const [fileUploadModalOpen, setFileUploadModalOpen] = useState<boolean>(false)\r\n  const [error, setError] = useState<string | null>(null)\r\n  const [cameraBlocked, setCameraBlocked] = useState<boolean>(false)\r\n  const scannerRef: any = React.createRef()\r\n  const openImageDialog = React.useCallback(() => {\r\n    scannerRef.current.openImageDialog()\r\n  }, [scannerRef])\r\n\r\n  useEffect(() => {\r\n    if (!fileUploadModalOpen && cameraBlocked && !error) {\r\n      setFileUploadModalOpen(true)\r\n      openImageDialog()\r\n    }\r\n  }, [cameraBlocked, openImageDialog, fileUploadModalOpen, setFileUploadModalOpen, error])\r\n\r\n  const onFileScannedResolve = (error: Error | null, successData: string | null) => {\r\n    if (error) {\r\n      console.error('QR code error', error)\r\n\r\n      if (error.name === 'NotAllowedError' || error.name === 'PermissionDismissedError') {\r\n        setCameraBlocked(true)\r\n        setFileUploadModalOpen(false)\r\n      } else {\r\n        setError('The QR could not be read')\r\n      }\r\n      return\r\n    }\r\n\r\n    if (successData) {\r\n      onScan(successData)\r\n    } else if (cameraBlocked) {\r\n      setError('The QR could not be read')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal description=\"Receive Tokens Form\" handleClose={onClose} open={isOpen} title=\"Receive Tokens\">\r\n      <Row align=\"center\" className={classes.heading} grow>\r\n        <Paragraph noMargin size=\"xl\">\r\n          Scan QR\r\n        </Paragraph>\r\n        <IconButton disableRipple onClick={onClose}>\r\n          <Close className={classes.close} />\r\n        </IconButton>\r\n      </Row>\r\n      <Hairline />\r\n      <Col className={classes.detailsContainer} layout=\"column\" middle=\"xs\">\r\n        {error && (\r\n          <Block padding=\"md\" margin=\"md\">\r\n            {error}\r\n          </Block>\r\n        )}\r\n        <QrReader\r\n          legacyMode={cameraBlocked}\r\n          onError={(err: Error) => onFileScannedResolve(err, null)}\r\n          onScan={(data: string) => onFileScannedResolve(null, data)}\r\n          ref={scannerRef}\r\n          style={{ width: '400px', height: '400px' }}\r\n          facingMode=\"user\"\r\n        />\r\n      </Col>\r\n      <Hairline />\r\n      <Row align=\"center\" className={classes.buttonRow}>\r\n        <Button className={classes.button} color=\"secondary\" minWidth={154} onClick={onClose}>\r\n          Close\r\n        </Button>\r\n        <Button\r\n          className={classes.button}\r\n          color=\"primary\"\r\n          minWidth={154}\r\n          onClick={() => {\r\n            setCameraBlocked(true)\r\n            setError(null)\r\n            setFileUploadModalOpen(false)\r\n          }}\r\n          variant=\"contained\"\r\n        >\r\n          Upload an image\r\n        </Button>\r\n      </Row>\r\n    </Modal>\r\n  )\r\n}\r\n","import { makeStyles } from '@material-ui/core/styles'\r\nimport React, { ReactElement, useState } from 'react'\r\n\r\nimport QRIcon from 'src/assets/icons/qrcode.svg'\r\nimport { ScanQRModal } from 'src/components/ScanQRModal'\r\nimport Img from 'src/components/layout/Img'\r\n\r\nconst useStyles = makeStyles({\r\n  qrCodeBtn: {\r\n    cursor: 'pointer',\r\n  },\r\n})\r\n\r\ntype Props = {\r\n  handleScan: (dataResult: string, closeQrModal: () => void) => void\r\n}\r\n\r\nexport const ScanQRWrapper = ({ handleScan }: Props): ReactElement => {\r\n  const classes = useStyles()\r\n  const [qrModalOpen, setQrModalOpen] = useState(false)\r\n\r\n  const openQrModal = () => {\r\n    setQrModalOpen(true)\r\n  }\r\n\r\n  const closeQrModal = () => {\r\n    setQrModalOpen(false)\r\n  }\r\n\r\n  const onScanFinished = (value: string) => {\r\n    handleScan(value, closeQrModal)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Img\r\n        alt=\"Scan QR\"\r\n        className={classes.qrCodeBtn}\r\n        height={20}\r\n        onClick={() => openQrModal()}\r\n        role=\"button\"\r\n        src={QRIcon}\r\n        testId=\"qr-icon\"\r\n      />\r\n      {qrModalOpen && <ScanQRModal isOpen={qrModalOpen} onClose={closeQrModal} onScan={onScanFinished} />}\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { EthHashInfo } from '@gnosis.pm/safe-react-components'\r\nimport styled from 'styled-components'\r\n\r\nimport { getExplorerInfo, getNetworkInfo } from 'src/config'\r\nimport { safeNameSelector, safeSelector } from 'src/logic/safe/store/selectors'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Bold from 'src/components/layout/Bold'\r\nimport { border, xs } from 'src/theme/variables'\r\nimport Block from 'src/components/layout/Block'\r\n\r\nconst { nativeCoin } = getNetworkInfo()\r\n\r\nconst StyledBlock = styled(Block)`\r\n  font-size: 12px;\r\n  line-height: 1.08;\r\n  letter-spacing: -0.5px;\r\n  background-color: ${border};\r\n  width: fit-content;\r\n  padding: 5px 10px;\r\n  margin-top: ${xs};\r\n  margin-left: 40px;\r\n  border-radius: 3px;\r\n`\r\n\r\nconst SafeInfo = (): React.ReactElement => {\r\n  const { address: safeAddress = '', ethBalance } = useSelector(safeSelector) || {}\r\n  const safeName = useSelector((state) => safeNameSelector(state, safeAddress))\r\n\r\n  return (\r\n    <>\r\n      <EthHashInfo\r\n        hash={safeAddress}\r\n        name={safeName}\r\n        explorerUrl={getExplorerInfo(safeAddress)}\r\n        showAvatar\r\n        showCopyBtn\r\n      />\r\n      {ethBalance && (\r\n        <StyledBlock>\r\n          <Paragraph noMargin>\r\n            Balance: <Bold data-testid=\"current-eth-balance\">{`${ethBalance} ${nativeCoin.symbol}`}</Bold>\r\n          </Paragraph>\r\n        </StyledBlock>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SafeInfo\r\n","import FormControl from '@material-ui/core/FormControl'\r\nimport FormHelperText from '@material-ui/core/FormHelperText'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport Select from '@material-ui/core/Select'\r\nimport React from 'react'\r\n\r\nconst style = {\r\n  minWidth: '100%',\r\n}\r\n\r\nconst SelectInput = ({\r\n  classes,\r\n  disableError,\r\n  formControlProps,\r\n  input: { name, onChange, value, ...restInput },\r\n  label,\r\n  meta,\r\n  renderValue,\r\n  ...rest\r\n}) => {\r\n  const showError = ((meta.submitError && !meta.dirtySinceLastSubmit) || meta.error) && meta.touched && !disableError\r\n  const inputProps = {\r\n    ...restInput,\r\n    name,\r\n  }\r\n\r\n  return (\r\n    <FormControl {...formControlProps} error={showError} style={style}>\r\n      <InputLabel htmlFor={name}>{label}</InputLabel>\r\n      <Select\r\n        classes={classes}\r\n        inputProps={inputProps}\r\n        onChange={onChange}\r\n        renderValue={renderValue}\r\n        value={value}\r\n        {...rest}\r\n      />\r\n      {showError && <FormHelperText>{meta.error || meta.submitError}</FormHelperText>}\r\n    </FormControl>\r\n  )\r\n}\r\n\r\nexport default SelectInput\r\n","import { createElement, Component } from 'react';\nimport { Field } from 'react-final-form';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nvar ExternallyChangedState =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(ExternallyChangedState, _React$Component);\n\n  function ExternallyChangedState(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      previous: props.input.value,\n      externallyChanged: false\n    };\n    return _this;\n  }\n\n  var _proto = ExternallyChangedState.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    var _this$props = this.props,\n        value = _this$props.input.value,\n        active = _this$props.meta.active;\n    var previous = this.state.previous;\n\n    if (value !== previous) {\n      this.setState({\n        previous: value,\n        externallyChanged: !active\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    return this.props.children(this.state.externallyChanged);\n  };\n\n  return ExternallyChangedState;\n}(Component);\n\nvar ExternallyChanged = function ExternallyChanged(_ref) {\n  var name = _ref.name,\n      children = _ref.children;\n  return createElement(Field, {\n    name: name,\n    subscription: {\n      active: true,\n      value: true\n    },\n    allowNull: true,\n    render: function render(props) {\n      return createElement(ExternallyChangedState, _extends({}, props, {\n        children: children\n      }));\n    }\n  });\n};\n\nvar OnBlurState =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(OnBlurState, _React$Component);\n\n  function OnBlurState(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      previous: !!props.meta.active\n    };\n    return _this;\n  }\n\n  var _proto = OnBlurState.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    var _this$props = this.props,\n        children = _this$props.children,\n        active = _this$props.meta.active;\n    var previous = this.state.previous;\n\n    if (previous && !active) {\n      children();\n    }\n\n    if (previous !== active) {\n      this.setState({\n        previous: active\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    return null;\n  };\n\n  return OnBlurState;\n}(Component);\n\nvar OnBlur = function OnBlur(_ref) {\n  var name = _ref.name,\n      children = _ref.children;\n  return createElement(Field, {\n    name: name,\n    subscription: {\n      active: true\n    },\n    render: function render(props) {\n      return createElement(OnBlurState, _extends({}, props, {\n        children: children\n      }));\n    }\n  });\n};\n\nvar OnChangeState =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(OnChangeState, _React$Component);\n\n  function OnChangeState(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      previous: props.input.value\n    };\n    return _this;\n  }\n\n  var _proto = OnChangeState.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    var _this$props = this.props,\n        children = _this$props.children,\n        value = _this$props.input.value;\n    var previous = this.state.previous;\n\n    if (value !== previous) {\n      this.setState({\n        previous: value\n      });\n      children(value, previous);\n    }\n  };\n\n  _proto.render = function render() {\n    return null;\n  };\n\n  return OnChangeState;\n}(Component);\n\nvar OnChange = function OnChange(_ref) {\n  var name = _ref.name,\n      children = _ref.children;\n  return createElement(Field, {\n    name: name,\n    subscription: {\n      value: true\n    },\n    allowNull: true,\n    render: function render(props) {\n      return createElement(OnChangeState, _extends({}, props, {\n        children: children\n      }));\n    }\n  });\n};\n\nvar OnFocusState =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(OnFocusState, _React$Component);\n\n  function OnFocusState(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      previous: !!props.meta.active\n    };\n    return _this;\n  }\n\n  var _proto = OnFocusState.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    var _this$props = this.props,\n        children = _this$props.children,\n        active = _this$props.meta.active;\n    var previous = this.state.previous;\n\n    if (active && !previous) {\n      this.setState({\n        previous: active\n      });\n      children();\n    } else if (!active && previous) {\n      this.setState({\n        previous: active\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    return null;\n  };\n\n  return OnFocusState;\n}(Component);\n\nvar OnFocus = function OnFocus(_ref) {\n  var name = _ref.name,\n      children = _ref.children;\n  return createElement(Field, {\n    name: name,\n    subscription: {\n      active: true\n    },\n    render: function render(props) {\n      return createElement(OnFocusState, _extends({}, props, {\n        children: children\n      }));\n    }\n  });\n};\n\nexport { ExternallyChanged, OnBlur, OnChange, OnFocus };\n","import { createStyles, makeStyles } from '@material-ui/core'\r\n\r\nexport const useTextFieldLabelStyle = makeStyles(\r\n  createStyles({\r\n    root: {\r\n      overflow: 'hidden',\r\n      borderRadius: 4,\r\n      fontSize: '15px',\r\n      width: '500px',\r\n    },\r\n  }),\r\n)\r\n\r\nexport const useTextFieldInputStyle = makeStyles(\r\n  createStyles({\r\n    root: {\r\n      fontSize: '14px',\r\n      width: '420px',\r\n    },\r\n  }),\r\n)\r\n","import { EthHashInfo } from '@gnosis.pm/safe-react-components'\r\nimport MuiTextField from '@material-ui/core/TextField'\r\nimport Autocomplete, { AutocompleteProps } from '@material-ui/lab/Autocomplete'\r\nimport React, { Dispatch, ReactElement, SetStateAction, useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { mustBeEthereumAddress, mustBeEthereumContractAddress } from 'src/components/forms/validator'\r\nimport { getNetworkId, isFeatureEnabled } from 'src/config'\r\nimport { FEATURES } from 'src/config/networks/network.d'\r\nimport { AddressBookEntry } from 'src/logic/addressBook/model/addressBook'\r\nimport { addressBookSelector } from 'src/logic/addressBook/store/selectors'\r\nimport { filterContractAddressBookEntries, filterAddressEntries } from 'src/logic/addressBook/utils'\r\nimport { isValidEnsName, isValidCryptoDomainName } from 'src/logic/wallets/ethAddresses'\r\nimport { getAddressFromDomain } from 'src/logic/wallets/getWeb3'\r\nimport {\r\n  useTextFieldInputStyle,\r\n  useTextFieldLabelStyle,\r\n} from 'src/routes/safe/components/Balances/SendModal/screens/AddressBookInput/style'\r\nimport { trimSpaces } from 'src/utils/strings'\r\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\r\n\r\nconst chainId = getNetworkId()\r\n\r\nexport interface AddressBookProps {\r\n  fieldMutator: (address: string) => void\r\n  label?: string\r\n  pristine?: boolean\r\n  recipientAddress?: string\r\n  errorMsg?: string\r\n  setIsValidAddress: (valid: boolean) => void\r\n  setSelectedEntry: Dispatch<SetStateAction<{ address: string; name: string }> | null>\r\n}\r\n\r\nexport interface BaseAddressBookInputProps extends AddressBookProps {\r\n  addressBookEntries: AddressBookEntry[]\r\n  setSelectedEntry: (args: { address: string; name: string } | null) => void\r\n  setValidationText: Dispatch<SetStateAction<string | undefined>>\r\n  validationText: string | undefined\r\n}\r\n\r\nconst BaseAddressBookInput = ({\r\n  addressBookEntries,\r\n  fieldMutator,\r\n  label = 'Recipient',\r\n  setIsValidAddress,\r\n  setSelectedEntry,\r\n  setValidationText,\r\n  validationText,\r\n}: BaseAddressBookInputProps): ReactElement => {\r\n  const updateAddressInfo = (addressEntry: AddressBookEntry): void => {\r\n    setSelectedEntry(addressEntry)\r\n    fieldMutator(addressEntry.address)\r\n  }\r\n\r\n  const validateAddress = (address: string): AddressBookEntry | string | undefined => {\r\n    const addressErrorMessage = mustBeEthereumAddress(address)\r\n    setIsValidAddress(!addressErrorMessage)\r\n\r\n    if (addressErrorMessage) {\r\n      setValidationText(addressErrorMessage)\r\n      return\r\n    }\r\n\r\n    const filteredEntries = filterAddressEntries(addressBookEntries, { inputValue: address })\r\n    return filteredEntries.length === 1 ? filteredEntries[0] : address\r\n  }\r\n\r\n  const onChange: AutocompleteProps<AddressBookEntry, false, false, true>['onChange'] = (_, value, reason) => {\r\n    switch (reason) {\r\n      case 'select-option': {\r\n        const { address, name, chainId } = value as AddressBookEntry\r\n        updateAddressInfo({ address, name, chainId })\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  const onInputChange: AutocompleteProps<AddressBookEntry, false, false, true>['onInputChange'] = async (\r\n    _,\r\n    value,\r\n    reason,\r\n  ) => {\r\n    switch (reason) {\r\n      case 'input': {\r\n        const normalizedValue = trimSpaces(value)\r\n\r\n        if (!normalizedValue) {\r\n          break\r\n        }\r\n\r\n        // ENS-enabled resolve/validation\r\n        if (\r\n          isFeatureEnabled(FEATURES.DOMAIN_LOOKUP) &&\r\n          (isValidEnsName(normalizedValue) || isValidCryptoDomainName(normalizedValue))\r\n        ) {\r\n          let address = ''\r\n          try {\r\n            address = await getAddressFromDomain(normalizedValue)\r\n          } catch (err) {\r\n            logError(Errors._101, err.message)\r\n          }\r\n\r\n          const validatedAddress = validateAddress(address)\r\n\r\n          if (!validatedAddress) {\r\n            fieldMutator('')\r\n            break\r\n          }\r\n\r\n          const newEntry =\r\n            typeof validatedAddress === 'string'\r\n              ? {\r\n                  address,\r\n                  name: normalizedValue,\r\n                  chainId,\r\n                }\r\n              : validatedAddress\r\n\r\n          updateAddressInfo(newEntry)\r\n          break\r\n        }\r\n\r\n        // ETH address validation\r\n        const validatedAddress = validateAddress(normalizedValue)\r\n\r\n        if (!validatedAddress) {\r\n          fieldMutator('')\r\n          break\r\n        }\r\n\r\n        const newEntry =\r\n          typeof validatedAddress === 'string'\r\n            ? {\r\n                address: validatedAddress,\r\n                name: '',\r\n                chainId,\r\n              }\r\n            : validatedAddress\r\n\r\n        updateAddressInfo(newEntry)\r\n\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  const labelStyles = useTextFieldLabelStyle()\r\n  const inputStyles = useTextFieldInputStyle()\r\n\r\n  return (\r\n    <Autocomplete<AddressBookEntry, false, false, true>\r\n      closeIcon={null}\r\n      openOnFocus={false}\r\n      filterOptions={filterAddressEntries}\r\n      freeSolo\r\n      onChange={onChange}\r\n      onInputChange={onInputChange}\r\n      options={addressBookEntries}\r\n      id=\"address-book-input\"\r\n      renderInput={(params) => (\r\n        <MuiTextField\r\n          {...params}\r\n          autoFocus={true}\r\n          error={!!validationText}\r\n          fullWidth\r\n          variant=\"filled\"\r\n          label={validationText ? validationText : label}\r\n          InputLabelProps={{ shrink: true, required: true, classes: labelStyles }}\r\n          InputProps={{ ...params.InputProps, classes: inputStyles }}\r\n        />\r\n      )}\r\n      getOptionLabel={({ address }) => address}\r\n      renderOption={({ address, name }) => <EthHashInfo hash={address} name={name} showAvatar />}\r\n      role=\"listbox\"\r\n      style={{ display: 'flex', flexGrow: 1 }}\r\n    />\r\n  )\r\n}\r\n\r\nexport const AddressBookInput = (props: AddressBookProps): ReactElement => {\r\n  const addressBookEntries = useSelector(addressBookSelector)\r\n  const [validationText, setValidationText] = useState<string>('')\r\n\r\n  useEffect(() => {\r\n    if (props.errorMsg) {\r\n      setValidationText(props.errorMsg)\r\n    }\r\n  }, [props.errorMsg])\r\n\r\n  return (\r\n    <BaseAddressBookInput\r\n      addressBookEntries={addressBookEntries}\r\n      setValidationText={setValidationText}\r\n      validationText={validationText}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport const ContractsAddressBookInput = ({\r\n  setIsValidAddress,\r\n  setSelectedEntry,\r\n  ...props\r\n}: AddressBookProps): ReactElement => {\r\n  const addressBookEntries = useSelector(addressBookSelector)\r\n  const [filteredEntries, setFilteredEntries] = useState<AddressBookEntry[]>([])\r\n  const [validationText, setValidationText] = useState<string>('')\r\n\r\n  useEffect(() => {\r\n    const filterContractAddresses = async (): Promise<void> => {\r\n      const filteredADBK = await filterContractAddressBookEntries(addressBookEntries)\r\n      setFilteredEntries(filteredADBK)\r\n    }\r\n    filterContractAddresses()\r\n  }, [addressBookEntries])\r\n\r\n  const onSetSelectedEntry = async (selectedEntry) => {\r\n    if (selectedEntry?.address) {\r\n      // verify if `address` is a contract\r\n      const contractAddressErrorMessage = await mustBeEthereumContractAddress(selectedEntry.address)\r\n      setIsValidAddress(!contractAddressErrorMessage)\r\n      setValidationText(contractAddressErrorMessage ?? '')\r\n      setSelectedEntry(selectedEntry)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <BaseAddressBookInput\r\n      addressBookEntries={filteredEntries}\r\n      setIsValidAddress={setIsValidAddress}\r\n      setSelectedEntry={onSetSelectedEntry}\r\n      setValidationText={setValidationText}\r\n      validationText={validationText}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n","import { createSelector } from 'reselect'\r\nimport { NFTAsset, NFTAssets, NFTToken, NFTTokens } from 'src/logic/collectibles/sources/collectibles.d'\r\n\r\nimport { AppReduxState } from 'src/store'\r\nimport { NFT_ASSETS_REDUCER_ID, NFT_TOKENS_REDUCER_ID } from 'src/logic/collectibles/store/reducer/collectibles'\r\nexport const nftAssets = (state: AppReduxState): NFTAssets => state[NFT_ASSETS_REDUCER_ID]\r\nexport const nftTokens = (state: AppReduxState): NFTTokens => state[NFT_TOKENS_REDUCER_ID]\r\n\r\nexport const nftAssetsSelector = createSelector(nftAssets, (assets) => assets)\r\n\r\nexport const nftTokensSelector = createSelector(nftTokens, (tokens) => tokens)\r\n\r\nconst nftAssetsToListSelector = createSelector(nftAssets, (assets): NFTAsset[] => {\r\n  return assets ? Object.values(assets) : []\r\n})\r\n\r\nconst nftAssetsAddressFromNftTokensSelector = createSelector(nftTokensSelector, (userNftTokens): string[] => {\r\n  const addresses = userNftTokens.map((nftToken) => nftToken.assetAddress)\r\n  const uniqueAddresses = new Set(addresses)\r\n  return Array.from(uniqueAddresses)\r\n})\r\n\r\nexport const orderedNFTAssets = createSelector(nftTokensSelector, (userNftTokens): NFTToken[] =>\r\n  userNftTokens.sort((a, b) => a.name.localeCompare(b.name)),\r\n)\r\n\r\nexport const nftAssetsFromNftTokensSelector = createSelector(\r\n  nftAssetsToListSelector,\r\n  nftAssetsAddressFromNftTokensSelector,\r\n  (nftAssets, nftAssetsFromNftTokens): NFTAsset[] => {\r\n    return nftAssets\r\n      .sort((a, b) => a.name.localeCompare(b.name))\r\n      .filter(({ address }) => nftAssetsFromNftTokens.includes(address))\r\n  },\r\n)\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListContext from '../List/ListContext';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      minWidth: 56,\n      color: theme.palette.action.active,\n      flexShrink: 0,\n      display: 'inline-flex'\n    },\n\n    /* Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`. */\n    alignItemsFlexStart: {\n      marginTop: 8\n    }\n  };\n};\n/**\n * A simple wrapper to apply `List` styles to an `Icon` or `SvgIcon`.\n */\n\nvar ListItemIcon = /*#__PURE__*/React.forwardRef(function ListItemIcon(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  var context = React.useContext(ListContext);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, context.alignItems === 'flex-start' && classes.alignItemsFlexStart),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemIcon.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component, normally `Icon`, `SvgIcon`,\n   * or a `@material-ui/icons` SVG icon element.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemIcon'\n})(ListItemIcon);"],"sourceRoot":""}