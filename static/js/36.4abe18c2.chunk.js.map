{"version":3,"sources":["routes/safe/components/Balances/SendModal/screens/ReviewSendFundsTx/style.ts","routes/safe/components/Balances/SendModal/screens/ReviewSendFundsTx/index.tsx","routes/safe/components/Balances/utils/setTokenImgToPlaceholder.ts","components/layout/Bold/index.tsx","routes/safe/components/Balances/assets/token_placeholder.svg","components/Divider/index.tsx","routes/safe/components/Balances/SendModal/SafeInfo/index.tsx","logic/tokens/store/actions/fetchTokens.ts"],"names":["styles","createStyles","heading","padding","md","lg","justifyContent","boxSizing","maxHeight","annotation","letterSpacing","color","secondaryText","marginRight","marginLeft","headingText","fontSize","closeIcon","height","width","container","amount","sm","buttonRow","gap","gasCostsContainer","backgroundColor","background","useStyles","makeStyles","nativeCoin","getNetworkInfo","ReviewSendFundsTx","onClose","onPrev","tx","classes","dispatch","useDispatch","safeAddress","useSelector","safeParamAddressFromStateSelector","tokens","extendedSafeTokensSelector","txToken","useMemo","find","token","sameAddress","address","isSendingNativeToken","txRecipient","recipientAddress","txValue","toTokenUnit","decimals","data","txAmount","useState","setData","useEffect","a","txData","EMPTY_DATA","getHumanFriendlyToken","StandardToken","at","tokenInstance","erc20TransferAmount","contract","methods","transfer","encodeABI","updateTxDataAsync","useTxData","manualSafeTxGas","setManualSafeTxGas","manualGasPrice","setManualGasPrice","manualGasLimit","setManualGasLimit","useEstimateTransactionGas","txType","safeTxGas","gasCostFormatted","gasPriceFormatted","gasLimit","gasEstimation","txEstimationExecutionStatus","isExecution","isCreation","isOffChainSignature","useEstimationStatus","buttonStatus","setButtonStatus","isSpendingLimit","sameString","EditableTxParameters","ethGasLimit","ethGasPrice","toString","closeEditModalCallback","txParameters","oldGasPrice","Number","newGasPrice","oldSafeTxGas","newSafeTxGas","toggleEditMode","Row","align","className","grow","data-testid","Paragraph","noMargin","weight","IconButton","disableRipple","onClick","Hairline","Block","SafeInfo","Divider","withArrow","margin","size","style","Col","xs","hash","name","recipientName","showCopyBtn","showAvatar","explorerUrl","getExplorerInfo","Img","alt","onError","setImageToPlaceholder","src","logoUri","symbol","TxParametersDetail","onEdit","isTransactionCreation","isTransactionExecution","EstimationStatus","LOADING","Modal","Footer","withoutBorder","ButtonStatus","Buttons","cancelButtonProps","text","confirmButtonProps","READY","console","error","tokenSpendingLimit","spendingLimitTokenAddress","ZERO_ADDRESS","getSpendingLimitContract","executeAllowanceTransfer","delegate","send","from","on","catch","createTransaction","to","valueInWei","txNonce","safeNonce","undefined","ethParameters","notifiedTransaction","TX_NOTIFICATION_TYPES","STANDARD_TX","submitTx","status","testId","currentTarget","onerror","TokenPlaceholder","Bold","this","props","children","React","Wrapper","styled","div","StyledDivider","DividerSRC","type","StyledBlock","border","safeSelector","ethBalance","safeName","state","safeNameSelector","createStandardTokenContract","web3","getWeb3","erc20Token","setProvider","currentProvider","createHumanFriendlyTokenContract","HumanFriendlyToken","humanErc20Token","createERC721TokenContract","ERC721","erc721Token","ensureOnce","getStandardTokenContract","getERC721TokenContract","fetchTokens","getState","currentSavedTokens","tokensSelector","fetchErc20AndErc721AssetsList","resp","tokenList","results","logError","Errors","_600","message","erc20Tokens","filter","toLowerCase","length","List","map","makeToken","addTokens"],"mappings":"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","file":"static/js/36.4abe18c2.chunk.js","sourcesContent":["import { background, lg, md, secondaryText, sm } from 'src/theme/variables'\r\nimport { createStyles } from '@material-ui/core'\r\n\r\nexport const styles = createStyles({\r\n  heading: {\r\n    padding: `${md} ${lg}`,\r\n    justifyContent: 'flex-start',\r\n    boxSizing: 'border-box',\r\n    maxHeight: '74px',\r\n  },\r\n  annotation: {\r\n    letterSpacing: '-1px',\r\n    color: secondaryText,\r\n    marginRight: 'auto',\r\n    marginLeft: '20px',\r\n  },\r\n  headingText: {\r\n    fontSize: lg,\r\n  },\r\n  closeIcon: {\r\n    height: '35px',\r\n    width: '35px',\r\n  },\r\n  container: {\r\n    padding: `${md} ${lg}`,\r\n  },\r\n  amount: {\r\n    marginLeft: sm,\r\n  },\r\n  buttonRow: {\r\n    height: '84px',\r\n    justifyContent: 'center',\r\n    gap: '16px',\r\n  },\r\n  gasCostsContainer: {\r\n    backgroundColor: background,\r\n    padding: `0 ${lg}`,\r\n  },\r\n})\r\n","import IconButton from '@material-ui/core/IconButton'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Close from '@material-ui/icons/Close'\r\nimport React, { useEffect, useMemo, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { EthHashInfo } from '@gnosis.pm/safe-react-components'\r\n\r\nimport { toTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\r\nimport { getExplorerInfo, getNetworkInfo } from 'src/config'\r\nimport Divider from 'src/components/Divider'\r\nimport Block from 'src/components/layout/Block'\r\nimport Col from 'src/components/layout/Col'\r\nimport Hairline from 'src/components/layout/Hairline'\r\nimport Img from 'src/components/layout/Img'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Row from 'src/components/layout/Row'\r\nimport { getSpendingLimitContract } from 'src/logic/contracts/safeContracts'\r\nimport { createTransaction } from 'src/logic/safe/store/actions/createTransaction'\r\nimport { safeParamAddressFromStateSelector } from 'src/logic/safe/store/selectors'\r\nimport { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions'\r\nimport { getHumanFriendlyToken } from 'src/logic/tokens/store/actions/fetchTokens'\r\nimport { sameAddress, ZERO_ADDRESS } from 'src/logic/wallets/ethAddresses'\r\nimport { EMPTY_DATA } from 'src/logic/wallets/ethTransactions'\r\nimport SafeInfo from 'src/routes/safe/components/Balances/SendModal/SafeInfo'\r\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\r\nimport { extendedSafeTokensSelector } from 'src/routes/safe/container/selector'\r\nimport { SpendingLimit } from 'src/logic/safe/store/models/safe'\r\nimport { sameString } from 'src/utils/strings'\r\nimport { TokenProps } from 'src/logic/tokens/store/model/token'\r\nimport { RecordOf } from 'immutable'\r\nimport { EstimationStatus, useEstimateTransactionGas } from 'src/logic/hooks/useEstimateTransactionGas'\r\nimport { useEstimationStatus } from 'src/logic/hooks/useEstimationStatus'\r\nimport { ButtonStatus, Modal } from 'src/components/Modal'\r\nimport { TransactionFees } from 'src/components/TransactionsFees'\r\n\r\nimport { styles } from './style'\r\nimport { EditableTxParameters } from 'src/routes/safe/components/Transactions/helpers/EditableTxParameters'\r\nimport { TxParametersDetail } from 'src/routes/safe/components/Transactions/helpers/TxParametersDetail'\r\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\r\n\r\nconst useStyles = makeStyles(styles)\r\n\r\nconst { nativeCoin } = getNetworkInfo()\r\n\r\nexport type ReviewTxProp = {\r\n  recipientAddress: string\r\n  recipientName?: string\r\n  amount: string\r\n  txRecipient: string\r\n  token: string\r\n  txType?: string\r\n  tokenSpendingLimit?: SpendingLimit\r\n}\r\n\r\ntype ReviewTxProps = {\r\n  onClose: () => void\r\n  onPrev: () => void\r\n  tx: ReviewTxProp\r\n}\r\n\r\nconst useTxData = (\r\n  isSendingNativeToken: boolean,\r\n  txAmount: string,\r\n  recipientAddress: string,\r\n  txToken?: RecordOf<TokenProps>,\r\n): string => {\r\n  const [data, setData] = useState('')\r\n\r\n  useEffect(() => {\r\n    const updateTxDataAsync = async () => {\r\n      if (!txToken) {\r\n        return\r\n      }\r\n\r\n      let txData = EMPTY_DATA\r\n      if (!isSendingNativeToken) {\r\n        const StandardToken = await getHumanFriendlyToken()\r\n        const tokenInstance = await StandardToken.at(txToken.address as string)\r\n        const erc20TransferAmount = toTokenUnit(txAmount, txToken.decimals)\r\n        txData = tokenInstance.contract.methods.transfer(recipientAddress, erc20TransferAmount).encodeABI()\r\n      }\r\n      setData(txData)\r\n    }\r\n\r\n    updateTxDataAsync()\r\n  }, [isSendingNativeToken, recipientAddress, txAmount, txToken])\r\n\r\n  return data\r\n}\r\n\r\nconst ReviewSendFundsTx = ({ onClose, onPrev, tx }: ReviewTxProps): React.ReactElement => {\r\n  const classes = useStyles()\r\n  const dispatch = useDispatch()\r\n  const safeAddress = useSelector(safeParamAddressFromStateSelector)\r\n  const tokens: any = useSelector(extendedSafeTokensSelector)\r\n  const txToken = useMemo(() => tokens.find((token) => sameAddress(token.address, tx.token)), [tokens, tx.token])\r\n  const isSendingNativeToken = useMemo(() => sameAddress(txToken?.address, nativeCoin.address), [txToken])\r\n  const txRecipient = isSendingNativeToken ? tx.recipientAddress : txToken?.address || ''\r\n  const txValue = isSendingNativeToken ? toTokenUnit(tx.amount, nativeCoin.decimals) : '0'\r\n  const data = useTxData(isSendingNativeToken, tx.amount, tx.recipientAddress, txToken)\r\n  const [manualSafeTxGas, setManualSafeTxGas] = useState(0)\r\n  const [manualGasPrice, setManualGasPrice] = useState<string | undefined>()\r\n  const [manualGasLimit, setManualGasLimit] = useState<string | undefined>()\r\n\r\n  const {\r\n    gasCostFormatted,\r\n    gasPriceFormatted,\r\n    gasLimit,\r\n    gasEstimation,\r\n    txEstimationExecutionStatus,\r\n    isExecution,\r\n    isCreation,\r\n    isOffChainSignature,\r\n  } = useEstimateTransactionGas({\r\n    txData: data,\r\n    txRecipient,\r\n    txType: tx.txType,\r\n    txAmount: txValue,\r\n    safeTxGas: manualSafeTxGas,\r\n    manualGasPrice,\r\n    manualGasLimit,\r\n  })\r\n\r\n  const [buttonStatus, setButtonStatus] = useEstimationStatus(txEstimationExecutionStatus)\r\n  const isSpendingLimit = sameString(tx.txType, 'spendingLimit')\r\n\r\n  const submitTx = (txParameters: TxParameters) => {\r\n    setButtonStatus(ButtonStatus.LOADING)\r\n\r\n    if (!safeAddress) {\r\n      setButtonStatus(ButtonStatus.READY)\r\n      console.error('There was an error trying to submit the transaction, the safeAddress was not found')\r\n      return\r\n    }\r\n\r\n    if (isSpendingLimit && txToken && tx.tokenSpendingLimit) {\r\n      const spendingLimitTokenAddress = isSendingNativeToken ? ZERO_ADDRESS : txToken.address\r\n      const spendingLimit = getSpendingLimitContract()\r\n      spendingLimit.methods\r\n        .executeAllowanceTransfer(\r\n          safeAddress,\r\n          spendingLimitTokenAddress,\r\n          tx.recipientAddress,\r\n          toTokenUnit(tx.amount, txToken.decimals),\r\n          ZERO_ADDRESS,\r\n          0,\r\n          tx.tokenSpendingLimit.delegate,\r\n          EMPTY_DATA,\r\n        )\r\n        .send({ from: tx.tokenSpendingLimit.delegate })\r\n        .on('transactionHash', () => onClose())\r\n        .catch((error) => {\r\n          setButtonStatus(ButtonStatus.READY)\r\n          console.error(error)\r\n        })\r\n    } else {\r\n      dispatch(\r\n        createTransaction({\r\n          safeAddress: safeAddress,\r\n          to: txRecipient as string,\r\n          valueInWei: txValue,\r\n          txData: data,\r\n          txNonce: txParameters.safeNonce,\r\n          safeTxGas: txParameters.safeTxGas ? Number(txParameters.safeTxGas) : undefined,\r\n          ethParameters: txParameters,\r\n          notifiedTransaction: TX_NOTIFICATION_TYPES.STANDARD_TX,\r\n        }),\r\n      )\r\n      onClose()\r\n    }\r\n  }\r\n\r\n  const closeEditModalCallback = (txParameters: TxParameters) => {\r\n    const oldGasPrice = Number(gasPriceFormatted)\r\n    const newGasPrice = Number(txParameters.ethGasPrice)\r\n    const oldSafeTxGas = Number(gasEstimation)\r\n    const newSafeTxGas = Number(txParameters.safeTxGas)\r\n\r\n    if (newGasPrice && oldGasPrice !== newGasPrice) {\r\n      setManualGasPrice(txParameters.ethGasPrice)\r\n    }\r\n\r\n    if (txParameters.ethGasLimit && gasLimit !== txParameters.ethGasLimit) {\r\n      setManualGasLimit(txParameters.ethGasLimit)\r\n    }\r\n\r\n    if (newSafeTxGas && oldSafeTxGas !== newSafeTxGas) {\r\n      setManualSafeTxGas(newSafeTxGas)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <EditableTxParameters\r\n      isOffChainSignature={isOffChainSignature}\r\n      isExecution={isExecution}\r\n      ethGasLimit={gasLimit}\r\n      ethGasPrice={gasPriceFormatted}\r\n      safeTxGas={gasEstimation.toString()}\r\n      closeEditModalCallback={closeEditModalCallback}\r\n    >\r\n      {(txParameters, toggleEditMode) => (\r\n        <>\r\n          {/* Header */}\r\n          <Row align=\"center\" className={classes.heading} grow data-testid=\"send-funds-review-step\">\r\n            <Paragraph className={classes.headingText} noMargin weight=\"bolder\">\r\n              Send funds\r\n            </Paragraph>\r\n            <Paragraph className={classes.annotation}>2 of 2</Paragraph>\r\n            <IconButton disableRipple onClick={onClose}>\r\n              <Close className={classes.closeIcon} />\r\n            </IconButton>\r\n          </Row>\r\n\r\n          <Hairline />\r\n\r\n          <Block className={classes.container}>\r\n            {/* SafeInfo */}\r\n            <SafeInfo />\r\n            <Divider withArrow />\r\n\r\n            {/* Recipient */}\r\n            <Row margin=\"xs\">\r\n              <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                Recipient\r\n              </Paragraph>\r\n            </Row>\r\n            <Row align=\"center\" margin=\"md\">\r\n              <Col xs={12}>\r\n                <EthHashInfo\r\n                  hash={tx.recipientAddress}\r\n                  name={tx.recipientName}\r\n                  showCopyBtn\r\n                  showAvatar\r\n                  explorerUrl={getExplorerInfo(tx.recipientAddress)}\r\n                />\r\n              </Col>\r\n            </Row>\r\n\r\n            {/* Amount */}\r\n            <Row margin=\"xs\">\r\n              <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\r\n                Amount\r\n              </Paragraph>\r\n            </Row>\r\n            <Row align=\"center\" margin=\"md\">\r\n              <Img alt={txToken?.name as string} height={28} onError={setImageToPlaceholder} src={txToken?.logoUri} />\r\n              <Paragraph\r\n                className={classes.amount}\r\n                noMargin\r\n                size=\"md\"\r\n                data-testid={`amount-${txToken?.symbol as string}-review-step`}\r\n              >\r\n                {tx.amount} {txToken?.symbol}\r\n              </Paragraph>\r\n            </Row>\r\n\r\n            {/* Tx Parameters */}\r\n            {/* FIXME TxParameters should be updated to be used with spending limits */}\r\n            {!isSpendingLimit && (\r\n              <TxParametersDetail\r\n                txParameters={txParameters}\r\n                onEdit={toggleEditMode}\r\n                isTransactionCreation={isCreation}\r\n                isTransactionExecution={isExecution}\r\n                isOffChainSignature={isOffChainSignature}\r\n              />\r\n            )}\r\n          </Block>\r\n\r\n          {/* Disclaimer */}\r\n          {/* FIXME Estimation should be fixed to be used with spending limits */}\r\n          {!isSpendingLimit && txEstimationExecutionStatus !== EstimationStatus.LOADING && (\r\n            <div className={classes.gasCostsContainer}>\r\n              <TransactionFees\r\n                gasCostFormatted={gasCostFormatted}\r\n                isExecution={isExecution}\r\n                isCreation={isCreation}\r\n                isOffChainSignature={isOffChainSignature}\r\n                txEstimationExecutionStatus={txEstimationExecutionStatus}\r\n              />\r\n            </div>\r\n          )}\r\n\r\n          {/* Footer */}\r\n          <Modal.Footer withoutBorder={!isSpendingLimit && buttonStatus !== ButtonStatus.LOADING}>\r\n            <Modal.Footer.Buttons\r\n              cancelButtonProps={{ onClick: onPrev, text: 'Back' }}\r\n              confirmButtonProps={{\r\n                onClick: () => submitTx(txParameters),\r\n                status: buttonStatus,\r\n                text: txEstimationExecutionStatus === EstimationStatus.LOADING ? 'Estimating' : undefined,\r\n                testId: 'submit-tx-btn',\r\n              }}\r\n            />\r\n          </Modal.Footer>\r\n        </>\r\n      )}\r\n    </EditableTxParameters>\r\n  )\r\n}\r\n\r\nexport default ReviewSendFundsTx\r\n","import { SyntheticEvent } from 'react'\r\n\r\nimport TokenPlaceholder from 'src/routes/safe/components/Balances/assets/token_placeholder.svg'\r\n\r\nexport const setImageToPlaceholder = (error: SyntheticEvent<HTMLImageElement, Event>): void => {\r\n  error.currentTarget.onerror = null\r\n  error.currentTarget.src = TokenPlaceholder\r\n}\r\n","import * as React from 'react'\r\n\r\nclass Bold extends React.PureComponent<any> {\r\n  render() {\r\n    const { children, ...props } = this.props\r\n\r\n    return <b {...props}>{children}</b>\r\n  }\r\n}\r\n\r\nexport default Bold\r\n","export default __webpack_public_path__ + \"static/media/token_placeholder.c1abe466.svg\";","import React, { ReactElement } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Icon, Divider as DividerSRC } from '@gnosis.pm/safe-react-components'\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 8px 0;\r\n\r\n  svg {\r\n    margin: 0 12px 0 4px;\r\n  }\r\n`\r\nconst StyledDivider = styled(DividerSRC)`\r\n  width: 100%;\r\n`\r\n\r\ntype Props = {\r\n  withArrow?: boolean\r\n}\r\n\r\nconst Divider = ({ withArrow }: Props): ReactElement => (\r\n  <Wrapper>\r\n    {withArrow && <Icon type=\"arrowDown\" size=\"md\" />}\r\n    <StyledDivider />\r\n  </Wrapper>\r\n)\r\n\r\nexport default Divider\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { EthHashInfo } from '@gnosis.pm/safe-react-components'\r\nimport styled from 'styled-components'\r\n\r\nimport { getExplorerInfo, getNetworkInfo } from 'src/config'\r\nimport { safeNameSelector, safeSelector } from 'src/logic/safe/store/selectors'\r\nimport Paragraph from 'src/components/layout/Paragraph'\r\nimport Bold from 'src/components/layout/Bold'\r\nimport { border, xs } from 'src/theme/variables'\r\nimport Block from 'src/components/layout/Block'\r\n\r\nconst { nativeCoin } = getNetworkInfo()\r\n\r\nconst StyledBlock = styled(Block)`\r\n  font-size: 12px;\r\n  line-height: 1.08;\r\n  letter-spacing: -0.5px;\r\n  background-color: ${border};\r\n  width: fit-content;\r\n  padding: 5px 10px;\r\n  margin-top: ${xs};\r\n  margin-left: 40px;\r\n  border-radius: 3px;\r\n`\r\n\r\nconst SafeInfo = (): React.ReactElement => {\r\n  const { address: safeAddress = '', ethBalance } = useSelector(safeSelector) || {}\r\n  const safeName = useSelector((state) => safeNameSelector(state, safeAddress))\r\n\r\n  return (\r\n    <>\r\n      <EthHashInfo\r\n        hash={safeAddress}\r\n        name={safeName}\r\n        explorerUrl={getExplorerInfo(safeAddress)}\r\n        showAvatar\r\n        showCopyBtn\r\n      />\r\n      {ethBalance && (\r\n        <StyledBlock>\r\n          <Paragraph noMargin>\r\n            Balance: <Bold data-testid=\"current-eth-balance\">{`${ethBalance} ${nativeCoin.symbol}`}</Bold>\r\n          </Paragraph>\r\n        </StyledBlock>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SafeInfo\r\n","import StandardToken from '@gnosis.pm/util-contracts/build/contracts/GnosisStandardToken.json'\r\nimport HumanFriendlyToken from '@gnosis.pm/util-contracts/build/contracts/HumanFriendlyToken.json'\r\nimport ERC721 from '@openzeppelin/contracts/build/contracts/ERC721.json'\r\nimport { List } from 'immutable'\r\nimport contract from '@truffle/contract/index.js'\r\nimport { addTokens } from 'src/logic/tokens/store/actions/addTokens'\r\nimport { fetchErc20AndErc721AssetsList } from 'src/logic/tokens/api'\r\nimport { makeToken } from 'src/logic/tokens/store/model/token'\r\nimport { tokensSelector } from 'src/logic/tokens/store/selectors'\r\nimport { getWeb3 } from 'src/logic/wallets/getWeb3'\r\nimport { AppReduxState } from 'src/store'\r\nimport { ensureOnce } from 'src/utils/singleton'\r\nimport { ThunkDispatch } from 'redux-thunk'\r\nimport { AnyAction } from 'redux'\r\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\r\nimport { TokenResult } from '../../api/fetchErc20AndErc721AssetsList'\r\n\r\nconst createStandardTokenContract = async () => {\r\n  const web3 = getWeb3()\r\n  const erc20Token = await contract(StandardToken)\r\n  erc20Token.setProvider(web3.currentProvider)\r\n  return erc20Token\r\n}\r\n\r\nconst createHumanFriendlyTokenContract = async () => {\r\n  const web3 = getWeb3()\r\n  const humanErc20Token = await contract(HumanFriendlyToken)\r\n  humanErc20Token.setProvider(web3.currentProvider)\r\n\r\n  return humanErc20Token\r\n}\r\n\r\nconst createERC721TokenContract = async () => {\r\n  const web3 = getWeb3()\r\n  const erc721Token = await contract(ERC721)\r\n  erc721Token.setProvider(web3.currentProvider)\r\n  return erc721Token\r\n}\r\n\r\nexport const getHumanFriendlyToken = ensureOnce(createHumanFriendlyTokenContract)\r\n\r\nexport const getStandardTokenContract = ensureOnce(createStandardTokenContract)\r\n\r\nexport const getERC721TokenContract = ensureOnce(createERC721TokenContract)\r\n\r\nexport const containsMethodByHash = async (contractAddress: string, methodHash: string): Promise<boolean> => {\r\n  const web3 = getWeb3()\r\n  const byteCode = await web3.eth.getCode(contractAddress)\r\n\r\n  return byteCode.indexOf(methodHash.replace('0x', '')) !== -1\r\n}\r\n\r\nexport const fetchTokens = () => async (\r\n  dispatch: ThunkDispatch<AppReduxState, undefined, AnyAction>,\r\n  getState: () => AppReduxState,\r\n): Promise<void> => {\r\n  const currentSavedTokens = tokensSelector(getState())\r\n\r\n  let tokenList: TokenResult[]\r\n  try {\r\n    const resp = await fetchErc20AndErc721AssetsList()\r\n    tokenList = resp.data.results\r\n  } catch (e) {\r\n    logError(Errors._600, e.message)\r\n    return\r\n  }\r\n\r\n  const erc20Tokens = tokenList.filter((token) => token.type.toLowerCase() === 'erc20')\r\n\r\n  if (currentSavedTokens?.size === erc20Tokens.length) {\r\n    return\r\n  }\r\n\r\n  const tokens = List(erc20Tokens.map((token) => makeToken(token)))\r\n\r\n  dispatch(addTokens(tokens))\r\n}\r\n"],"sourceRoot":""}